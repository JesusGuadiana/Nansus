Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PRGM ID main_quad add_program_function EOS program_prime
Rule 2     program_prime -> vars program_prime
Rule 3     program_prime -> modules program_prime
Rule 4     program_prime -> program_second_prime
Rule 5     program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime
Rule 6     program_third_prime -> vars program_third_prime
Rule 7     program_third_prime -> body RIGHTBRACE EOS
Rule 8     main_quad -> <empty>
Rule 9     add_program_function -> <empty>
Rule 10    fill_main -> <empty>
Rule 11    vars -> type vars_prime vars_third_prime
Rule 12    vars_prime -> ID save_id vars_second_prime
Rule 13    vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_fifth_prime
Rule 14    vars_second_prime -> <empty>
Rule 15    vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime
Rule 16    vars_third_prime -> store_variable vars_fourth_prime
Rule 17    vars_fourth_prime -> EOS
Rule 18    vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two
Rule 19    vars_fifth_prime -> allocate_sequential_memory set_internal_dimension_one
Rule 20    save_id -> <empty>
Rule 21    change_dimension -> <empty>
Rule 22    store_variable -> <empty>
Rule 23    first_dimension -> <empty>
Rule 24    second_dimension -> <empty>
Rule 25    set_internal_dimension_one -> <empty>
Rule 26    set_internal_dimension_two -> <empty>
Rule 27    allocate_sequential_memory -> <empty>
Rule 28    type -> TYPEINT
Rule 29    type -> TYPEFLOAT
Rule 30    type -> TYPECHAR
Rule 31    body -> statement body_prime
Rule 32    body_prime -> body
Rule 33    body_prime -> <empty>
Rule 34    modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime
Rule 35    modules_prime -> type
Rule 36    modules_prime -> NOTYPE void_type
Rule 37    modules_second_prime -> type ID add_parameter modules_third_prime
Rule 38    modules_third_prime -> SEPARATOR modules_second_prime
Rule 39    modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime
Rule 40    modules_fourth_prime -> vars modules_fourth_prime
Rule 41    modules_fourth_prime -> body modules_fifth_prime
Rule 42    modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me
Rule 43    modules_fifth_prime -> RIGHTBRACE endproc_quad print_me
Rule 44    print_me -> <empty>
Rule 45    void_type -> <empty>
Rule 46    add_module -> <empty>
Rule 47    add_parameter -> <empty>
Rule 48    return_quad -> <empty>
Rule 49    endproc_quad -> <empty>
Rule 50    statement -> assignment EOS
Rule 51    statement -> print EOS
Rule 52    statement -> functioncall EOS
Rule 53    statement -> condition
Rule 54    statement -> specialfunction EOS
Rule 55    statement -> input EOS
Rule 56    compoundexp -> expression eval_logic compoundexp_prime
Rule 57    compoundexp_prime -> AND push_operator compoundexp
Rule 58    compoundexp_prime -> OR push_operator compoundexp
Rule 59    compoundexp_prime -> <empty>
Rule 60    eval_logic -> <empty>
Rule 61    expression -> exp eval_relational expression_prime
Rule 62    expression_prime -> GREATER push_operator expression
Rule 63    expression_prime -> LESS push_operator expression
Rule 64    expression_prime -> EQUAL push_operator expression
Rule 65    expression_prime -> NOTEQUAL push_operator expression
Rule 66    expression_prime -> GREATEREQUAL push_operator expression
Rule 67    expression_prime -> LESSEQUAL push_operator expression
Rule 68    expression_prime -> <empty>
Rule 69    eval_relational -> <empty>
Rule 70    exp -> term eval_term exp_prime
Rule 71    exp_prime -> PLUS push_operator exp
Rule 72    exp_prime -> MINUS push_operator exp
Rule 73    exp_prime -> <empty>
Rule 74    eval_term -> <empty>
Rule 75    term -> factor eval_factor term_prime
Rule 76    term_prime -> MULTIPLY push_operator term
Rule 77    term_prime -> DIVIDE push_operator term
Rule 78    term_prime -> <empty>
Rule 79    eval_factor -> <empty>
Rule 80    factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom
Rule 81    factor -> operand
Rule 82    fake_bottom -> <empty>
Rule 83    pop_fake_bottom -> <empty>
Rule 84    operand -> CSTI evaluate_operation_int
Rule 85    operand -> CSTF evaluate_operation_float
Rule 86    operand -> CSTC evaluate_operation_char
Rule 87    operand -> ID push_id save_id_operand operand_prime
Rule 88    operand -> FUNCTION functioncall
Rule 89    save_id_operand -> <empty>
Rule 90    save_id_array -> <empty>
Rule 91    operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime
Rule 92    operand_prime -> <empty>
Rule 93    operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
Rule 94    operand_second_prime -> quad_ver_one
Rule 95    push_id -> <empty>
Rule 96    evaluate_operation_int -> <empty>
Rule 97    evaluate_operation_float -> <empty>
Rule 98    evaluate_operation_char -> <empty>
Rule 99    assignment -> ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
Rule 100   assignment_prime -> exp eval_assignment
Rule 101   assignment_second_prime -> <empty>
Rule 102   assignment_second_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime
Rule 103   assignment_third_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
Rule 104   assignment_third_prime -> quad_ver_one
Rule 105   quad_ver_one -> <empty>
Rule 106   quad_ver_two -> <empty>
Rule 107   eval_assignment -> <empty>
Rule 108   save_assignment_id -> <empty>
Rule 109   condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
Rule 110   condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
Rule 111   condition -> IF condition_prime
Rule 112   condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime
Rule 113   condition_second_prime -> statement condition_third_prime
Rule 114   condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime
Rule 115   condition_third_prime -> goto_if_fill ELSEIF condition_prime
Rule 116   condition_third_prime -> ELSE goto_else condition_fourth_prime
Rule 117   condition_third_prime -> goto_if_fill
Rule 118   condition_fourth_prime -> statement goto_if_fill
Rule 119   condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill
Rule 120   save_jump -> <empty>
Rule 121   gotof_quad -> <empty>
Rule 122   goto_else -> <empty>
Rule 123   gotov_quad -> <empty>
Rule 124   goto_if_fill -> <empty>
Rule 125   goto_while_fill -> <empty>
Rule 126   functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
Rule 127   functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime
Rule 128   functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad
Rule 129   verify_function -> <empty>
Rule 130   verify_parameter -> <empty>
Rule 131   verify_param_count -> <empty>
Rule 132   go_sub_quad -> <empty>
Rule 133   push_operator -> <empty>
Rule 134   print -> PRINT LEFTP fake_bottom print_prime
Rule 135   print_prime -> expression print_quad print_second_prime
Rule 136   print_prime -> CSTS print_string_quad print_second_prime
Rule 137   print_second_prime -> SEPARATOR expression print_quad print_second_prime
Rule 138   print_second_prime -> RIGHTP pop_fake_bottom
Rule 139   print_quad -> <empty>
Rule 140   print_string_quad -> <empty>
Rule 141   specialfunction -> JEDO POINT specialfunction_prime
Rule 142   specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad
Rule 143   specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad
Rule 144   specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad
Rule 145   specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad
Rule 146   specialfunction_prime -> ARCH LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad
Rule 147   specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad
Rule 148   specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad
Rule 149   specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad
Rule 150   specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad
Rule 151   specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad
Rule 152   specialfunction_prime -> COLOR LEFTP CSTS RIGHTP special_string_quad
Rule 153   specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad
Rule 154   specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad
Rule 155   specialfunction_prime -> CREATE LEFTP RIGHTP no_argument_quad
Rule 156   specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad
Rule 157   specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad
Rule 158   specialfunction_prime -> FILLSHAPE LEFTP CSTS RIGHTP special_string_quad
Rule 159   specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad
Rule 160   specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad
Rule 161   specialfunction_prime -> <empty>
Rule 162   no_argument_quad -> <empty>
Rule 163   one_argument_quad -> <empty>
Rule 164   two_argument_quad -> <empty>
Rule 165   two_argument_string_quad -> <empty>
Rule 166   special_string_quad -> <empty>
Rule 167   input -> READINPUT LEFTP ID input_quad RIGHTP
Rule 168   input_quad -> <empty>

Terminals, with rules where they appear

AND                  : 57
ARCH                 : 146
BACK                 : 149
CIRCLE               : 142
COLOR                : 152
CREATE               : 155
CSTC                 : 86
CSTF                 : 85
CSTI                 : 84
CSTS                 : 136 145 146 152 158
DIVIDE               : 77
DO                   : 110
DRAWDOT              : 145
ELSE                 : 116
ELSEIF               : 115
EOS                  : 1 7 17 42 50 51 52 54 55
EQUAL                : 64
EQUALS               : 99
FILLSHAPE            : 158
FORWARD              : 148
FUNCTION             : 34 88
GREATER              : 62
GREATEREQUAL         : 66
ID                   : 1 12 34 37 87 99 126 167
IF                   : 111
JEDO                 : 141
LEFTB                : 13 18 91 93 102 103
LEFTBRACE            : 5 39 109 110 114 119
LEFTP                : 34 80 109 110 112 126 134 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 167
LESS                 : 63
LESSEQUAL            : 67
MAIN                 : 5
MINUS                : 72
MULTIPLY             : 76
NOTEQUAL             : 65
NOTYPE               : 36
OR                   : 58
PLUS                 : 71
POINT                : 141
PRGM                 : 1
PRINT                : 134
READINPUT            : 167
RECTANGLE            : 144
RESTART              : 160
RETURN               : 42
RIGHTB               : 13 18 91 93 102 103
RIGHTBRACE           : 7 42 43 109 110 114 119
RIGHTP               : 39 80 109 110 112 128 138 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 167
SEPARATOR            : 15 38 127 137 144 145 146
SQUARE               : 143
STARTFILL            : 157
STARTPEN             : 154
STOPFILL             : 159
STOPPEN              : 156
THICKNESS            : 153
TRIANGLE             : 147
TURNLEFT             : 151
TURNRIGHT            : 150
TYPECHAR             : 30
TYPEFLOAT            : 29
TYPEINT              : 28
WHILE                : 109 110
error                : 

Nonterminals, with rules where they appear

add_module           : 34
add_parameter        : 37
add_program_function : 1
allocate_sequential_memory : 18 19
assignment           : 50
assignment_prime     : 99
assignment_second_prime : 99
assignment_third_prime : 102
body                 : 7 32 41 109 110 114 119
body_prime           : 31
change_dimension     : 13
compoundexp          : 57 58 109 110 112
compoundexp_prime    : 56
condition            : 53
condition_fourth_prime : 116
condition_prime      : 111 115
condition_second_prime : 112
condition_third_prime : 113 114
endproc_quad         : 42 43
eval_assignment      : 100
eval_factor          : 75
eval_logic           : 56
eval_relational      : 61
eval_term            : 70
evaluate_operation_char : 86
evaluate_operation_float : 85
evaluate_operation_int : 84
exp                  : 13 18 42 61 71 72 91 93 100 102 103 126 127 142 143 144 144 145 146 147 148 149 150 151 153
exp_prime            : 70
expression           : 56 62 63 64 65 66 67 80 135 137
expression_prime     : 61
factor               : 75
fake_bottom          : 80 91 93 102 103 126 134
fill_main            : 5
first_dimension      : 13
functioncall         : 52 88
functioncall_prime   : 126 127
go_sub_quad          : 128
goto_else            : 116
goto_if_fill         : 115 117 118 119
goto_while_fill      : 109
gotof_quad           : 109 112
gotov_quad           : 110
input                : 55
input_quad           : 167
main_quad            : 1
modules              : 3
modules_fifth_prime  : 41
modules_fourth_prime : 39 40
modules_prime        : 34
modules_second_prime : 34 38
modules_third_prime  : 37
no_argument_quad     : 154 155 156 157 159 160
one_argument_quad    : 142 143 147 148 149 150 151 153
operand              : 81
operand_prime        : 87
operand_second_prime : 91
pop_fake_bottom      : 80 91 93 102 103 128 138
print                : 51
print_me             : 42 43
print_prime          : 134
print_quad           : 135 137
print_second_prime   : 135 136 137
print_string_quad    : 136
program              : 0
program_prime        : 1 2 3
program_second_prime : 4
program_third_prime  : 5 6
push_id              : 87 99
push_operator        : 57 58 62 63 64 65 66 67 71 72 76 77 99
quad_ver_one         : 94 104
quad_ver_two         : 93 103
return_quad          : 42
save_assignment_id   : 99
save_id              : 12
save_id_array        : 91 102
save_id_operand      : 87
save_jump            : 109 110
second_dimension     : 18
set_internal_dimension_one : 18 19
set_internal_dimension_two : 18
special_string_quad  : 152 158
specialfunction      : 54
specialfunction_prime : 141
statement            : 31 113 118
store_variable       : 15 16
term                 : 70 76 77
term_prime           : 75
two_argument_quad    : 144
two_argument_string_quad : 145 146
type                 : 11 35 37
vars                 : 2 6 40
vars_fifth_prime     : 13
vars_fourth_prime    : 16
vars_prime           : 11 15
vars_second_prime    : 12
vars_third_prime     : 11 15
verify_function      : 126
verify_param_count   : 128
verify_parameter     : 126 127
void_type            : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRGM ID main_quad add_program_function EOS program_prime

    PRGM            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRGM . ID main_quad add_program_function EOS program_prime

    ID              shift and go to state 3


state 3

    (1) program -> PRGM ID . main_quad add_program_function EOS program_prime
    (8) main_quad -> .

    EOS             reduce using rule 8 (main_quad -> .)

    main_quad                      shift and go to state 4

state 4

    (1) program -> PRGM ID main_quad . add_program_function EOS program_prime
    (9) add_program_function -> .

    EOS             reduce using rule 9 (add_program_function -> .)

    add_program_function           shift and go to state 5

state 5

    (1) program -> PRGM ID main_quad add_program_function . EOS program_prime

    EOS             shift and go to state 6


state 6

    (1) program -> PRGM ID main_quad add_program_function EOS . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_third_prime
    (34) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    program_prime                  shift and go to state 7
    vars                           shift and go to state 8
    modules                        shift and go to state 9
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 7

    (1) program -> PRGM ID main_quad add_program_function EOS program_prime .

    $end            reduce using rule 1 (program -> PRGM ID main_quad add_program_function EOS program_prime .)


state 8

    (2) program_prime -> vars . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_third_prime
    (34) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    vars                           shift and go to state 8
    program_prime                  shift and go to state 17
    modules                        shift and go to state 9
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 9

    (3) program_prime -> modules . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_third_prime
    (34) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules                        shift and go to state 9
    program_prime                  shift and go to state 18
    vars                           shift and go to state 8
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 10

    (4) program_prime -> program_second_prime .

    $end            reduce using rule 4 (program_prime -> program_second_prime .)


state 11

    (11) vars -> type . vars_prime vars_third_prime
    (12) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 20

    vars_prime                     shift and go to state 19

state 12

    (34) modules -> FUNCTION . modules_prime ID add_module LEFTP modules_second_prime
    (35) modules_prime -> . type
    (36) modules_prime -> . NOTYPE void_type
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    NOTYPE          shift and go to state 23
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_prime                  shift and go to state 21
    type                           shift and go to state 22

state 13

    (5) program_second_prime -> MAIN . fill_main LEFTBRACE program_third_prime
    (10) fill_main -> .

    LEFTBRACE       reduce using rule 10 (fill_main -> .)

    fill_main                      shift and go to state 24

state 14

    (28) type -> TYPEINT .

    ID              reduce using rule 28 (type -> TYPEINT .)


state 15

    (29) type -> TYPEFLOAT .

    ID              reduce using rule 29 (type -> TYPEFLOAT .)


state 16

    (30) type -> TYPECHAR .

    ID              reduce using rule 30 (type -> TYPECHAR .)


state 17

    (2) program_prime -> vars program_prime .

    $end            reduce using rule 2 (program_prime -> vars program_prime .)


state 18

    (3) program_prime -> modules program_prime .

    $end            reduce using rule 3 (program_prime -> modules program_prime .)


state 19

    (11) vars -> type vars_prime . vars_third_prime
    (15) vars_third_prime -> . SEPARATOR store_variable vars_prime vars_third_prime
    (16) vars_third_prime -> . store_variable vars_fourth_prime
    (22) store_variable -> .

    SEPARATOR       shift and go to state 26
    EOS             reduce using rule 22 (store_variable -> .)

    vars_third_prime               shift and go to state 25
    store_variable                 shift and go to state 27

state 20

    (12) vars_prime -> ID . save_id vars_second_prime
    (20) save_id -> .

    LEFTB           reduce using rule 20 (save_id -> .)
    SEPARATOR       reduce using rule 20 (save_id -> .)
    EOS             reduce using rule 20 (save_id -> .)

    save_id                        shift and go to state 28

state 21

    (34) modules -> FUNCTION modules_prime . ID add_module LEFTP modules_second_prime

    ID              shift and go to state 29


state 22

    (35) modules_prime -> type .

    ID              reduce using rule 35 (modules_prime -> type .)


state 23

    (36) modules_prime -> NOTYPE . void_type
    (45) void_type -> .

    ID              reduce using rule 45 (void_type -> .)

    void_type                      shift and go to state 30

state 24

    (5) program_second_prime -> MAIN fill_main . LEFTBRACE program_third_prime

    LEFTBRACE       shift and go to state 31


state 25

    (11) vars -> type vars_prime vars_third_prime .

    FUNCTION        reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    MAIN            reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    TYPEINT         reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    TYPEFLOAT       reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    TYPECHAR        reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    ID              reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    PRINT           reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    WHILE           reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    DO              reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    IF              reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    JEDO            reduce using rule 11 (vars -> type vars_prime vars_third_prime .)
    READINPUT       reduce using rule 11 (vars -> type vars_prime vars_third_prime .)


state 26

    (15) vars_third_prime -> SEPARATOR . store_variable vars_prime vars_third_prime
    (22) store_variable -> .

    ID              reduce using rule 22 (store_variable -> .)

    store_variable                 shift and go to state 32

state 27

    (16) vars_third_prime -> store_variable . vars_fourth_prime
    (17) vars_fourth_prime -> . EOS

    EOS             shift and go to state 34

    vars_fourth_prime              shift and go to state 33

state 28

    (12) vars_prime -> ID save_id . vars_second_prime
    (13) vars_second_prime -> . change_dimension LEFTB exp RIGHTB first_dimension vars_fifth_prime
    (14) vars_second_prime -> .
    (21) change_dimension -> .

    SEPARATOR       reduce using rule 14 (vars_second_prime -> .)
    EOS             reduce using rule 14 (vars_second_prime -> .)
    LEFTB           reduce using rule 21 (change_dimension -> .)

    vars_second_prime              shift and go to state 35
    change_dimension               shift and go to state 36

state 29

    (34) modules -> FUNCTION modules_prime ID . add_module LEFTP modules_second_prime
    (46) add_module -> .

    LEFTP           reduce using rule 46 (add_module -> .)

    add_module                     shift and go to state 37

state 30

    (36) modules_prime -> NOTYPE void_type .

    ID              reduce using rule 36 (modules_prime -> NOTYPE void_type .)


state 31

    (5) program_second_prime -> MAIN fill_main LEFTBRACE . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body RIGHTBRACE EOS
    (11) vars -> . type vars_prime vars_third_prime
    (31) body -> . statement body_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    program_third_prime            shift and go to state 38
    vars                           shift and go to state 39
    body                           shift and go to state 40
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 32

    (15) vars_third_prime -> SEPARATOR store_variable . vars_prime vars_third_prime
    (12) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 20

    vars_prime                     shift and go to state 55

state 33

    (16) vars_third_prime -> store_variable vars_fourth_prime .

    FUNCTION        reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    MAIN            reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    TYPEINT         reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    TYPEFLOAT       reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    TYPECHAR        reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    ID              reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    PRINT           reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    WHILE           reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    DO              reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    IF              reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    JEDO            reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)
    READINPUT       reduce using rule 16 (vars_third_prime -> store_variable vars_fourth_prime .)


state 34

    (17) vars_fourth_prime -> EOS .

    FUNCTION        reduce using rule 17 (vars_fourth_prime -> EOS .)
    MAIN            reduce using rule 17 (vars_fourth_prime -> EOS .)
    TYPEINT         reduce using rule 17 (vars_fourth_prime -> EOS .)
    TYPEFLOAT       reduce using rule 17 (vars_fourth_prime -> EOS .)
    TYPECHAR        reduce using rule 17 (vars_fourth_prime -> EOS .)
    ID              reduce using rule 17 (vars_fourth_prime -> EOS .)
    PRINT           reduce using rule 17 (vars_fourth_prime -> EOS .)
    WHILE           reduce using rule 17 (vars_fourth_prime -> EOS .)
    DO              reduce using rule 17 (vars_fourth_prime -> EOS .)
    IF              reduce using rule 17 (vars_fourth_prime -> EOS .)
    JEDO            reduce using rule 17 (vars_fourth_prime -> EOS .)
    READINPUT       reduce using rule 17 (vars_fourth_prime -> EOS .)


state 35

    (12) vars_prime -> ID save_id vars_second_prime .

    SEPARATOR       reduce using rule 12 (vars_prime -> ID save_id vars_second_prime .)
    EOS             reduce using rule 12 (vars_prime -> ID save_id vars_second_prime .)


state 36

    (13) vars_second_prime -> change_dimension . LEFTB exp RIGHTB first_dimension vars_fifth_prime

    LEFTB           shift and go to state 56


state 37

    (34) modules -> FUNCTION modules_prime ID add_module . LEFTP modules_second_prime

    LEFTP           shift and go to state 57


state 38

    (5) program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime .

    $end            reduce using rule 5 (program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime .)


state 39

    (6) program_third_prime -> vars . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body RIGHTBRACE EOS
    (11) vars -> . type vars_prime vars_third_prime
    (31) body -> . statement body_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    vars                           shift and go to state 39
    program_third_prime            shift and go to state 58
    body                           shift and go to state 40
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 40

    (7) program_third_prime -> body . RIGHTBRACE EOS

    RIGHTBRACE      shift and go to state 59


state 41

    (31) body -> statement . body_prime
    (32) body_prime -> . body
    (33) body_prime -> .
    (31) body -> . statement body_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    RIGHTBRACE      reduce using rule 33 (body_prime -> .)
    RETURN          reduce using rule 33 (body_prime -> .)
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    statement                      shift and go to state 41
    body_prime                     shift and go to state 60
    body                           shift and go to state 61
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 42

    (50) statement -> assignment . EOS

    EOS             shift and go to state 62


state 43

    (51) statement -> print . EOS

    EOS             shift and go to state 63


state 44

    (52) statement -> functioncall . EOS

    EOS             shift and go to state 64


state 45

    (53) statement -> condition .

    ID              reduce using rule 53 (statement -> condition .)
    PRINT           reduce using rule 53 (statement -> condition .)
    WHILE           reduce using rule 53 (statement -> condition .)
    DO              reduce using rule 53 (statement -> condition .)
    IF              reduce using rule 53 (statement -> condition .)
    JEDO            reduce using rule 53 (statement -> condition .)
    READINPUT       reduce using rule 53 (statement -> condition .)
    RIGHTBRACE      reduce using rule 53 (statement -> condition .)
    RETURN          reduce using rule 53 (statement -> condition .)
    ELSE            reduce using rule 53 (statement -> condition .)
    ELSEIF          reduce using rule 53 (statement -> condition .)


state 46

    (54) statement -> specialfunction . EOS

    EOS             shift and go to state 65


state 47

    (55) statement -> input . EOS

    EOS             shift and go to state 66


state 48

    (99) assignment -> ID . push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (126) functioncall -> ID . verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (95) push_id -> .
    (129) verify_function -> .

    EQUALS          reduce using rule 95 (push_id -> .)
    LEFTB           reduce using rule 95 (push_id -> .)
    LEFTP           reduce using rule 129 (verify_function -> .)

    push_id                        shift and go to state 67
    verify_function                shift and go to state 68

state 49

    (134) print -> PRINT . LEFTP fake_bottom print_prime

    LEFTP           shift and go to state 69


state 50

    (109) condition -> WHILE . save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (120) save_jump -> .

    LEFTP           reduce using rule 120 (save_jump -> .)

    save_jump                      shift and go to state 70

state 51

    (110) condition -> DO . save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (120) save_jump -> .

    LEFTBRACE       reduce using rule 120 (save_jump -> .)

    save_jump                      shift and go to state 71

state 52

    (111) condition -> IF . condition_prime
    (112) condition_prime -> . LEFTP compoundexp RIGHTP gotof_quad condition_second_prime

    LEFTP           shift and go to state 73

    condition_prime                shift and go to state 72

state 53

    (141) specialfunction -> JEDO . POINT specialfunction_prime

    POINT           shift and go to state 74


state 54

    (167) input -> READINPUT . LEFTP ID input_quad RIGHTP

    LEFTP           shift and go to state 75


state 55

    (15) vars_third_prime -> SEPARATOR store_variable vars_prime . vars_third_prime
    (15) vars_third_prime -> . SEPARATOR store_variable vars_prime vars_third_prime
    (16) vars_third_prime -> . store_variable vars_fourth_prime
    (22) store_variable -> .

    SEPARATOR       shift and go to state 26
    EOS             reduce using rule 22 (store_variable -> .)

    store_variable                 shift and go to state 27
    vars_third_prime               shift and go to state 76

state 56

    (13) vars_second_prime -> change_dimension LEFTB . exp RIGHTB first_dimension vars_fifth_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 57

    (34) modules -> FUNCTION modules_prime ID add_module LEFTP . modules_second_prime
    (37) modules_second_prime -> . type ID add_parameter modules_third_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_second_prime           shift and go to state 87
    type                           shift and go to state 88

state 58

    (6) program_third_prime -> vars program_third_prime .

    $end            reduce using rule 6 (program_third_prime -> vars program_third_prime .)


state 59

    (7) program_third_prime -> body RIGHTBRACE . EOS

    EOS             shift and go to state 89


state 60

    (31) body -> statement body_prime .

    RIGHTBRACE      reduce using rule 31 (body -> statement body_prime .)
    RETURN          reduce using rule 31 (body -> statement body_prime .)


state 61

    (32) body_prime -> body .

    RIGHTBRACE      reduce using rule 32 (body_prime -> body .)
    RETURN          reduce using rule 32 (body_prime -> body .)


state 62

    (50) statement -> assignment EOS .

    ID              reduce using rule 50 (statement -> assignment EOS .)
    PRINT           reduce using rule 50 (statement -> assignment EOS .)
    WHILE           reduce using rule 50 (statement -> assignment EOS .)
    DO              reduce using rule 50 (statement -> assignment EOS .)
    IF              reduce using rule 50 (statement -> assignment EOS .)
    JEDO            reduce using rule 50 (statement -> assignment EOS .)
    READINPUT       reduce using rule 50 (statement -> assignment EOS .)
    RIGHTBRACE      reduce using rule 50 (statement -> assignment EOS .)
    RETURN          reduce using rule 50 (statement -> assignment EOS .)
    ELSE            reduce using rule 50 (statement -> assignment EOS .)
    ELSEIF          reduce using rule 50 (statement -> assignment EOS .)


state 63

    (51) statement -> print EOS .

    ID              reduce using rule 51 (statement -> print EOS .)
    PRINT           reduce using rule 51 (statement -> print EOS .)
    WHILE           reduce using rule 51 (statement -> print EOS .)
    DO              reduce using rule 51 (statement -> print EOS .)
    IF              reduce using rule 51 (statement -> print EOS .)
    JEDO            reduce using rule 51 (statement -> print EOS .)
    READINPUT       reduce using rule 51 (statement -> print EOS .)
    RIGHTBRACE      reduce using rule 51 (statement -> print EOS .)
    RETURN          reduce using rule 51 (statement -> print EOS .)
    ELSE            reduce using rule 51 (statement -> print EOS .)
    ELSEIF          reduce using rule 51 (statement -> print EOS .)


state 64

    (52) statement -> functioncall EOS .

    ID              reduce using rule 52 (statement -> functioncall EOS .)
    PRINT           reduce using rule 52 (statement -> functioncall EOS .)
    WHILE           reduce using rule 52 (statement -> functioncall EOS .)
    DO              reduce using rule 52 (statement -> functioncall EOS .)
    IF              reduce using rule 52 (statement -> functioncall EOS .)
    JEDO            reduce using rule 52 (statement -> functioncall EOS .)
    READINPUT       reduce using rule 52 (statement -> functioncall EOS .)
    RIGHTBRACE      reduce using rule 52 (statement -> functioncall EOS .)
    RETURN          reduce using rule 52 (statement -> functioncall EOS .)
    ELSE            reduce using rule 52 (statement -> functioncall EOS .)
    ELSEIF          reduce using rule 52 (statement -> functioncall EOS .)


state 65

    (54) statement -> specialfunction EOS .

    ID              reduce using rule 54 (statement -> specialfunction EOS .)
    PRINT           reduce using rule 54 (statement -> specialfunction EOS .)
    WHILE           reduce using rule 54 (statement -> specialfunction EOS .)
    DO              reduce using rule 54 (statement -> specialfunction EOS .)
    IF              reduce using rule 54 (statement -> specialfunction EOS .)
    JEDO            reduce using rule 54 (statement -> specialfunction EOS .)
    READINPUT       reduce using rule 54 (statement -> specialfunction EOS .)
    RIGHTBRACE      reduce using rule 54 (statement -> specialfunction EOS .)
    RETURN          reduce using rule 54 (statement -> specialfunction EOS .)
    ELSE            reduce using rule 54 (statement -> specialfunction EOS .)
    ELSEIF          reduce using rule 54 (statement -> specialfunction EOS .)


state 66

    (55) statement -> input EOS .

    ID              reduce using rule 55 (statement -> input EOS .)
    PRINT           reduce using rule 55 (statement -> input EOS .)
    WHILE           reduce using rule 55 (statement -> input EOS .)
    DO              reduce using rule 55 (statement -> input EOS .)
    IF              reduce using rule 55 (statement -> input EOS .)
    JEDO            reduce using rule 55 (statement -> input EOS .)
    READINPUT       reduce using rule 55 (statement -> input EOS .)
    RIGHTBRACE      reduce using rule 55 (statement -> input EOS .)
    RETURN          reduce using rule 55 (statement -> input EOS .)
    ELSE            reduce using rule 55 (statement -> input EOS .)
    ELSEIF          reduce using rule 55 (statement -> input EOS .)


state 67

    (99) assignment -> ID push_id . save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (108) save_assignment_id -> .

    EQUALS          reduce using rule 108 (save_assignment_id -> .)
    LEFTB           reduce using rule 108 (save_assignment_id -> .)

    save_assignment_id             shift and go to state 90

state 68

    (126) functioncall -> ID verify_function . LEFTP fake_bottom exp verify_parameter functioncall_prime

    LEFTP           shift and go to state 91


state 69

    (134) print -> PRINT LEFTP . fake_bottom print_prime
    (82) fake_bottom -> .

    CSTS            reduce using rule 82 (fake_bottom -> .)
    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 92

state 70

    (109) condition -> WHILE save_jump . LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill

    LEFTP           shift and go to state 93


state 71

    (110) condition -> DO save_jump . LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad

    LEFTBRACE       shift and go to state 94


state 72

    (111) condition -> IF condition_prime .

    ID              reduce using rule 111 (condition -> IF condition_prime .)
    PRINT           reduce using rule 111 (condition -> IF condition_prime .)
    WHILE           reduce using rule 111 (condition -> IF condition_prime .)
    DO              reduce using rule 111 (condition -> IF condition_prime .)
    IF              reduce using rule 111 (condition -> IF condition_prime .)
    JEDO            reduce using rule 111 (condition -> IF condition_prime .)
    READINPUT       reduce using rule 111 (condition -> IF condition_prime .)
    RIGHTBRACE      reduce using rule 111 (condition -> IF condition_prime .)
    RETURN          reduce using rule 111 (condition -> IF condition_prime .)
    ELSE            reduce using rule 111 (condition -> IF condition_prime .)
    ELSEIF          reduce using rule 111 (condition -> IF condition_prime .)


state 73

    (112) condition_prime -> LEFTP . compoundexp RIGHTP gotof_quad condition_second_prime
    (56) compoundexp -> . expression eval_logic compoundexp_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    compoundexp                    shift and go to state 95
    expression                     shift and go to state 96
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 74

    (141) specialfunction -> JEDO POINT . specialfunction_prime
    (142) specialfunction_prime -> . CIRCLE LEFTP exp RIGHTP one_argument_quad
    (143) specialfunction_prime -> . SQUARE LEFTP exp RIGHTP one_argument_quad
    (144) specialfunction_prime -> . RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad
    (145) specialfunction_prime -> . DRAWDOT LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad
    (146) specialfunction_prime -> . ARCH LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad
    (147) specialfunction_prime -> . TRIANGLE LEFTP exp RIGHTP one_argument_quad
    (148) specialfunction_prime -> . FORWARD LEFTP exp RIGHTP one_argument_quad
    (149) specialfunction_prime -> . BACK LEFTP exp RIGHTP one_argument_quad
    (150) specialfunction_prime -> . TURNRIGHT LEFTP exp RIGHTP one_argument_quad
    (151) specialfunction_prime -> . TURNLEFT LEFTP exp RIGHTP one_argument_quad
    (152) specialfunction_prime -> . COLOR LEFTP CSTS RIGHTP special_string_quad
    (153) specialfunction_prime -> . THICKNESS LEFTP exp RIGHTP one_argument_quad
    (154) specialfunction_prime -> . STARTPEN LEFTP RIGHTP no_argument_quad
    (155) specialfunction_prime -> . CREATE LEFTP RIGHTP no_argument_quad
    (156) specialfunction_prime -> . STOPPEN LEFTP RIGHTP no_argument_quad
    (157) specialfunction_prime -> . STARTFILL LEFTP RIGHTP no_argument_quad
    (158) specialfunction_prime -> . FILLSHAPE LEFTP CSTS RIGHTP special_string_quad
    (159) specialfunction_prime -> . STOPFILL LEFTP RIGHTP no_argument_quad
    (160) specialfunction_prime -> . RESTART LEFTP RIGHTP no_argument_quad
    (161) specialfunction_prime -> .

    CIRCLE          shift and go to state 99
    SQUARE          shift and go to state 100
    RECTANGLE       shift and go to state 101
    DRAWDOT         shift and go to state 102
    ARCH            shift and go to state 103
    TRIANGLE        shift and go to state 104
    FORWARD         shift and go to state 105
    BACK            shift and go to state 106
    TURNRIGHT       shift and go to state 107
    TURNLEFT        shift and go to state 108
    COLOR           shift and go to state 109
    THICKNESS       shift and go to state 110
    STARTPEN        shift and go to state 111
    CREATE          shift and go to state 112
    STOPPEN         shift and go to state 113
    STARTFILL       shift and go to state 114
    FILLSHAPE       shift and go to state 115
    STOPFILL        shift and go to state 116
    RESTART         shift and go to state 117
    EOS             reduce using rule 161 (specialfunction_prime -> .)

    specialfunction_prime          shift and go to state 98

state 75

    (167) input -> READINPUT LEFTP . ID input_quad RIGHTP

    ID              shift and go to state 118


state 76

    (15) vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .

    FUNCTION        reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    MAIN            reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    TYPEINT         reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    TYPEFLOAT       reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    TYPECHAR        reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    ID              reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    PRINT           reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    WHILE           reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    DO              reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    IF              reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    JEDO            reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)
    READINPUT       reduce using rule 15 (vars_third_prime -> SEPARATOR store_variable vars_prime vars_third_prime .)


state 77

    (13) vars_second_prime -> change_dimension LEFTB exp . RIGHTB first_dimension vars_fifth_prime

    RIGHTB          shift and go to state 119


state 78

    (70) exp -> term . eval_term exp_prime
    (74) eval_term -> .

    PLUS            reduce using rule 74 (eval_term -> .)
    MINUS           reduce using rule 74 (eval_term -> .)
    RIGHTB          reduce using rule 74 (eval_term -> .)
    GREATER         reduce using rule 74 (eval_term -> .)
    LESS            reduce using rule 74 (eval_term -> .)
    EQUAL           reduce using rule 74 (eval_term -> .)
    NOTEQUAL        reduce using rule 74 (eval_term -> .)
    GREATEREQUAL    reduce using rule 74 (eval_term -> .)
    LESSEQUAL       reduce using rule 74 (eval_term -> .)
    AND             reduce using rule 74 (eval_term -> .)
    OR              reduce using rule 74 (eval_term -> .)
    RIGHTP          reduce using rule 74 (eval_term -> .)
    SEPARATOR       reduce using rule 74 (eval_term -> .)
    EOS             reduce using rule 74 (eval_term -> .)

    eval_term                      shift and go to state 120

state 79

    (75) term -> factor . eval_factor term_prime
    (79) eval_factor -> .

    MULTIPLY        reduce using rule 79 (eval_factor -> .)
    DIVIDE          reduce using rule 79 (eval_factor -> .)
    PLUS            reduce using rule 79 (eval_factor -> .)
    MINUS           reduce using rule 79 (eval_factor -> .)
    RIGHTB          reduce using rule 79 (eval_factor -> .)
    GREATER         reduce using rule 79 (eval_factor -> .)
    LESS            reduce using rule 79 (eval_factor -> .)
    EQUAL           reduce using rule 79 (eval_factor -> .)
    NOTEQUAL        reduce using rule 79 (eval_factor -> .)
    GREATEREQUAL    reduce using rule 79 (eval_factor -> .)
    LESSEQUAL       reduce using rule 79 (eval_factor -> .)
    AND             reduce using rule 79 (eval_factor -> .)
    OR              reduce using rule 79 (eval_factor -> .)
    RIGHTP          reduce using rule 79 (eval_factor -> .)
    SEPARATOR       reduce using rule 79 (eval_factor -> .)
    EOS             reduce using rule 79 (eval_factor -> .)

    eval_factor                    shift and go to state 121

state 80

    (80) factor -> LEFTP . fake_bottom expression RIGHTP pop_fake_bottom
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 122

state 81

    (81) factor -> operand .

    MULTIPLY        reduce using rule 81 (factor -> operand .)
    DIVIDE          reduce using rule 81 (factor -> operand .)
    PLUS            reduce using rule 81 (factor -> operand .)
    MINUS           reduce using rule 81 (factor -> operand .)
    RIGHTB          reduce using rule 81 (factor -> operand .)
    GREATER         reduce using rule 81 (factor -> operand .)
    LESS            reduce using rule 81 (factor -> operand .)
    EQUAL           reduce using rule 81 (factor -> operand .)
    NOTEQUAL        reduce using rule 81 (factor -> operand .)
    GREATEREQUAL    reduce using rule 81 (factor -> operand .)
    LESSEQUAL       reduce using rule 81 (factor -> operand .)
    AND             reduce using rule 81 (factor -> operand .)
    OR              reduce using rule 81 (factor -> operand .)
    RIGHTP          reduce using rule 81 (factor -> operand .)
    SEPARATOR       reduce using rule 81 (factor -> operand .)
    EOS             reduce using rule 81 (factor -> operand .)


state 82

    (84) operand -> CSTI . evaluate_operation_int
    (96) evaluate_operation_int -> .

    MULTIPLY        reduce using rule 96 (evaluate_operation_int -> .)
    DIVIDE          reduce using rule 96 (evaluate_operation_int -> .)
    PLUS            reduce using rule 96 (evaluate_operation_int -> .)
    MINUS           reduce using rule 96 (evaluate_operation_int -> .)
    RIGHTB          reduce using rule 96 (evaluate_operation_int -> .)
    GREATER         reduce using rule 96 (evaluate_operation_int -> .)
    LESS            reduce using rule 96 (evaluate_operation_int -> .)
    EQUAL           reduce using rule 96 (evaluate_operation_int -> .)
    NOTEQUAL        reduce using rule 96 (evaluate_operation_int -> .)
    GREATEREQUAL    reduce using rule 96 (evaluate_operation_int -> .)
    LESSEQUAL       reduce using rule 96 (evaluate_operation_int -> .)
    AND             reduce using rule 96 (evaluate_operation_int -> .)
    OR              reduce using rule 96 (evaluate_operation_int -> .)
    RIGHTP          reduce using rule 96 (evaluate_operation_int -> .)
    SEPARATOR       reduce using rule 96 (evaluate_operation_int -> .)
    EOS             reduce using rule 96 (evaluate_operation_int -> .)

    evaluate_operation_int         shift and go to state 123

state 83

    (85) operand -> CSTF . evaluate_operation_float
    (97) evaluate_operation_float -> .

    MULTIPLY        reduce using rule 97 (evaluate_operation_float -> .)
    DIVIDE          reduce using rule 97 (evaluate_operation_float -> .)
    PLUS            reduce using rule 97 (evaluate_operation_float -> .)
    MINUS           reduce using rule 97 (evaluate_operation_float -> .)
    RIGHTB          reduce using rule 97 (evaluate_operation_float -> .)
    GREATER         reduce using rule 97 (evaluate_operation_float -> .)
    LESS            reduce using rule 97 (evaluate_operation_float -> .)
    EQUAL           reduce using rule 97 (evaluate_operation_float -> .)
    NOTEQUAL        reduce using rule 97 (evaluate_operation_float -> .)
    GREATEREQUAL    reduce using rule 97 (evaluate_operation_float -> .)
    LESSEQUAL       reduce using rule 97 (evaluate_operation_float -> .)
    AND             reduce using rule 97 (evaluate_operation_float -> .)
    OR              reduce using rule 97 (evaluate_operation_float -> .)
    RIGHTP          reduce using rule 97 (evaluate_operation_float -> .)
    SEPARATOR       reduce using rule 97 (evaluate_operation_float -> .)
    EOS             reduce using rule 97 (evaluate_operation_float -> .)

    evaluate_operation_float       shift and go to state 124

state 84

    (86) operand -> CSTC . evaluate_operation_char
    (98) evaluate_operation_char -> .

    MULTIPLY        reduce using rule 98 (evaluate_operation_char -> .)
    DIVIDE          reduce using rule 98 (evaluate_operation_char -> .)
    PLUS            reduce using rule 98 (evaluate_operation_char -> .)
    MINUS           reduce using rule 98 (evaluate_operation_char -> .)
    RIGHTB          reduce using rule 98 (evaluate_operation_char -> .)
    GREATER         reduce using rule 98 (evaluate_operation_char -> .)
    LESS            reduce using rule 98 (evaluate_operation_char -> .)
    EQUAL           reduce using rule 98 (evaluate_operation_char -> .)
    NOTEQUAL        reduce using rule 98 (evaluate_operation_char -> .)
    GREATEREQUAL    reduce using rule 98 (evaluate_operation_char -> .)
    LESSEQUAL       reduce using rule 98 (evaluate_operation_char -> .)
    AND             reduce using rule 98 (evaluate_operation_char -> .)
    OR              reduce using rule 98 (evaluate_operation_char -> .)
    RIGHTP          reduce using rule 98 (evaluate_operation_char -> .)
    SEPARATOR       reduce using rule 98 (evaluate_operation_char -> .)
    EOS             reduce using rule 98 (evaluate_operation_char -> .)

    evaluate_operation_char        shift and go to state 125

state 85

    (87) operand -> ID . push_id save_id_operand operand_prime
    (95) push_id -> .

    LEFTB           reduce using rule 95 (push_id -> .)
    MULTIPLY        reduce using rule 95 (push_id -> .)
    DIVIDE          reduce using rule 95 (push_id -> .)
    PLUS            reduce using rule 95 (push_id -> .)
    MINUS           reduce using rule 95 (push_id -> .)
    RIGHTB          reduce using rule 95 (push_id -> .)
    GREATER         reduce using rule 95 (push_id -> .)
    LESS            reduce using rule 95 (push_id -> .)
    EQUAL           reduce using rule 95 (push_id -> .)
    NOTEQUAL        reduce using rule 95 (push_id -> .)
    GREATEREQUAL    reduce using rule 95 (push_id -> .)
    LESSEQUAL       reduce using rule 95 (push_id -> .)
    AND             reduce using rule 95 (push_id -> .)
    OR              reduce using rule 95 (push_id -> .)
    RIGHTP          reduce using rule 95 (push_id -> .)
    SEPARATOR       reduce using rule 95 (push_id -> .)
    EOS             reduce using rule 95 (push_id -> .)

    push_id                        shift and go to state 126

state 86

    (88) operand -> FUNCTION . functioncall
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime

    ID              shift and go to state 128

    functioncall                   shift and go to state 127

state 87

    (34) modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .

    FUNCTION        reduce using rule 34 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    MAIN            reduce using rule 34 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPEINT         reduce using rule 34 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPEFLOAT       reduce using rule 34 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPECHAR        reduce using rule 34 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)


state 88

    (37) modules_second_prime -> type . ID add_parameter modules_third_prime

    ID              shift and go to state 129


state 89

    (7) program_third_prime -> body RIGHTBRACE EOS .

    $end            reduce using rule 7 (program_third_prime -> body RIGHTBRACE EOS .)


state 90

    (99) assignment -> ID push_id save_assignment_id . assignment_second_prime EQUALS push_operator assignment_prime
    (101) assignment_second_prime -> .
    (102) assignment_second_prime -> . save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime
    (90) save_id_array -> .

    EQUALS          reduce using rule 101 (assignment_second_prime -> .)
    LEFTB           reduce using rule 90 (save_id_array -> .)

    assignment_second_prime        shift and go to state 130
    save_id_array                  shift and go to state 131

state 91

    (126) functioncall -> ID verify_function LEFTP . fake_bottom exp verify_parameter functioncall_prime
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 132

state 92

    (134) print -> PRINT LEFTP fake_bottom . print_prime
    (135) print_prime -> . expression print_quad print_second_prime
    (136) print_prime -> . CSTS print_string_quad print_second_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    CSTS            shift and go to state 135
    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    print_prime                    shift and go to state 133
    expression                     shift and go to state 134
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 93

    (109) condition -> WHILE save_jump LEFTP . compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (56) compoundexp -> . expression eval_logic compoundexp_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    compoundexp                    shift and go to state 136
    expression                     shift and go to state 96
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 94

    (110) condition -> DO save_jump LEFTBRACE . body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (31) body -> . statement body_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 137
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 95

    (112) condition_prime -> LEFTP compoundexp . RIGHTP gotof_quad condition_second_prime

    RIGHTP          shift and go to state 138


state 96

    (56) compoundexp -> expression . eval_logic compoundexp_prime
    (60) eval_logic -> .

    AND             reduce using rule 60 (eval_logic -> .)
    OR              reduce using rule 60 (eval_logic -> .)
    RIGHTP          reduce using rule 60 (eval_logic -> .)

    eval_logic                     shift and go to state 139

state 97

    (61) expression -> exp . eval_relational expression_prime
    (69) eval_relational -> .

    GREATER         reduce using rule 69 (eval_relational -> .)
    LESS            reduce using rule 69 (eval_relational -> .)
    EQUAL           reduce using rule 69 (eval_relational -> .)
    NOTEQUAL        reduce using rule 69 (eval_relational -> .)
    GREATEREQUAL    reduce using rule 69 (eval_relational -> .)
    LESSEQUAL       reduce using rule 69 (eval_relational -> .)
    AND             reduce using rule 69 (eval_relational -> .)
    OR              reduce using rule 69 (eval_relational -> .)
    RIGHTP          reduce using rule 69 (eval_relational -> .)
    SEPARATOR       reduce using rule 69 (eval_relational -> .)

    eval_relational                shift and go to state 140

state 98

    (141) specialfunction -> JEDO POINT specialfunction_prime .

    EOS             reduce using rule 141 (specialfunction -> JEDO POINT specialfunction_prime .)


state 99

    (142) specialfunction_prime -> CIRCLE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 141


state 100

    (143) specialfunction_prime -> SQUARE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 142


state 101

    (144) specialfunction_prime -> RECTANGLE . LEFTP exp SEPARATOR exp RIGHTP two_argument_quad

    LEFTP           shift and go to state 143


state 102

    (145) specialfunction_prime -> DRAWDOT . LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad

    LEFTP           shift and go to state 144


state 103

    (146) specialfunction_prime -> ARCH . LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad

    LEFTP           shift and go to state 145


state 104

    (147) specialfunction_prime -> TRIANGLE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 146


state 105

    (148) specialfunction_prime -> FORWARD . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 147


state 106

    (149) specialfunction_prime -> BACK . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 148


state 107

    (150) specialfunction_prime -> TURNRIGHT . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 149


state 108

    (151) specialfunction_prime -> TURNLEFT . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 150


state 109

    (152) specialfunction_prime -> COLOR . LEFTP CSTS RIGHTP special_string_quad

    LEFTP           shift and go to state 151


state 110

    (153) specialfunction_prime -> THICKNESS . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 152


state 111

    (154) specialfunction_prime -> STARTPEN . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 153


state 112

    (155) specialfunction_prime -> CREATE . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 154


state 113

    (156) specialfunction_prime -> STOPPEN . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 155


state 114

    (157) specialfunction_prime -> STARTFILL . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 156


state 115

    (158) specialfunction_prime -> FILLSHAPE . LEFTP CSTS RIGHTP special_string_quad

    LEFTP           shift and go to state 157


state 116

    (159) specialfunction_prime -> STOPFILL . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 158


state 117

    (160) specialfunction_prime -> RESTART . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 159


state 118

    (167) input -> READINPUT LEFTP ID . input_quad RIGHTP
    (168) input_quad -> .

    RIGHTP          reduce using rule 168 (input_quad -> .)

    input_quad                     shift and go to state 160

state 119

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB . first_dimension vars_fifth_prime
    (23) first_dimension -> .

    LEFTB           reduce using rule 23 (first_dimension -> .)
    SEPARATOR       reduce using rule 23 (first_dimension -> .)
    EOS             reduce using rule 23 (first_dimension -> .)

    first_dimension                shift and go to state 161

state 120

    (70) exp -> term eval_term . exp_prime
    (71) exp_prime -> . PLUS push_operator exp
    (72) exp_prime -> . MINUS push_operator exp
    (73) exp_prime -> .

    PLUS            shift and go to state 163
    MINUS           shift and go to state 164
    RIGHTB          reduce using rule 73 (exp_prime -> .)
    GREATER         reduce using rule 73 (exp_prime -> .)
    LESS            reduce using rule 73 (exp_prime -> .)
    EQUAL           reduce using rule 73 (exp_prime -> .)
    NOTEQUAL        reduce using rule 73 (exp_prime -> .)
    GREATEREQUAL    reduce using rule 73 (exp_prime -> .)
    LESSEQUAL       reduce using rule 73 (exp_prime -> .)
    AND             reduce using rule 73 (exp_prime -> .)
    OR              reduce using rule 73 (exp_prime -> .)
    RIGHTP          reduce using rule 73 (exp_prime -> .)
    SEPARATOR       reduce using rule 73 (exp_prime -> .)
    EOS             reduce using rule 73 (exp_prime -> .)

    exp_prime                      shift and go to state 162

state 121

    (75) term -> factor eval_factor . term_prime
    (76) term_prime -> . MULTIPLY push_operator term
    (77) term_prime -> . DIVIDE push_operator term
    (78) term_prime -> .

    MULTIPLY        shift and go to state 166
    DIVIDE          shift and go to state 167
    PLUS            reduce using rule 78 (term_prime -> .)
    MINUS           reduce using rule 78 (term_prime -> .)
    RIGHTB          reduce using rule 78 (term_prime -> .)
    GREATER         reduce using rule 78 (term_prime -> .)
    LESS            reduce using rule 78 (term_prime -> .)
    EQUAL           reduce using rule 78 (term_prime -> .)
    NOTEQUAL        reduce using rule 78 (term_prime -> .)
    GREATEREQUAL    reduce using rule 78 (term_prime -> .)
    LESSEQUAL       reduce using rule 78 (term_prime -> .)
    AND             reduce using rule 78 (term_prime -> .)
    OR              reduce using rule 78 (term_prime -> .)
    RIGHTP          reduce using rule 78 (term_prime -> .)
    SEPARATOR       reduce using rule 78 (term_prime -> .)
    EOS             reduce using rule 78 (term_prime -> .)

    term_prime                     shift and go to state 165

state 122

    (80) factor -> LEFTP fake_bottom . expression RIGHTP pop_fake_bottom
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 168
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 123

    (84) operand -> CSTI evaluate_operation_int .

    MULTIPLY        reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    DIVIDE          reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    PLUS            reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    MINUS           reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    RIGHTB          reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    GREATER         reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    LESS            reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    EQUAL           reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    NOTEQUAL        reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    GREATEREQUAL    reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    LESSEQUAL       reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    AND             reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    OR              reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    RIGHTP          reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    SEPARATOR       reduce using rule 84 (operand -> CSTI evaluate_operation_int .)
    EOS             reduce using rule 84 (operand -> CSTI evaluate_operation_int .)


state 124

    (85) operand -> CSTF evaluate_operation_float .

    MULTIPLY        reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    DIVIDE          reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    PLUS            reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    MINUS           reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    RIGHTB          reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    GREATER         reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    LESS            reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    EQUAL           reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    NOTEQUAL        reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    GREATEREQUAL    reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    LESSEQUAL       reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    AND             reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    OR              reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    RIGHTP          reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    SEPARATOR       reduce using rule 85 (operand -> CSTF evaluate_operation_float .)
    EOS             reduce using rule 85 (operand -> CSTF evaluate_operation_float .)


state 125

    (86) operand -> CSTC evaluate_operation_char .

    MULTIPLY        reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    DIVIDE          reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    PLUS            reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    MINUS           reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    RIGHTB          reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    GREATER         reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    LESS            reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    EQUAL           reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    NOTEQUAL        reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    GREATEREQUAL    reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    LESSEQUAL       reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    AND             reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    OR              reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    RIGHTP          reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    SEPARATOR       reduce using rule 86 (operand -> CSTC evaluate_operation_char .)
    EOS             reduce using rule 86 (operand -> CSTC evaluate_operation_char .)


state 126

    (87) operand -> ID push_id . save_id_operand operand_prime
    (89) save_id_operand -> .

    LEFTB           reduce using rule 89 (save_id_operand -> .)
    MULTIPLY        reduce using rule 89 (save_id_operand -> .)
    DIVIDE          reduce using rule 89 (save_id_operand -> .)
    PLUS            reduce using rule 89 (save_id_operand -> .)
    MINUS           reduce using rule 89 (save_id_operand -> .)
    RIGHTB          reduce using rule 89 (save_id_operand -> .)
    GREATER         reduce using rule 89 (save_id_operand -> .)
    LESS            reduce using rule 89 (save_id_operand -> .)
    EQUAL           reduce using rule 89 (save_id_operand -> .)
    NOTEQUAL        reduce using rule 89 (save_id_operand -> .)
    GREATEREQUAL    reduce using rule 89 (save_id_operand -> .)
    LESSEQUAL       reduce using rule 89 (save_id_operand -> .)
    AND             reduce using rule 89 (save_id_operand -> .)
    OR              reduce using rule 89 (save_id_operand -> .)
    RIGHTP          reduce using rule 89 (save_id_operand -> .)
    SEPARATOR       reduce using rule 89 (save_id_operand -> .)
    EOS             reduce using rule 89 (save_id_operand -> .)

    save_id_operand                shift and go to state 169

state 127

    (88) operand -> FUNCTION functioncall .

    MULTIPLY        reduce using rule 88 (operand -> FUNCTION functioncall .)
    DIVIDE          reduce using rule 88 (operand -> FUNCTION functioncall .)
    PLUS            reduce using rule 88 (operand -> FUNCTION functioncall .)
    MINUS           reduce using rule 88 (operand -> FUNCTION functioncall .)
    RIGHTB          reduce using rule 88 (operand -> FUNCTION functioncall .)
    GREATER         reduce using rule 88 (operand -> FUNCTION functioncall .)
    LESS            reduce using rule 88 (operand -> FUNCTION functioncall .)
    EQUAL           reduce using rule 88 (operand -> FUNCTION functioncall .)
    NOTEQUAL        reduce using rule 88 (operand -> FUNCTION functioncall .)
    GREATEREQUAL    reduce using rule 88 (operand -> FUNCTION functioncall .)
    LESSEQUAL       reduce using rule 88 (operand -> FUNCTION functioncall .)
    AND             reduce using rule 88 (operand -> FUNCTION functioncall .)
    OR              reduce using rule 88 (operand -> FUNCTION functioncall .)
    RIGHTP          reduce using rule 88 (operand -> FUNCTION functioncall .)
    SEPARATOR       reduce using rule 88 (operand -> FUNCTION functioncall .)
    EOS             reduce using rule 88 (operand -> FUNCTION functioncall .)


state 128

    (126) functioncall -> ID . verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (129) verify_function -> .

    LEFTP           reduce using rule 129 (verify_function -> .)

    verify_function                shift and go to state 68

state 129

    (37) modules_second_prime -> type ID . add_parameter modules_third_prime
    (47) add_parameter -> .

    SEPARATOR       reduce using rule 47 (add_parameter -> .)
    RIGHTP          reduce using rule 47 (add_parameter -> .)

    add_parameter                  shift and go to state 170

state 130

    (99) assignment -> ID push_id save_assignment_id assignment_second_prime . EQUALS push_operator assignment_prime

    EQUALS          shift and go to state 171


state 131

    (102) assignment_second_prime -> save_id_array . LEFTB fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime

    LEFTB           shift and go to state 172


state 132

    (126) functioncall -> ID verify_function LEFTP fake_bottom . exp verify_parameter functioncall_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 173
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 133

    (134) print -> PRINT LEFTP fake_bottom print_prime .

    EOS             reduce using rule 134 (print -> PRINT LEFTP fake_bottom print_prime .)


state 134

    (135) print_prime -> expression . print_quad print_second_prime
    (139) print_quad -> .

    SEPARATOR       reduce using rule 139 (print_quad -> .)
    RIGHTP          reduce using rule 139 (print_quad -> .)

    print_quad                     shift and go to state 174

state 135

    (136) print_prime -> CSTS . print_string_quad print_second_prime
    (140) print_string_quad -> .

    SEPARATOR       reduce using rule 140 (print_string_quad -> .)
    RIGHTP          reduce using rule 140 (print_string_quad -> .)

    print_string_quad              shift and go to state 175

state 136

    (109) condition -> WHILE save_jump LEFTP compoundexp . RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill

    RIGHTP          shift and go to state 176


state 137

    (110) condition -> DO save_jump LEFTBRACE body . RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad

    RIGHTBRACE      shift and go to state 177


state 138

    (112) condition_prime -> LEFTP compoundexp RIGHTP . gotof_quad condition_second_prime
    (121) gotof_quad -> .

    LEFTBRACE       reduce using rule 121 (gotof_quad -> .)
    ID              reduce using rule 121 (gotof_quad -> .)
    PRINT           reduce using rule 121 (gotof_quad -> .)
    WHILE           reduce using rule 121 (gotof_quad -> .)
    DO              reduce using rule 121 (gotof_quad -> .)
    IF              reduce using rule 121 (gotof_quad -> .)
    JEDO            reduce using rule 121 (gotof_quad -> .)
    READINPUT       reduce using rule 121 (gotof_quad -> .)

    gotof_quad                     shift and go to state 178

state 139

    (56) compoundexp -> expression eval_logic . compoundexp_prime
    (57) compoundexp_prime -> . AND push_operator compoundexp
    (58) compoundexp_prime -> . OR push_operator compoundexp
    (59) compoundexp_prime -> .

    AND             shift and go to state 180
    OR              shift and go to state 181
    RIGHTP          reduce using rule 59 (compoundexp_prime -> .)

    compoundexp_prime              shift and go to state 179

state 140

    (61) expression -> exp eval_relational . expression_prime
    (62) expression_prime -> . GREATER push_operator expression
    (63) expression_prime -> . LESS push_operator expression
    (64) expression_prime -> . EQUAL push_operator expression
    (65) expression_prime -> . NOTEQUAL push_operator expression
    (66) expression_prime -> . GREATEREQUAL push_operator expression
    (67) expression_prime -> . LESSEQUAL push_operator expression
    (68) expression_prime -> .

    GREATER         shift and go to state 183
    LESS            shift and go to state 184
    EQUAL           shift and go to state 185
    NOTEQUAL        shift and go to state 186
    GREATEREQUAL    shift and go to state 187
    LESSEQUAL       shift and go to state 188
    AND             reduce using rule 68 (expression_prime -> .)
    OR              reduce using rule 68 (expression_prime -> .)
    RIGHTP          reduce using rule 68 (expression_prime -> .)
    SEPARATOR       reduce using rule 68 (expression_prime -> .)

    expression_prime               shift and go to state 182

state 141

    (142) specialfunction_prime -> CIRCLE LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 189
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 142

    (143) specialfunction_prime -> SQUARE LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 190
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 143

    (144) specialfunction_prime -> RECTANGLE LEFTP . exp SEPARATOR exp RIGHTP two_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 191
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 144

    (145) specialfunction_prime -> DRAWDOT LEFTP . exp SEPARATOR CSTS RIGHTP two_argument_string_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 192
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 145

    (146) specialfunction_prime -> ARCH LEFTP . exp SEPARATOR CSTS RIGHTP two_argument_string_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 193
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 146

    (147) specialfunction_prime -> TRIANGLE LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 194
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 147

    (148) specialfunction_prime -> FORWARD LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 195
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 148

    (149) specialfunction_prime -> BACK LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 196
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 149

    (150) specialfunction_prime -> TURNRIGHT LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 197
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 150

    (151) specialfunction_prime -> TURNLEFT LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 198
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 151

    (152) specialfunction_prime -> COLOR LEFTP . CSTS RIGHTP special_string_quad

    CSTS            shift and go to state 199


state 152

    (153) specialfunction_prime -> THICKNESS LEFTP . exp RIGHTP one_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 200
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 153

    (154) specialfunction_prime -> STARTPEN LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 201


state 154

    (155) specialfunction_prime -> CREATE LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 202


state 155

    (156) specialfunction_prime -> STOPPEN LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 203


state 156

    (157) specialfunction_prime -> STARTFILL LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 204


state 157

    (158) specialfunction_prime -> FILLSHAPE LEFTP . CSTS RIGHTP special_string_quad

    CSTS            shift and go to state 205


state 158

    (159) specialfunction_prime -> STOPFILL LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 206


state 159

    (160) specialfunction_prime -> RESTART LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 207


state 160

    (167) input -> READINPUT LEFTP ID input_quad . RIGHTP

    RIGHTP          shift and go to state 208


state 161

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension . vars_fifth_prime
    (18) vars_fifth_prime -> . LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two
    (19) vars_fifth_prime -> . allocate_sequential_memory set_internal_dimension_one
    (27) allocate_sequential_memory -> .

    LEFTB           shift and go to state 209
    SEPARATOR       reduce using rule 27 (allocate_sequential_memory -> .)
    EOS             reduce using rule 27 (allocate_sequential_memory -> .)

    vars_fifth_prime               shift and go to state 210
    allocate_sequential_memory     shift and go to state 211

state 162

    (70) exp -> term eval_term exp_prime .

    RIGHTB          reduce using rule 70 (exp -> term eval_term exp_prime .)
    GREATER         reduce using rule 70 (exp -> term eval_term exp_prime .)
    LESS            reduce using rule 70 (exp -> term eval_term exp_prime .)
    EQUAL           reduce using rule 70 (exp -> term eval_term exp_prime .)
    NOTEQUAL        reduce using rule 70 (exp -> term eval_term exp_prime .)
    GREATEREQUAL    reduce using rule 70 (exp -> term eval_term exp_prime .)
    LESSEQUAL       reduce using rule 70 (exp -> term eval_term exp_prime .)
    AND             reduce using rule 70 (exp -> term eval_term exp_prime .)
    OR              reduce using rule 70 (exp -> term eval_term exp_prime .)
    RIGHTP          reduce using rule 70 (exp -> term eval_term exp_prime .)
    SEPARATOR       reduce using rule 70 (exp -> term eval_term exp_prime .)
    EOS             reduce using rule 70 (exp -> term eval_term exp_prime .)


state 163

    (71) exp_prime -> PLUS . push_operator exp
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 212

state 164

    (72) exp_prime -> MINUS . push_operator exp
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 213

state 165

    (75) term -> factor eval_factor term_prime .

    PLUS            reduce using rule 75 (term -> factor eval_factor term_prime .)
    MINUS           reduce using rule 75 (term -> factor eval_factor term_prime .)
    RIGHTB          reduce using rule 75 (term -> factor eval_factor term_prime .)
    GREATER         reduce using rule 75 (term -> factor eval_factor term_prime .)
    LESS            reduce using rule 75 (term -> factor eval_factor term_prime .)
    EQUAL           reduce using rule 75 (term -> factor eval_factor term_prime .)
    NOTEQUAL        reduce using rule 75 (term -> factor eval_factor term_prime .)
    GREATEREQUAL    reduce using rule 75 (term -> factor eval_factor term_prime .)
    LESSEQUAL       reduce using rule 75 (term -> factor eval_factor term_prime .)
    AND             reduce using rule 75 (term -> factor eval_factor term_prime .)
    OR              reduce using rule 75 (term -> factor eval_factor term_prime .)
    RIGHTP          reduce using rule 75 (term -> factor eval_factor term_prime .)
    SEPARATOR       reduce using rule 75 (term -> factor eval_factor term_prime .)
    EOS             reduce using rule 75 (term -> factor eval_factor term_prime .)


state 166

    (76) term_prime -> MULTIPLY . push_operator term
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 214

state 167

    (77) term_prime -> DIVIDE . push_operator term
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 215

state 168

    (80) factor -> LEFTP fake_bottom expression . RIGHTP pop_fake_bottom

    RIGHTP          shift and go to state 216


state 169

    (87) operand -> ID push_id save_id_operand . operand_prime
    (91) operand_prime -> . save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime
    (92) operand_prime -> .
    (90) save_id_array -> .

    MULTIPLY        reduce using rule 92 (operand_prime -> .)
    DIVIDE          reduce using rule 92 (operand_prime -> .)
    PLUS            reduce using rule 92 (operand_prime -> .)
    MINUS           reduce using rule 92 (operand_prime -> .)
    RIGHTB          reduce using rule 92 (operand_prime -> .)
    GREATER         reduce using rule 92 (operand_prime -> .)
    LESS            reduce using rule 92 (operand_prime -> .)
    EQUAL           reduce using rule 92 (operand_prime -> .)
    NOTEQUAL        reduce using rule 92 (operand_prime -> .)
    GREATEREQUAL    reduce using rule 92 (operand_prime -> .)
    LESSEQUAL       reduce using rule 92 (operand_prime -> .)
    AND             reduce using rule 92 (operand_prime -> .)
    OR              reduce using rule 92 (operand_prime -> .)
    RIGHTP          reduce using rule 92 (operand_prime -> .)
    SEPARATOR       reduce using rule 92 (operand_prime -> .)
    EOS             reduce using rule 92 (operand_prime -> .)
    LEFTB           reduce using rule 90 (save_id_array -> .)

    operand_prime                  shift and go to state 217
    save_id_array                  shift and go to state 218

state 170

    (37) modules_second_prime -> type ID add_parameter . modules_third_prime
    (38) modules_third_prime -> . SEPARATOR modules_second_prime
    (39) modules_third_prime -> . RIGHTP LEFTBRACE modules_fourth_prime

    SEPARATOR       shift and go to state 220
    RIGHTP          shift and go to state 221

    modules_third_prime            shift and go to state 219

state 171

    (99) assignment -> ID push_id save_assignment_id assignment_second_prime EQUALS . push_operator assignment_prime
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 222

state 172

    (102) assignment_second_prime -> save_id_array LEFTB . fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 223

state 173

    (126) functioncall -> ID verify_function LEFTP fake_bottom exp . verify_parameter functioncall_prime
    (130) verify_parameter -> .

    SEPARATOR       reduce using rule 130 (verify_parameter -> .)
    RIGHTP          reduce using rule 130 (verify_parameter -> .)

    verify_parameter               shift and go to state 224

state 174

    (135) print_prime -> expression print_quad . print_second_prime
    (137) print_second_prime -> . SEPARATOR expression print_quad print_second_prime
    (138) print_second_prime -> . RIGHTP pop_fake_bottom

    SEPARATOR       shift and go to state 226
    RIGHTP          shift and go to state 227

    print_second_prime             shift and go to state 225

state 175

    (136) print_prime -> CSTS print_string_quad . print_second_prime
    (137) print_second_prime -> . SEPARATOR expression print_quad print_second_prime
    (138) print_second_prime -> . RIGHTP pop_fake_bottom

    SEPARATOR       shift and go to state 226
    RIGHTP          shift and go to state 227

    print_second_prime             shift and go to state 228

state 176

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP . gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (121) gotof_quad -> .

    LEFTBRACE       reduce using rule 121 (gotof_quad -> .)

    gotof_quad                     shift and go to state 229

state 177

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE . WHILE LEFTP compoundexp RIGHTP gotov_quad

    WHILE           shift and go to state 230


state 178

    (112) condition_prime -> LEFTP compoundexp RIGHTP gotof_quad . condition_second_prime
    (113) condition_second_prime -> . statement condition_third_prime
    (114) condition_second_prime -> . LEFTBRACE body RIGHTBRACE condition_third_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    LEFTBRACE       shift and go to state 233
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    condition_second_prime         shift and go to state 231
    statement                      shift and go to state 232
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 179

    (56) compoundexp -> expression eval_logic compoundexp_prime .

    RIGHTP          reduce using rule 56 (compoundexp -> expression eval_logic compoundexp_prime .)


state 180

    (57) compoundexp_prime -> AND . push_operator compoundexp
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 234

state 181

    (58) compoundexp_prime -> OR . push_operator compoundexp
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 235

state 182

    (61) expression -> exp eval_relational expression_prime .

    AND             reduce using rule 61 (expression -> exp eval_relational expression_prime .)
    OR              reduce using rule 61 (expression -> exp eval_relational expression_prime .)
    RIGHTP          reduce using rule 61 (expression -> exp eval_relational expression_prime .)
    SEPARATOR       reduce using rule 61 (expression -> exp eval_relational expression_prime .)


state 183

    (62) expression_prime -> GREATER . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 236

state 184

    (63) expression_prime -> LESS . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 237

state 185

    (64) expression_prime -> EQUAL . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 238

state 186

    (65) expression_prime -> NOTEQUAL . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 239

state 187

    (66) expression_prime -> GREATEREQUAL . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 240

state 188

    (67) expression_prime -> LESSEQUAL . push_operator expression
    (133) push_operator -> .

    LEFTP           reduce using rule 133 (push_operator -> .)
    CSTI            reduce using rule 133 (push_operator -> .)
    CSTF            reduce using rule 133 (push_operator -> .)
    CSTC            reduce using rule 133 (push_operator -> .)
    ID              reduce using rule 133 (push_operator -> .)
    FUNCTION        reduce using rule 133 (push_operator -> .)

    push_operator                  shift and go to state 241

state 189

    (142) specialfunction_prime -> CIRCLE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 242


state 190

    (143) specialfunction_prime -> SQUARE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 243


state 191

    (144) specialfunction_prime -> RECTANGLE LEFTP exp . SEPARATOR exp RIGHTP two_argument_quad

    SEPARATOR       shift and go to state 244


state 192

    (145) specialfunction_prime -> DRAWDOT LEFTP exp . SEPARATOR CSTS RIGHTP two_argument_string_quad

    SEPARATOR       shift and go to state 245


state 193

    (146) specialfunction_prime -> ARCH LEFTP exp . SEPARATOR CSTS RIGHTP two_argument_string_quad

    SEPARATOR       shift and go to state 246


state 194

    (147) specialfunction_prime -> TRIANGLE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 247


state 195

    (148) specialfunction_prime -> FORWARD LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 248


state 196

    (149) specialfunction_prime -> BACK LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 249


state 197

    (150) specialfunction_prime -> TURNRIGHT LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 250


state 198

    (151) specialfunction_prime -> TURNLEFT LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 251


state 199

    (152) specialfunction_prime -> COLOR LEFTP CSTS . RIGHTP special_string_quad

    RIGHTP          shift and go to state 252


state 200

    (153) specialfunction_prime -> THICKNESS LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 253


state 201

    (154) specialfunction_prime -> STARTPEN LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 254

state 202

    (155) specialfunction_prime -> CREATE LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 255

state 203

    (156) specialfunction_prime -> STOPPEN LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 256

state 204

    (157) specialfunction_prime -> STARTFILL LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 257

state 205

    (158) specialfunction_prime -> FILLSHAPE LEFTP CSTS . RIGHTP special_string_quad

    RIGHTP          shift and go to state 258


state 206

    (159) specialfunction_prime -> STOPFILL LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 259

state 207

    (160) specialfunction_prime -> RESTART LEFTP RIGHTP . no_argument_quad
    (162) no_argument_quad -> .

    EOS             reduce using rule 162 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 260

state 208

    (167) input -> READINPUT LEFTP ID input_quad RIGHTP .

    EOS             reduce using rule 167 (input -> READINPUT LEFTP ID input_quad RIGHTP .)


state 209

    (18) vars_fifth_prime -> LEFTB . exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 261
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 210

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_fifth_prime .

    SEPARATOR       reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_fifth_prime .)
    EOS             reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_fifth_prime .)


state 211

    (19) vars_fifth_prime -> allocate_sequential_memory . set_internal_dimension_one
    (25) set_internal_dimension_one -> .

    SEPARATOR       reduce using rule 25 (set_internal_dimension_one -> .)
    EOS             reduce using rule 25 (set_internal_dimension_one -> .)

    set_internal_dimension_one     shift and go to state 262

state 212

    (71) exp_prime -> PLUS push_operator . exp
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 263
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 213

    (72) exp_prime -> MINUS push_operator . exp
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 264
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 214

    (76) term_prime -> MULTIPLY push_operator . term
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    term                           shift and go to state 265
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 215

    (77) term_prime -> DIVIDE push_operator . term
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    term                           shift and go to state 266
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 216

    (80) factor -> LEFTP fake_bottom expression RIGHTP . pop_fake_bottom
    (83) pop_fake_bottom -> .

    MULTIPLY        reduce using rule 83 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 83 (pop_fake_bottom -> .)
    PLUS            reduce using rule 83 (pop_fake_bottom -> .)
    MINUS           reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 83 (pop_fake_bottom -> .)
    GREATER         reduce using rule 83 (pop_fake_bottom -> .)
    LESS            reduce using rule 83 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 83 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 83 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 83 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 83 (pop_fake_bottom -> .)
    AND             reduce using rule 83 (pop_fake_bottom -> .)
    OR              reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 83 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 83 (pop_fake_bottom -> .)
    EOS             reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 267

state 217

    (87) operand -> ID push_id save_id_operand operand_prime .

    MULTIPLY        reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    DIVIDE          reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    PLUS            reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    MINUS           reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    RIGHTB          reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    GREATER         reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    LESS            reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    EQUAL           reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    NOTEQUAL        reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    GREATEREQUAL    reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    LESSEQUAL       reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    AND             reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    OR              reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    RIGHTP          reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    SEPARATOR       reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)
    EOS             reduce using rule 87 (operand -> ID push_id save_id_operand operand_prime .)


state 218

    (91) operand_prime -> save_id_array . LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime

    LEFTB           shift and go to state 268


state 219

    (37) modules_second_prime -> type ID add_parameter modules_third_prime .

    FUNCTION        reduce using rule 37 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    MAIN            reduce using rule 37 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPEINT         reduce using rule 37 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPEFLOAT       reduce using rule 37 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPECHAR        reduce using rule 37 (modules_second_prime -> type ID add_parameter modules_third_prime .)


state 220

    (38) modules_third_prime -> SEPARATOR . modules_second_prime
    (37) modules_second_prime -> . type ID add_parameter modules_third_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_second_prime           shift and go to state 269
    type                           shift and go to state 88

state 221

    (39) modules_third_prime -> RIGHTP . LEFTBRACE modules_fourth_prime

    LEFTBRACE       shift and go to state 270


state 222

    (99) assignment -> ID push_id save_assignment_id assignment_second_prime EQUALS push_operator . assignment_prime
    (100) assignment_prime -> . exp eval_assignment
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    assignment_prime               shift and go to state 271
    exp                            shift and go to state 272
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 223

    (102) assignment_second_prime -> save_id_array LEFTB fake_bottom . exp RIGHTB pop_fake_bottom assignment_third_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 273
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 224

    (126) functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter . functioncall_prime
    (127) functioncall_prime -> . SEPARATOR exp verify_parameter functioncall_prime
    (128) functioncall_prime -> . verify_param_count RIGHTP pop_fake_bottom go_sub_quad
    (131) verify_param_count -> .

    SEPARATOR       shift and go to state 275
    RIGHTP          reduce using rule 131 (verify_param_count -> .)

    functioncall_prime             shift and go to state 274
    verify_param_count             shift and go to state 276

state 225

    (135) print_prime -> expression print_quad print_second_prime .

    EOS             reduce using rule 135 (print_prime -> expression print_quad print_second_prime .)


state 226

    (137) print_second_prime -> SEPARATOR . expression print_quad print_second_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 277
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 227

    (138) print_second_prime -> RIGHTP . pop_fake_bottom
    (83) pop_fake_bottom -> .

    EOS             reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 278

state 228

    (136) print_prime -> CSTS print_string_quad print_second_prime .

    EOS             reduce using rule 136 (print_prime -> CSTS print_string_quad print_second_prime .)


state 229

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad . LEFTBRACE body RIGHTBRACE goto_while_fill

    LEFTBRACE       shift and go to state 279


state 230

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE . LEFTP compoundexp RIGHTP gotov_quad

    LEFTP           shift and go to state 280


state 231

    (112) condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .

    ID              reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    PRINT           reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    WHILE           reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    DO              reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    IF              reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    JEDO            reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    READINPUT       reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    RIGHTBRACE      reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    RETURN          reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    ELSE            reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    ELSEIF          reduce using rule 112 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)


state 232

    (113) condition_second_prime -> statement . condition_third_prime
    (115) condition_third_prime -> . goto_if_fill ELSEIF condition_prime
    (116) condition_third_prime -> . ELSE goto_else condition_fourth_prime
    (117) condition_third_prime -> . goto_if_fill
    (124) goto_if_fill -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 283
    ELSEIF          reduce using rule 124 (goto_if_fill -> .)
    ID              reduce using rule 124 (goto_if_fill -> .)
    PRINT           reduce using rule 124 (goto_if_fill -> .)
    WHILE           reduce using rule 124 (goto_if_fill -> .)
    DO              reduce using rule 124 (goto_if_fill -> .)
    IF              reduce using rule 124 (goto_if_fill -> .)
    JEDO            reduce using rule 124 (goto_if_fill -> .)
    READINPUT       reduce using rule 124 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 124 (goto_if_fill -> .)
    RETURN          reduce using rule 124 (goto_if_fill -> .)

  ! ELSE            [ reduce using rule 124 (goto_if_fill -> .) ]

    condition_third_prime          shift and go to state 281
    goto_if_fill                   shift and go to state 282

state 233

    (114) condition_second_prime -> LEFTBRACE . body RIGHTBRACE condition_third_prime
    (31) body -> . statement body_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 284
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 234

    (57) compoundexp_prime -> AND push_operator . compoundexp
    (56) compoundexp -> . expression eval_logic compoundexp_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    compoundexp                    shift and go to state 285
    expression                     shift and go to state 96
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 235

    (58) compoundexp_prime -> OR push_operator . compoundexp
    (56) compoundexp -> . expression eval_logic compoundexp_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    compoundexp                    shift and go to state 286
    expression                     shift and go to state 96
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 236

    (62) expression_prime -> GREATER push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 287
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 237

    (63) expression_prime -> LESS push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 288
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 238

    (64) expression_prime -> EQUAL push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 289
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 239

    (65) expression_prime -> NOTEQUAL push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 290
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 240

    (66) expression_prime -> GREATEREQUAL push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 291
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 241

    (67) expression_prime -> LESSEQUAL push_operator . expression
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    expression                     shift and go to state 292
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 242

    (142) specialfunction_prime -> CIRCLE LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 293

state 243

    (143) specialfunction_prime -> SQUARE LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 294

state 244

    (144) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR . exp RIGHTP two_argument_quad
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 295
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 245

    (145) specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR . CSTS RIGHTP two_argument_string_quad

    CSTS            shift and go to state 296


state 246

    (146) specialfunction_prime -> ARCH LEFTP exp SEPARATOR . CSTS RIGHTP two_argument_string_quad

    CSTS            shift and go to state 297


state 247

    (147) specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 298

state 248

    (148) specialfunction_prime -> FORWARD LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 299

state 249

    (149) specialfunction_prime -> BACK LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 300

state 250

    (150) specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 301

state 251

    (151) specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 302

state 252

    (152) specialfunction_prime -> COLOR LEFTP CSTS RIGHTP . special_string_quad
    (166) special_string_quad -> .

    EOS             reduce using rule 166 (special_string_quad -> .)

    special_string_quad            shift and go to state 303

state 253

    (153) specialfunction_prime -> THICKNESS LEFTP exp RIGHTP . one_argument_quad
    (163) one_argument_quad -> .

    EOS             reduce using rule 163 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 304

state 254

    (154) specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 154 (specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad .)


state 255

    (155) specialfunction_prime -> CREATE LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 155 (specialfunction_prime -> CREATE LEFTP RIGHTP no_argument_quad .)


state 256

    (156) specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 156 (specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad .)


state 257

    (157) specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 157 (specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad .)


state 258

    (158) specialfunction_prime -> FILLSHAPE LEFTP CSTS RIGHTP . special_string_quad
    (166) special_string_quad -> .

    EOS             reduce using rule 166 (special_string_quad -> .)

    special_string_quad            shift and go to state 305

state 259

    (159) specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 159 (specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad .)


state 260

    (160) specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 160 (specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad .)


state 261

    (18) vars_fifth_prime -> LEFTB exp . RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two

    RIGHTB          shift and go to state 306


state 262

    (19) vars_fifth_prime -> allocate_sequential_memory set_internal_dimension_one .

    SEPARATOR       reduce using rule 19 (vars_fifth_prime -> allocate_sequential_memory set_internal_dimension_one .)
    EOS             reduce using rule 19 (vars_fifth_prime -> allocate_sequential_memory set_internal_dimension_one .)


state 263

    (71) exp_prime -> PLUS push_operator exp .

    RIGHTB          reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    GREATER         reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    LESS            reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    EQUAL           reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    NOTEQUAL        reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    GREATEREQUAL    reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    LESSEQUAL       reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    AND             reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    OR              reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    RIGHTP          reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    SEPARATOR       reduce using rule 71 (exp_prime -> PLUS push_operator exp .)
    EOS             reduce using rule 71 (exp_prime -> PLUS push_operator exp .)


state 264

    (72) exp_prime -> MINUS push_operator exp .

    RIGHTB          reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    GREATER         reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    LESS            reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    EQUAL           reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    NOTEQUAL        reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    GREATEREQUAL    reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    LESSEQUAL       reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    AND             reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    OR              reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    RIGHTP          reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    SEPARATOR       reduce using rule 72 (exp_prime -> MINUS push_operator exp .)
    EOS             reduce using rule 72 (exp_prime -> MINUS push_operator exp .)


state 265

    (76) term_prime -> MULTIPLY push_operator term .

    PLUS            reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    MINUS           reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    RIGHTB          reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    GREATER         reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    LESS            reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    EQUAL           reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    NOTEQUAL        reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    GREATEREQUAL    reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    LESSEQUAL       reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    AND             reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    OR              reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    RIGHTP          reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    SEPARATOR       reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)
    EOS             reduce using rule 76 (term_prime -> MULTIPLY push_operator term .)


state 266

    (77) term_prime -> DIVIDE push_operator term .

    PLUS            reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    MINUS           reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    RIGHTB          reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    GREATER         reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    LESS            reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    EQUAL           reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    NOTEQUAL        reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    GREATEREQUAL    reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    LESSEQUAL       reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    AND             reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    OR              reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    RIGHTP          reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    SEPARATOR       reduce using rule 77 (term_prime -> DIVIDE push_operator term .)
    EOS             reduce using rule 77 (term_prime -> DIVIDE push_operator term .)


state 267

    (80) factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .

    MULTIPLY        reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    DIVIDE          reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    PLUS            reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    MINUS           reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTB          reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATER         reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESS            reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EQUAL           reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    NOTEQUAL        reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATEREQUAL    reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESSEQUAL       reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    AND             reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    OR              reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTP          reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    SEPARATOR       reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EOS             reduce using rule 80 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)


state 268

    (91) operand_prime -> save_id_array LEFTB . fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 307

state 269

    (38) modules_third_prime -> SEPARATOR modules_second_prime .

    FUNCTION        reduce using rule 38 (modules_third_prime -> SEPARATOR modules_second_prime .)
    MAIN            reduce using rule 38 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPEINT         reduce using rule 38 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPEFLOAT       reduce using rule 38 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPECHAR        reduce using rule 38 (modules_third_prime -> SEPARATOR modules_second_prime .)


state 270

    (39) modules_third_prime -> RIGHTP LEFTBRACE . modules_fourth_prime
    (40) modules_fourth_prime -> . vars modules_fourth_prime
    (41) modules_fourth_prime -> . body modules_fifth_prime
    (11) vars -> . type vars_prime vars_third_prime
    (31) body -> . statement body_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    modules_fourth_prime           shift and go to state 308
    vars                           shift and go to state 309
    body                           shift and go to state 310
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 271

    (99) assignment -> ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime .

    EOS             reduce using rule 99 (assignment -> ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime .)


state 272

    (100) assignment_prime -> exp . eval_assignment
    (107) eval_assignment -> .

    EOS             reduce using rule 107 (eval_assignment -> .)

    eval_assignment                shift and go to state 311

state 273

    (102) assignment_second_prime -> save_id_array LEFTB fake_bottom exp . RIGHTB pop_fake_bottom assignment_third_prime

    RIGHTB          shift and go to state 312


state 274

    (126) functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .

    EOS             reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    MULTIPLY        reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    DIVIDE          reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    PLUS            reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    MINUS           reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    RIGHTB          reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    GREATER         reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    LESS            reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    EQUAL           reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    NOTEQUAL        reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    GREATEREQUAL    reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    LESSEQUAL       reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    AND             reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    OR              reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    RIGHTP          reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)
    SEPARATOR       reduce using rule 126 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)


state 275

    (127) functioncall_prime -> SEPARATOR . exp verify_parameter functioncall_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 313
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 276

    (128) functioncall_prime -> verify_param_count . RIGHTP pop_fake_bottom go_sub_quad

    RIGHTP          shift and go to state 314


state 277

    (137) print_second_prime -> SEPARATOR expression . print_quad print_second_prime
    (139) print_quad -> .

    SEPARATOR       reduce using rule 139 (print_quad -> .)
    RIGHTP          reduce using rule 139 (print_quad -> .)

    print_quad                     shift and go to state 315

state 278

    (138) print_second_prime -> RIGHTP pop_fake_bottom .

    EOS             reduce using rule 138 (print_second_prime -> RIGHTP pop_fake_bottom .)


state 279

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE . body RIGHTBRACE goto_while_fill
    (31) body -> . statement body_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 316
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 280

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP . compoundexp RIGHTP gotov_quad
    (56) compoundexp -> . expression eval_logic compoundexp_prime
    (61) expression -> . exp eval_relational expression_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    compoundexp                    shift and go to state 317
    expression                     shift and go to state 96
    exp                            shift and go to state 97
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 281

    (113) condition_second_prime -> statement condition_third_prime .

    ID              reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    PRINT           reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    WHILE           reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    DO              reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    IF              reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    JEDO            reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    READINPUT       reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    RIGHTBRACE      reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    RETURN          reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    ELSE            reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)
    ELSEIF          reduce using rule 113 (condition_second_prime -> statement condition_third_prime .)


state 282

    (115) condition_third_prime -> goto_if_fill . ELSEIF condition_prime
    (117) condition_third_prime -> goto_if_fill .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 318
    ID              reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    PRINT           reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    WHILE           reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    DO              reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    IF              reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    JEDO            reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    READINPUT       reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    RIGHTBRACE      reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    RETURN          reduce using rule 117 (condition_third_prime -> goto_if_fill .)
    ELSE            reduce using rule 117 (condition_third_prime -> goto_if_fill .)

  ! ELSEIF          [ reduce using rule 117 (condition_third_prime -> goto_if_fill .) ]


state 283

    (116) condition_third_prime -> ELSE . goto_else condition_fourth_prime
    (122) goto_else -> .

    LEFTBRACE       reduce using rule 122 (goto_else -> .)
    ID              reduce using rule 122 (goto_else -> .)
    PRINT           reduce using rule 122 (goto_else -> .)
    WHILE           reduce using rule 122 (goto_else -> .)
    DO              reduce using rule 122 (goto_else -> .)
    IF              reduce using rule 122 (goto_else -> .)
    JEDO            reduce using rule 122 (goto_else -> .)
    READINPUT       reduce using rule 122 (goto_else -> .)

    goto_else                      shift and go to state 319

state 284

    (114) condition_second_prime -> LEFTBRACE body . RIGHTBRACE condition_third_prime

    RIGHTBRACE      shift and go to state 320


state 285

    (57) compoundexp_prime -> AND push_operator compoundexp .

    RIGHTP          reduce using rule 57 (compoundexp_prime -> AND push_operator compoundexp .)


state 286

    (58) compoundexp_prime -> OR push_operator compoundexp .

    RIGHTP          reduce using rule 58 (compoundexp_prime -> OR push_operator compoundexp .)


state 287

    (62) expression_prime -> GREATER push_operator expression .

    AND             reduce using rule 62 (expression_prime -> GREATER push_operator expression .)
    OR              reduce using rule 62 (expression_prime -> GREATER push_operator expression .)
    RIGHTP          reduce using rule 62 (expression_prime -> GREATER push_operator expression .)
    SEPARATOR       reduce using rule 62 (expression_prime -> GREATER push_operator expression .)


state 288

    (63) expression_prime -> LESS push_operator expression .

    AND             reduce using rule 63 (expression_prime -> LESS push_operator expression .)
    OR              reduce using rule 63 (expression_prime -> LESS push_operator expression .)
    RIGHTP          reduce using rule 63 (expression_prime -> LESS push_operator expression .)
    SEPARATOR       reduce using rule 63 (expression_prime -> LESS push_operator expression .)


state 289

    (64) expression_prime -> EQUAL push_operator expression .

    AND             reduce using rule 64 (expression_prime -> EQUAL push_operator expression .)
    OR              reduce using rule 64 (expression_prime -> EQUAL push_operator expression .)
    RIGHTP          reduce using rule 64 (expression_prime -> EQUAL push_operator expression .)
    SEPARATOR       reduce using rule 64 (expression_prime -> EQUAL push_operator expression .)


state 290

    (65) expression_prime -> NOTEQUAL push_operator expression .

    AND             reduce using rule 65 (expression_prime -> NOTEQUAL push_operator expression .)
    OR              reduce using rule 65 (expression_prime -> NOTEQUAL push_operator expression .)
    RIGHTP          reduce using rule 65 (expression_prime -> NOTEQUAL push_operator expression .)
    SEPARATOR       reduce using rule 65 (expression_prime -> NOTEQUAL push_operator expression .)


state 291

    (66) expression_prime -> GREATEREQUAL push_operator expression .

    AND             reduce using rule 66 (expression_prime -> GREATEREQUAL push_operator expression .)
    OR              reduce using rule 66 (expression_prime -> GREATEREQUAL push_operator expression .)
    RIGHTP          reduce using rule 66 (expression_prime -> GREATEREQUAL push_operator expression .)
    SEPARATOR       reduce using rule 66 (expression_prime -> GREATEREQUAL push_operator expression .)


state 292

    (67) expression_prime -> LESSEQUAL push_operator expression .

    AND             reduce using rule 67 (expression_prime -> LESSEQUAL push_operator expression .)
    OR              reduce using rule 67 (expression_prime -> LESSEQUAL push_operator expression .)
    RIGHTP          reduce using rule 67 (expression_prime -> LESSEQUAL push_operator expression .)
    SEPARATOR       reduce using rule 67 (expression_prime -> LESSEQUAL push_operator expression .)


state 293

    (142) specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 142 (specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad .)


state 294

    (143) specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 143 (specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad .)


state 295

    (144) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp . RIGHTP two_argument_quad

    RIGHTP          shift and go to state 321


state 296

    (145) specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR CSTS . RIGHTP two_argument_string_quad

    RIGHTP          shift and go to state 322


state 297

    (146) specialfunction_prime -> ARCH LEFTP exp SEPARATOR CSTS . RIGHTP two_argument_string_quad

    RIGHTP          shift and go to state 323


state 298

    (147) specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 147 (specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad .)


state 299

    (148) specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 148 (specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad .)


state 300

    (149) specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 149 (specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad .)


state 301

    (150) specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 150 (specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad .)


state 302

    (151) specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 151 (specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad .)


state 303

    (152) specialfunction_prime -> COLOR LEFTP CSTS RIGHTP special_string_quad .

    EOS             reduce using rule 152 (specialfunction_prime -> COLOR LEFTP CSTS RIGHTP special_string_quad .)


state 304

    (153) specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 153 (specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad .)


state 305

    (158) specialfunction_prime -> FILLSHAPE LEFTP CSTS RIGHTP special_string_quad .

    EOS             reduce using rule 158 (specialfunction_prime -> FILLSHAPE LEFTP CSTS RIGHTP special_string_quad .)


state 306

    (18) vars_fifth_prime -> LEFTB exp RIGHTB . second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two
    (24) second_dimension -> .

    SEPARATOR       reduce using rule 24 (second_dimension -> .)
    EOS             reduce using rule 24 (second_dimension -> .)

    second_dimension               shift and go to state 324

state 307

    (91) operand_prime -> save_id_array LEFTB fake_bottom . exp RIGHTB pop_fake_bottom operand_second_prime
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 325
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 308

    (39) modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .

    FUNCTION        reduce using rule 39 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    MAIN            reduce using rule 39 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPEINT         reduce using rule 39 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPEFLOAT       reduce using rule 39 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPECHAR        reduce using rule 39 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)


state 309

    (40) modules_fourth_prime -> vars . modules_fourth_prime
    (40) modules_fourth_prime -> . vars modules_fourth_prime
    (41) modules_fourth_prime -> . body modules_fifth_prime
    (11) vars -> . type vars_prime vars_third_prime
    (31) body -> . statement body_prime
    (28) type -> . TYPEINT
    (29) type -> . TYPEFLOAT
    (30) type -> . TYPECHAR
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    vars                           shift and go to state 309
    modules_fourth_prime           shift and go to state 326
    body                           shift and go to state 310
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 310

    (41) modules_fourth_prime -> body . modules_fifth_prime
    (42) modules_fifth_prime -> . RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me
    (43) modules_fifth_prime -> . RIGHTBRACE endproc_quad print_me

    RETURN          shift and go to state 328
    RIGHTBRACE      shift and go to state 329

    modules_fifth_prime            shift and go to state 327

state 311

    (100) assignment_prime -> exp eval_assignment .

    EOS             reduce using rule 100 (assignment_prime -> exp eval_assignment .)


state 312

    (102) assignment_second_prime -> save_id_array LEFTB fake_bottom exp RIGHTB . pop_fake_bottom assignment_third_prime
    (83) pop_fake_bottom -> .

    LEFTB           reduce using rule 83 (pop_fake_bottom -> .)
    EQUALS          reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 330

state 313

    (127) functioncall_prime -> SEPARATOR exp . verify_parameter functioncall_prime
    (130) verify_parameter -> .

    SEPARATOR       reduce using rule 130 (verify_parameter -> .)
    RIGHTP          reduce using rule 130 (verify_parameter -> .)

    verify_parameter               shift and go to state 331

state 314

    (128) functioncall_prime -> verify_param_count RIGHTP . pop_fake_bottom go_sub_quad
    (83) pop_fake_bottom -> .

    EOS             reduce using rule 83 (pop_fake_bottom -> .)
    MULTIPLY        reduce using rule 83 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 83 (pop_fake_bottom -> .)
    PLUS            reduce using rule 83 (pop_fake_bottom -> .)
    MINUS           reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 83 (pop_fake_bottom -> .)
    GREATER         reduce using rule 83 (pop_fake_bottom -> .)
    LESS            reduce using rule 83 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 83 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 83 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 83 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 83 (pop_fake_bottom -> .)
    AND             reduce using rule 83 (pop_fake_bottom -> .)
    OR              reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 83 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 332

state 315

    (137) print_second_prime -> SEPARATOR expression print_quad . print_second_prime
    (137) print_second_prime -> . SEPARATOR expression print_quad print_second_prime
    (138) print_second_prime -> . RIGHTP pop_fake_bottom

    SEPARATOR       shift and go to state 226
    RIGHTP          shift and go to state 227

    print_second_prime             shift and go to state 333

state 316

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body . RIGHTBRACE goto_while_fill

    RIGHTBRACE      shift and go to state 334


state 317

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp . RIGHTP gotov_quad

    RIGHTP          shift and go to state 335


state 318

    (115) condition_third_prime -> goto_if_fill ELSEIF . condition_prime
    (112) condition_prime -> . LEFTP compoundexp RIGHTP gotof_quad condition_second_prime

    LEFTP           shift and go to state 73

    condition_prime                shift and go to state 336

state 319

    (116) condition_third_prime -> ELSE goto_else . condition_fourth_prime
    (118) condition_fourth_prime -> . statement goto_if_fill
    (119) condition_fourth_prime -> . LEFTBRACE body RIGHTBRACE goto_if_fill
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    LEFTBRACE       shift and go to state 339
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    condition_fourth_prime         shift and go to state 337
    statement                      shift and go to state 338
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 320

    (114) condition_second_prime -> LEFTBRACE body RIGHTBRACE . condition_third_prime
    (115) condition_third_prime -> . goto_if_fill ELSEIF condition_prime
    (116) condition_third_prime -> . ELSE goto_else condition_fourth_prime
    (117) condition_third_prime -> . goto_if_fill
    (124) goto_if_fill -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 283
    ELSEIF          reduce using rule 124 (goto_if_fill -> .)
    ID              reduce using rule 124 (goto_if_fill -> .)
    PRINT           reduce using rule 124 (goto_if_fill -> .)
    WHILE           reduce using rule 124 (goto_if_fill -> .)
    DO              reduce using rule 124 (goto_if_fill -> .)
    IF              reduce using rule 124 (goto_if_fill -> .)
    JEDO            reduce using rule 124 (goto_if_fill -> .)
    READINPUT       reduce using rule 124 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 124 (goto_if_fill -> .)
    RETURN          reduce using rule 124 (goto_if_fill -> .)

  ! ELSE            [ reduce using rule 124 (goto_if_fill -> .) ]

    condition_third_prime          shift and go to state 340
    goto_if_fill                   shift and go to state 282

state 321

    (144) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP . two_argument_quad
    (164) two_argument_quad -> .

    EOS             reduce using rule 164 (two_argument_quad -> .)

    two_argument_quad              shift and go to state 341

state 322

    (145) specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR CSTS RIGHTP . two_argument_string_quad
    (165) two_argument_string_quad -> .

    EOS             reduce using rule 165 (two_argument_string_quad -> .)

    two_argument_string_quad       shift and go to state 342

state 323

    (146) specialfunction_prime -> ARCH LEFTP exp SEPARATOR CSTS RIGHTP . two_argument_string_quad
    (165) two_argument_string_quad -> .

    EOS             reduce using rule 165 (two_argument_string_quad -> .)

    two_argument_string_quad       shift and go to state 343

state 324

    (18) vars_fifth_prime -> LEFTB exp RIGHTB second_dimension . allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two
    (27) allocate_sequential_memory -> .

    SEPARATOR       reduce using rule 27 (allocate_sequential_memory -> .)
    EOS             reduce using rule 27 (allocate_sequential_memory -> .)

    allocate_sequential_memory     shift and go to state 344

state 325

    (91) operand_prime -> save_id_array LEFTB fake_bottom exp . RIGHTB pop_fake_bottom operand_second_prime

    RIGHTB          shift and go to state 345


state 326

    (40) modules_fourth_prime -> vars modules_fourth_prime .

    FUNCTION        reduce using rule 40 (modules_fourth_prime -> vars modules_fourth_prime .)
    MAIN            reduce using rule 40 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPEINT         reduce using rule 40 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPEFLOAT       reduce using rule 40 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPECHAR        reduce using rule 40 (modules_fourth_prime -> vars modules_fourth_prime .)


state 327

    (41) modules_fourth_prime -> body modules_fifth_prime .

    FUNCTION        reduce using rule 41 (modules_fourth_prime -> body modules_fifth_prime .)
    MAIN            reduce using rule 41 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPEINT         reduce using rule 41 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPEFLOAT       reduce using rule 41 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPECHAR        reduce using rule 41 (modules_fourth_prime -> body modules_fifth_prime .)


state 328

    (42) modules_fifth_prime -> RETURN . exp return_quad EOS RIGHTBRACE endproc_quad print_me
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 346
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 329

    (43) modules_fifth_prime -> RIGHTBRACE . endproc_quad print_me
    (49) endproc_quad -> .

    FUNCTION        reduce using rule 49 (endproc_quad -> .)
    MAIN            reduce using rule 49 (endproc_quad -> .)
    TYPEINT         reduce using rule 49 (endproc_quad -> .)
    TYPEFLOAT       reduce using rule 49 (endproc_quad -> .)
    TYPECHAR        reduce using rule 49 (endproc_quad -> .)

    endproc_quad                   shift and go to state 347

state 330

    (102) assignment_second_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom . assignment_third_prime
    (103) assignment_third_prime -> . LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
    (104) assignment_third_prime -> . quad_ver_one
    (105) quad_ver_one -> .

    LEFTB           shift and go to state 348
    EQUALS          reduce using rule 105 (quad_ver_one -> .)

    assignment_third_prime         shift and go to state 349
    quad_ver_one                   shift and go to state 350

state 331

    (127) functioncall_prime -> SEPARATOR exp verify_parameter . functioncall_prime
    (127) functioncall_prime -> . SEPARATOR exp verify_parameter functioncall_prime
    (128) functioncall_prime -> . verify_param_count RIGHTP pop_fake_bottom go_sub_quad
    (131) verify_param_count -> .

    SEPARATOR       shift and go to state 275
    RIGHTP          reduce using rule 131 (verify_param_count -> .)

    functioncall_prime             shift and go to state 351
    verify_param_count             shift and go to state 276

state 332

    (128) functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom . go_sub_quad
    (132) go_sub_quad -> .

    EOS             reduce using rule 132 (go_sub_quad -> .)
    MULTIPLY        reduce using rule 132 (go_sub_quad -> .)
    DIVIDE          reduce using rule 132 (go_sub_quad -> .)
    PLUS            reduce using rule 132 (go_sub_quad -> .)
    MINUS           reduce using rule 132 (go_sub_quad -> .)
    RIGHTB          reduce using rule 132 (go_sub_quad -> .)
    GREATER         reduce using rule 132 (go_sub_quad -> .)
    LESS            reduce using rule 132 (go_sub_quad -> .)
    EQUAL           reduce using rule 132 (go_sub_quad -> .)
    NOTEQUAL        reduce using rule 132 (go_sub_quad -> .)
    GREATEREQUAL    reduce using rule 132 (go_sub_quad -> .)
    LESSEQUAL       reduce using rule 132 (go_sub_quad -> .)
    AND             reduce using rule 132 (go_sub_quad -> .)
    OR              reduce using rule 132 (go_sub_quad -> .)
    RIGHTP          reduce using rule 132 (go_sub_quad -> .)
    SEPARATOR       reduce using rule 132 (go_sub_quad -> .)

    go_sub_quad                    shift and go to state 352

state 333

    (137) print_second_prime -> SEPARATOR expression print_quad print_second_prime .

    EOS             reduce using rule 137 (print_second_prime -> SEPARATOR expression print_quad print_second_prime .)


state 334

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE . goto_while_fill
    (125) goto_while_fill -> .

    ID              reduce using rule 125 (goto_while_fill -> .)
    PRINT           reduce using rule 125 (goto_while_fill -> .)
    WHILE           reduce using rule 125 (goto_while_fill -> .)
    DO              reduce using rule 125 (goto_while_fill -> .)
    IF              reduce using rule 125 (goto_while_fill -> .)
    JEDO            reduce using rule 125 (goto_while_fill -> .)
    READINPUT       reduce using rule 125 (goto_while_fill -> .)
    RIGHTBRACE      reduce using rule 125 (goto_while_fill -> .)
    RETURN          reduce using rule 125 (goto_while_fill -> .)
    ELSE            reduce using rule 125 (goto_while_fill -> .)
    ELSEIF          reduce using rule 125 (goto_while_fill -> .)

    goto_while_fill                shift and go to state 353

state 335

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP . gotov_quad
    (123) gotov_quad -> .

    ID              reduce using rule 123 (gotov_quad -> .)
    PRINT           reduce using rule 123 (gotov_quad -> .)
    WHILE           reduce using rule 123 (gotov_quad -> .)
    DO              reduce using rule 123 (gotov_quad -> .)
    IF              reduce using rule 123 (gotov_quad -> .)
    JEDO            reduce using rule 123 (gotov_quad -> .)
    READINPUT       reduce using rule 123 (gotov_quad -> .)
    RIGHTBRACE      reduce using rule 123 (gotov_quad -> .)
    RETURN          reduce using rule 123 (gotov_quad -> .)
    ELSE            reduce using rule 123 (gotov_quad -> .)
    ELSEIF          reduce using rule 123 (gotov_quad -> .)

    gotov_quad                     shift and go to state 354

state 336

    (115) condition_third_prime -> goto_if_fill ELSEIF condition_prime .

    ID              reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    PRINT           reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    WHILE           reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    DO              reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    IF              reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    JEDO            reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    READINPUT       reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    RIGHTBRACE      reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    RETURN          reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    ELSE            reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    ELSEIF          reduce using rule 115 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)


state 337

    (116) condition_third_prime -> ELSE goto_else condition_fourth_prime .

    ID              reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    PRINT           reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    WHILE           reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    DO              reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    IF              reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    JEDO            reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    READINPUT       reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    RIGHTBRACE      reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    RETURN          reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    ELSE            reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    ELSEIF          reduce using rule 116 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)


state 338

    (118) condition_fourth_prime -> statement . goto_if_fill
    (124) goto_if_fill -> .

    ID              reduce using rule 124 (goto_if_fill -> .)
    PRINT           reduce using rule 124 (goto_if_fill -> .)
    WHILE           reduce using rule 124 (goto_if_fill -> .)
    DO              reduce using rule 124 (goto_if_fill -> .)
    IF              reduce using rule 124 (goto_if_fill -> .)
    JEDO            reduce using rule 124 (goto_if_fill -> .)
    READINPUT       reduce using rule 124 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 124 (goto_if_fill -> .)
    RETURN          reduce using rule 124 (goto_if_fill -> .)
    ELSE            reduce using rule 124 (goto_if_fill -> .)
    ELSEIF          reduce using rule 124 (goto_if_fill -> .)

    goto_if_fill                   shift and go to state 355

state 339

    (119) condition_fourth_prime -> LEFTBRACE . body RIGHTBRACE goto_if_fill
    (31) body -> . statement body_prime
    (50) statement -> . assignment EOS
    (51) statement -> . print EOS
    (52) statement -> . functioncall EOS
    (53) statement -> . condition
    (54) statement -> . specialfunction EOS
    (55) statement -> . input EOS
    (99) assignment -> . ID push_id save_assignment_id assignment_second_prime EQUALS push_operator assignment_prime
    (134) print -> . PRINT LEFTP fake_bottom print_prime
    (126) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (109) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (110) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (111) condition -> . IF condition_prime
    (141) specialfunction -> . JEDO POINT specialfunction_prime
    (167) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 356
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 340

    (114) condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .

    ID              reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    PRINT           reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    WHILE           reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    DO              reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    IF              reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    JEDO            reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    READINPUT       reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    RIGHTBRACE      reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    RETURN          reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    ELSE            reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    ELSEIF          reduce using rule 114 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)


state 341

    (144) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad .

    EOS             reduce using rule 144 (specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad .)


state 342

    (145) specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad .

    EOS             reduce using rule 145 (specialfunction_prime -> DRAWDOT LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad .)


state 343

    (146) specialfunction_prime -> ARCH LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad .

    EOS             reduce using rule 146 (specialfunction_prime -> ARCH LEFTP exp SEPARATOR CSTS RIGHTP two_argument_string_quad .)


state 344

    (18) vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory . set_internal_dimension_one set_internal_dimension_two
    (25) set_internal_dimension_one -> .

    SEPARATOR       reduce using rule 25 (set_internal_dimension_one -> .)
    EOS             reduce using rule 25 (set_internal_dimension_one -> .)

    set_internal_dimension_one     shift and go to state 357

state 345

    (91) operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB . pop_fake_bottom operand_second_prime
    (83) pop_fake_bottom -> .

    LEFTB           reduce using rule 83 (pop_fake_bottom -> .)
    MULTIPLY        reduce using rule 83 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 83 (pop_fake_bottom -> .)
    PLUS            reduce using rule 83 (pop_fake_bottom -> .)
    MINUS           reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 83 (pop_fake_bottom -> .)
    GREATER         reduce using rule 83 (pop_fake_bottom -> .)
    LESS            reduce using rule 83 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 83 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 83 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 83 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 83 (pop_fake_bottom -> .)
    AND             reduce using rule 83 (pop_fake_bottom -> .)
    OR              reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 83 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 83 (pop_fake_bottom -> .)
    EOS             reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 358

state 346

    (42) modules_fifth_prime -> RETURN exp . return_quad EOS RIGHTBRACE endproc_quad print_me
    (48) return_quad -> .

    EOS             reduce using rule 48 (return_quad -> .)

    return_quad                    shift and go to state 359

state 347

    (43) modules_fifth_prime -> RIGHTBRACE endproc_quad . print_me
    (44) print_me -> .

    FUNCTION        reduce using rule 44 (print_me -> .)
    MAIN            reduce using rule 44 (print_me -> .)
    TYPEINT         reduce using rule 44 (print_me -> .)
    TYPEFLOAT       reduce using rule 44 (print_me -> .)
    TYPECHAR        reduce using rule 44 (print_me -> .)

    print_me                       shift and go to state 360

state 348

    (103) assignment_third_prime -> LEFTB . fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 361

state 349

    (102) assignment_second_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime .

    EQUALS          reduce using rule 102 (assignment_second_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom assignment_third_prime .)


state 350

    (104) assignment_third_prime -> quad_ver_one .

    EQUALS          reduce using rule 104 (assignment_third_prime -> quad_ver_one .)


state 351

    (127) functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .

    EOS             reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    MULTIPLY        reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    DIVIDE          reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    PLUS            reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    MINUS           reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    RIGHTB          reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    GREATER         reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    LESS            reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    EQUAL           reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    NOTEQUAL        reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    GREATEREQUAL    reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    LESSEQUAL       reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    AND             reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    OR              reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    RIGHTP          reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)
    SEPARATOR       reduce using rule 127 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)


state 352

    (128) functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .

    EOS             reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    MULTIPLY        reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    DIVIDE          reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    PLUS            reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    MINUS           reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    RIGHTB          reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    GREATER         reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    LESS            reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    EQUAL           reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    NOTEQUAL        reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    GREATEREQUAL    reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    LESSEQUAL       reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    AND             reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    OR              reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    RIGHTP          reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)
    SEPARATOR       reduce using rule 128 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom go_sub_quad .)


state 353

    (109) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .

    ID              reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    PRINT           reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    WHILE           reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    DO              reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    IF              reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    JEDO            reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    READINPUT       reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    RIGHTBRACE      reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    RETURN          reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    ELSE            reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    ELSEIF          reduce using rule 109 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)


state 354

    (110) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .

    ID              reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    PRINT           reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    WHILE           reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    DO              reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    IF              reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    JEDO            reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    READINPUT       reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    RIGHTBRACE      reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    RETURN          reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    ELSE            reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    ELSEIF          reduce using rule 110 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)


state 355

    (118) condition_fourth_prime -> statement goto_if_fill .

    ID              reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    PRINT           reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    WHILE           reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    DO              reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    IF              reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    JEDO            reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    READINPUT       reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    RIGHTBRACE      reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    RETURN          reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    ELSE            reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)
    ELSEIF          reduce using rule 118 (condition_fourth_prime -> statement goto_if_fill .)


state 356

    (119) condition_fourth_prime -> LEFTBRACE body . RIGHTBRACE goto_if_fill

    RIGHTBRACE      shift and go to state 362


state 357

    (18) vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one . set_internal_dimension_two
    (26) set_internal_dimension_two -> .

    SEPARATOR       reduce using rule 26 (set_internal_dimension_two -> .)
    EOS             reduce using rule 26 (set_internal_dimension_two -> .)

    set_internal_dimension_two     shift and go to state 363

state 358

    (91) operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom . operand_second_prime
    (93) operand_second_prime -> . LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
    (94) operand_second_prime -> . quad_ver_one
    (105) quad_ver_one -> .

    LEFTB           shift and go to state 364
    MULTIPLY        reduce using rule 105 (quad_ver_one -> .)
    DIVIDE          reduce using rule 105 (quad_ver_one -> .)
    PLUS            reduce using rule 105 (quad_ver_one -> .)
    MINUS           reduce using rule 105 (quad_ver_one -> .)
    RIGHTB          reduce using rule 105 (quad_ver_one -> .)
    GREATER         reduce using rule 105 (quad_ver_one -> .)
    LESS            reduce using rule 105 (quad_ver_one -> .)
    EQUAL           reduce using rule 105 (quad_ver_one -> .)
    NOTEQUAL        reduce using rule 105 (quad_ver_one -> .)
    GREATEREQUAL    reduce using rule 105 (quad_ver_one -> .)
    LESSEQUAL       reduce using rule 105 (quad_ver_one -> .)
    AND             reduce using rule 105 (quad_ver_one -> .)
    OR              reduce using rule 105 (quad_ver_one -> .)
    RIGHTP          reduce using rule 105 (quad_ver_one -> .)
    SEPARATOR       reduce using rule 105 (quad_ver_one -> .)
    EOS             reduce using rule 105 (quad_ver_one -> .)

    operand_second_prime           shift and go to state 365
    quad_ver_one                   shift and go to state 366

state 359

    (42) modules_fifth_prime -> RETURN exp return_quad . EOS RIGHTBRACE endproc_quad print_me

    EOS             shift and go to state 367


state 360

    (43) modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .

    FUNCTION        reduce using rule 43 (modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .)
    MAIN            reduce using rule 43 (modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .)
    TYPEINT         reduce using rule 43 (modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .)
    TYPEFLOAT       reduce using rule 43 (modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .)
    TYPECHAR        reduce using rule 43 (modules_fifth_prime -> RIGHTBRACE endproc_quad print_me .)


state 361

    (103) assignment_third_prime -> LEFTB fake_bottom . exp RIGHTB pop_fake_bottom quad_ver_two
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 368
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 362

    (119) condition_fourth_prime -> LEFTBRACE body RIGHTBRACE . goto_if_fill
    (124) goto_if_fill -> .

    ID              reduce using rule 124 (goto_if_fill -> .)
    PRINT           reduce using rule 124 (goto_if_fill -> .)
    WHILE           reduce using rule 124 (goto_if_fill -> .)
    DO              reduce using rule 124 (goto_if_fill -> .)
    IF              reduce using rule 124 (goto_if_fill -> .)
    JEDO            reduce using rule 124 (goto_if_fill -> .)
    READINPUT       reduce using rule 124 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 124 (goto_if_fill -> .)
    RETURN          reduce using rule 124 (goto_if_fill -> .)
    ELSE            reduce using rule 124 (goto_if_fill -> .)
    ELSEIF          reduce using rule 124 (goto_if_fill -> .)

    goto_if_fill                   shift and go to state 369

state 363

    (18) vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two .

    SEPARATOR       reduce using rule 18 (vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two .)
    EOS             reduce using rule 18 (vars_fifth_prime -> LEFTB exp RIGHTB second_dimension allocate_sequential_memory set_internal_dimension_one set_internal_dimension_two .)


state 364

    (93) operand_second_prime -> LEFTB . fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two
    (82) fake_bottom -> .

    LEFTP           reduce using rule 82 (fake_bottom -> .)
    CSTI            reduce using rule 82 (fake_bottom -> .)
    CSTF            reduce using rule 82 (fake_bottom -> .)
    CSTC            reduce using rule 82 (fake_bottom -> .)
    ID              reduce using rule 82 (fake_bottom -> .)
    FUNCTION        reduce using rule 82 (fake_bottom -> .)

    fake_bottom                    shift and go to state 370

state 365

    (91) operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .

    MULTIPLY        reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    DIVIDE          reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    PLUS            reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    MINUS           reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    RIGHTB          reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    GREATER         reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    LESS            reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    EQUAL           reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    NOTEQUAL        reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    GREATEREQUAL    reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    LESSEQUAL       reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    AND             reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    OR              reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    RIGHTP          reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    SEPARATOR       reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)
    EOS             reduce using rule 91 (operand_prime -> save_id_array LEFTB fake_bottom exp RIGHTB pop_fake_bottom operand_second_prime .)


state 366

    (94) operand_second_prime -> quad_ver_one .

    MULTIPLY        reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    DIVIDE          reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    PLUS            reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    MINUS           reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    RIGHTB          reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    GREATER         reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    LESS            reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    EQUAL           reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    NOTEQUAL        reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    GREATEREQUAL    reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    LESSEQUAL       reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    AND             reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    OR              reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    RIGHTP          reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    SEPARATOR       reduce using rule 94 (operand_second_prime -> quad_ver_one .)
    EOS             reduce using rule 94 (operand_second_prime -> quad_ver_one .)


state 367

    (42) modules_fifth_prime -> RETURN exp return_quad EOS . RIGHTBRACE endproc_quad print_me

    RIGHTBRACE      shift and go to state 371


state 368

    (103) assignment_third_prime -> LEFTB fake_bottom exp . RIGHTB pop_fake_bottom quad_ver_two

    RIGHTB          shift and go to state 372


state 369

    (119) condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .

    ID              reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    PRINT           reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    WHILE           reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    DO              reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    IF              reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    JEDO            reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    READINPUT       reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    RIGHTBRACE      reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    RETURN          reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    ELSE            reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    ELSEIF          reduce using rule 119 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)


state 370

    (93) operand_second_prime -> LEFTB fake_bottom . exp RIGHTB pop_fake_bottom quad_ver_two
    (70) exp -> . term eval_term exp_prime
    (75) term -> . factor eval_factor term_prime
    (80) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (81) factor -> . operand
    (84) operand -> . CSTI evaluate_operation_int
    (85) operand -> . CSTF evaluate_operation_float
    (86) operand -> . CSTC evaluate_operation_char
    (87) operand -> . ID push_id save_id_operand operand_prime
    (88) operand -> . FUNCTION functioncall

    LEFTP           shift and go to state 80
    CSTI            shift and go to state 82
    CSTF            shift and go to state 83
    CSTC            shift and go to state 84
    ID              shift and go to state 85
    FUNCTION        shift and go to state 86

    exp                            shift and go to state 373
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 371

    (42) modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE . endproc_quad print_me
    (49) endproc_quad -> .

    FUNCTION        reduce using rule 49 (endproc_quad -> .)
    MAIN            reduce using rule 49 (endproc_quad -> .)
    TYPEINT         reduce using rule 49 (endproc_quad -> .)
    TYPEFLOAT       reduce using rule 49 (endproc_quad -> .)
    TYPECHAR        reduce using rule 49 (endproc_quad -> .)

    endproc_quad                   shift and go to state 374

state 372

    (103) assignment_third_prime -> LEFTB fake_bottom exp RIGHTB . pop_fake_bottom quad_ver_two
    (83) pop_fake_bottom -> .

    EQUALS          reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 375

state 373

    (93) operand_second_prime -> LEFTB fake_bottom exp . RIGHTB pop_fake_bottom quad_ver_two

    RIGHTB          shift and go to state 376


state 374

    (42) modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad . print_me
    (44) print_me -> .

    FUNCTION        reduce using rule 44 (print_me -> .)
    MAIN            reduce using rule 44 (print_me -> .)
    TYPEINT         reduce using rule 44 (print_me -> .)
    TYPEFLOAT       reduce using rule 44 (print_me -> .)
    TYPECHAR        reduce using rule 44 (print_me -> .)

    print_me                       shift and go to state 377

state 375

    (103) assignment_third_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom . quad_ver_two
    (106) quad_ver_two -> .

    EQUALS          reduce using rule 106 (quad_ver_two -> .)

    quad_ver_two                   shift and go to state 378

state 376

    (93) operand_second_prime -> LEFTB fake_bottom exp RIGHTB . pop_fake_bottom quad_ver_two
    (83) pop_fake_bottom -> .

    MULTIPLY        reduce using rule 83 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 83 (pop_fake_bottom -> .)
    PLUS            reduce using rule 83 (pop_fake_bottom -> .)
    MINUS           reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 83 (pop_fake_bottom -> .)
    GREATER         reduce using rule 83 (pop_fake_bottom -> .)
    LESS            reduce using rule 83 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 83 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 83 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 83 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 83 (pop_fake_bottom -> .)
    AND             reduce using rule 83 (pop_fake_bottom -> .)
    OR              reduce using rule 83 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 83 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 83 (pop_fake_bottom -> .)
    EOS             reduce using rule 83 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 379

state 377

    (42) modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .

    FUNCTION        reduce using rule 42 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .)
    MAIN            reduce using rule 42 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .)
    TYPEINT         reduce using rule 42 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .)
    TYPEFLOAT       reduce using rule 42 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .)
    TYPECHAR        reduce using rule 42 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad print_me .)


state 378

    (103) assignment_third_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .

    EQUALS          reduce using rule 103 (assignment_third_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)


state 379

    (93) operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom . quad_ver_two
    (106) quad_ver_two -> .

    MULTIPLY        reduce using rule 106 (quad_ver_two -> .)
    DIVIDE          reduce using rule 106 (quad_ver_two -> .)
    PLUS            reduce using rule 106 (quad_ver_two -> .)
    MINUS           reduce using rule 106 (quad_ver_two -> .)
    RIGHTB          reduce using rule 106 (quad_ver_two -> .)
    GREATER         reduce using rule 106 (quad_ver_two -> .)
    LESS            reduce using rule 106 (quad_ver_two -> .)
    EQUAL           reduce using rule 106 (quad_ver_two -> .)
    NOTEQUAL        reduce using rule 106 (quad_ver_two -> .)
    GREATEREQUAL    reduce using rule 106 (quad_ver_two -> .)
    LESSEQUAL       reduce using rule 106 (quad_ver_two -> .)
    AND             reduce using rule 106 (quad_ver_two -> .)
    OR              reduce using rule 106 (quad_ver_two -> .)
    RIGHTP          reduce using rule 106 (quad_ver_two -> .)
    SEPARATOR       reduce using rule 106 (quad_ver_two -> .)
    EOS             reduce using rule 106 (quad_ver_two -> .)

    quad_ver_two                   shift and go to state 380

state 380

    (93) operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .

    MULTIPLY        reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    DIVIDE          reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    PLUS            reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    MINUS           reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    RIGHTB          reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    GREATER         reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    LESS            reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    EQUAL           reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    NOTEQUAL        reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    GREATEREQUAL    reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    LESSEQUAL       reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    AND             reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    OR              reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    RIGHTP          reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    SEPARATOR       reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)
    EOS             reduce using rule 93 (operand_second_prime -> LEFTB fake_bottom exp RIGHTB pop_fake_bottom quad_ver_two .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 232 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 282 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 320 resolved as shift
