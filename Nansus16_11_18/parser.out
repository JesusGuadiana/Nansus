Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PRGM ID main_quad add_program_function EOS program_prime
Rule 2     program_prime -> vars program_prime
Rule 3     program_prime -> program_second_prime
Rule 4     program_second_prime -> modules program_second_prime
Rule 5     program_second_prime -> MAIN program_third_prime
Rule 6     program_third_prime -> vars program_third_prime
Rule 7     program_third_prime -> body END
Rule 8     main_quad -> <empty>
Rule 9     add_program_function -> <empty>
Rule 10    vars -> type vars_prime vars_fourth_prime
Rule 11    vars_prime -> ID save_id vars_second_prime
Rule 12    save_id -> <empty>
Rule 13    vars_second_prime -> change_dimension LEFTB exp RIGHTB vars_third_prime
Rule 14    vars_second_prime -> <empty>
Rule 15    change_dimension -> <empty>
Rule 16    vars_third_prime -> LEFTB exp RIGHTB
Rule 17    vars_third_prime -> <empty>
Rule 18    vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime
Rule 19    vars_fourth_prime -> store_variable vars_fifth_prime
Rule 20    store_variable -> <empty>
Rule 21    vars_fifth_prime -> EOS
Rule 22    type -> TYPEINT
Rule 23    type -> TYPEFLOAT
Rule 24    type -> TYPECHAR
Rule 25    body -> statement EOS body_prime
Rule 26    body_prime -> body
Rule 27    body_prime -> <empty>
Rule 28    modules -> FUNCTION modules_prime ID LEFTP modules_second_prime
Rule 29    modules_prime -> type
Rule 30    modules_prime -> NOTYPE
Rule 31    modules_second_prime -> type ID modules_third_prime
Rule 32    modules_third_prime -> SEPARATOR modules_second_prime
Rule 33    modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime
Rule 34    modules_fourth_prime -> vars modules_fourth_prime
Rule 35    modules_fourth_prime -> body RIGHTBRACE
Rule 36    push_operand -> <empty>
Rule 37    push_operator -> <empty>
Rule 38    statement -> assignment
Rule 39    statement -> print
Rule 40    statement -> functioncall
Rule 41    statement -> condition
Rule 42    statement -> specialfunction
Rule 43    increment -> ID increment_prime
Rule 44    increment_prime -> EQUALS increment_second_prime
Rule 45    increment_prime -> INCREMENT
Rule 46    increment_second_prime -> CSTI PLUS ID
Rule 47    increment_second_prime -> ID PLUS CSTI
Rule 48    assignment -> ID assignment_prime EQUALS push_operator expression
Rule 49    assignment_prime -> <empty>
Rule 50    assignment_prime -> LEFTB exp RIGHTB assignment_second_prime
Rule 51    assignment_second_prime -> <empty>
Rule 52    assignment_second_prime -> LEFTB exp RIGHTB
Rule 53    eval_assignment -> <empty>
Rule 54    condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
Rule 55    condition -> FOR LEFTP assignment condition_prime
Rule 56    condition -> IF condition_second_prime
Rule 57    condition_prime -> SEPARATOR assignment condition_prime
Rule 58    condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE
Rule 59    condition_second_prime -> LEFTP compoundexp RIGHTP condition_third_prime
Rule 60    condition_third_prime -> statement condition_fourth_prime
Rule 61    condition_third_prime -> LEFTBRACE body RIGHTBRACE condition_fourth_prime
Rule 62    condition_fourth_prime -> ELSEIF condition_second_prime
Rule 63    condition_fourth_prime -> ELSE condition_fifth_prime
Rule 64    condition_fourth_prime -> <empty>
Rule 65    condition_fifth_prime -> statement
Rule 66    condition_fifth_prime -> LEFTB body RIGHTB
Rule 67    functioncall -> ID LEFTP fake_bottom exp functioncall_prime
Rule 68    functioncall_prime -> SEPARATOR exp functioncall_prime
Rule 69    functioncall_prime -> RIGHTP pop_fake_bottom
Rule 70    expression -> exp expression_prime
Rule 71    expression_prime -> GREATER exp expression_prime
Rule 72    expression_prime -> LESS exp expression_prime
Rule 73    expression_prime -> EQUAL exp expression_prime
Rule 74    expression_prime -> NOTEQUAL exp expression_prime
Rule 75    expression_prime -> GREATEREQUAL exp expression_prime
Rule 76    expression_prime -> LESSEQUAL exp expression_prime
Rule 77    expression_prime -> <empty>
Rule 78    print -> PRINT LEFTP print_prime
Rule 79    print_prime -> RIGHTP
Rule 80    print_prime -> expression RIGHTP
Rule 81    exp -> term exp_prime
Rule 82    exp_prime -> PLUS term exp_prime
Rule 83    exp_prime -> MINUS term exp_prime
Rule 84    exp_prime -> <empty>
Rule 85    operand -> CSTI evaluate_operation_int
Rule 86    operand -> CSTF evaluate_operation_float
Rule 87    operand -> ID operand_prime
Rule 88    evaluate_operation_int -> <empty>
Rule 89    evaluate_operation_float -> <empty>
Rule 90    operand_prime -> LEFTB exp RIGHTB operand_second_prime
Rule 91    operand_prime -> LEFTP exp operand_third_prime
Rule 92    operand_prime -> <empty>
Rule 93    operand_second_prime -> <empty>
Rule 94    operand_second_prime -> LEFTB exp RIGHTB
Rule 95    operand_third_prime -> SEPARATOR exp operand_third_prime
Rule 96    operand_third_prime -> RIGHTP
Rule 97    term -> factor term_prime
Rule 98    term_prime -> MULTIPLY factor term_prime
Rule 99    term_prime -> DIVIDE factor term_prime
Rule 100   term_prime -> <empty>
Rule 101   factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom
Rule 102   factor -> operand
Rule 103   factor -> PLUS operand
Rule 104   factor -> MINUS operand
Rule 105   fake_bottom -> <empty>
Rule 106   pop_fake_bottom -> <empty>
Rule 107   specialfunction -> JEDO POINT specialfunction_prime
Rule 108   specialfunction_prime -> CIRCLE LEFTP exp RIGHTP
Rule 109   specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp RIGHTP
Rule 110   specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP
Rule 111   specialfunction_prime -> FORWARD LEFTP exp RIGHTP
Rule 112   specialfunction_prime -> BACK LEFTP exp RIGHTP
Rule 113   specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP
Rule 114   specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP
Rule 115   specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP
Rule 116   specialfunction_prime -> ARCH LEFTP exp RIGHTP
Rule 117   specialfunction_prime -> LINE LEFTP exp SEPARATOR exp RIGHTP
Rule 118   specialfunction_prime -> THICKNESS LEFTP exp RIGHTP
Rule 119   compoundexp -> expression compoundexp_prime
Rule 120   compoundexp_prime -> AND compoundexp
Rule 121   compoundexp_prime -> OR compoundexp
Rule 122   compoundexp_prime -> <empty>

Terminals, with rules where they appear

AND                  : 120
ARCH                 : 116
BACK                 : 112
CIRCLE               : 108
COLOR                : 115
CSTF                 : 86
CSTI                 : 46 47 85
DIVIDE               : 99
ELSE                 : 63
ELSEIF               : 62
END                  : 7
EOS                  : 1 21 25 58 58
EQUAL                : 73
EQUALS               : 44 48
FOR                  : 55
FORWARD              : 111
FUNCTION             : 28
GREATER              : 71
GREATEREQUAL         : 75
ID                   : 1 11 28 31 43 46 47 48 67 87
IF                   : 56
INCREMENT            : 45
JEDO                 : 107
LEFTB                : 13 16 50 52 66 90 94
LEFTBRACE            : 33 54 58 61
LEFTP                : 28 54 55 59 67 78 91 101 108 109 110 111 112 113 114 115 116 117 118
LESS                 : 72
LESSEQUAL            : 76
LINE                 : 117
MAIN                 : 5
MINUS                : 83 104
MULTIPLY             : 98
NOTEQUAL             : 74
NOTYPE               : 30
OR                   : 121
PLUS                 : 46 47 82 103
POINT                : 107
PRGM                 : 1
PRINT                : 78
RECTANGLE            : 110
RIGHTB               : 13 16 50 52 66 90 94
RIGHTBRACE           : 35 54 58 61
RIGHTP               : 33 54 58 59 69 79 80 96 101 108 109 110 111 112 113 114 115 116 117 118
SEPARATOR            : 18 32 57 68 95 109 110 115 115 117
SQUARE               : 109
THICKNESS            : 118
TURNLEFT             : 114
TURNRIGHT            : 113
TYPECHAR             : 24
TYPEFLOAT            : 23
TYPEINT              : 22
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

add_program_function : 1
assignment           : 38 55 57
assignment_prime     : 48
assignment_second_prime : 50
body                 : 7 26 35 54 58 61 66
body_prime           : 25
change_dimension     : 13
compoundexp          : 54 58 59 120 121
compoundexp_prime    : 119
condition            : 41
condition_fifth_prime : 63
condition_fourth_prime : 60 61
condition_prime      : 55 57
condition_second_prime : 56 62
condition_third_prime : 59
eval_assignment      : 
evaluate_operation_float : 86
evaluate_operation_int : 85
exp                  : 13 16 50 52 67 68 70 71 72 73 74 75 76 90 91 94 95 108 109 109 110 110 111 112 113 114 115 115 115 116 117 117 118
exp_prime            : 81 82 83
expression           : 48 80 101 119
expression_prime     : 70 71 72 73 74 75 76
factor               : 97 98 99
fake_bottom          : 67 101
functioncall         : 40
functioncall_prime   : 67 68
increment            : 58
increment_prime      : 43
increment_second_prime : 44
main_quad            : 1
modules              : 4
modules_fourth_prime : 33 34
modules_prime        : 28
modules_second_prime : 28 32
modules_third_prime  : 31
operand              : 102 103 104
operand_prime        : 87
operand_second_prime : 90
operand_third_prime  : 91 95
pop_fake_bottom      : 69 101
print                : 39
print_prime          : 78
program              : 0
program_prime        : 1 2
program_second_prime : 3 4
program_third_prime  : 5 6
push_operand         : 
push_operator        : 48
save_id              : 11
specialfunction      : 42
specialfunction_prime : 107
statement            : 25 60 65
store_variable       : 18 19
term                 : 81 82 83
term_prime           : 97 98 99
type                 : 10 29 31
vars                 : 2 6 34
vars_fifth_prime     : 19
vars_fourth_prime    : 10 18
vars_prime           : 10 18
vars_second_prime    : 11
vars_third_prime     : 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRGM ID main_quad add_program_function EOS program_prime

    PRGM            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRGM . ID main_quad add_program_function EOS program_prime

    ID              shift and go to state 3


state 3

    (1) program -> PRGM ID . main_quad add_program_function EOS program_prime
    (8) main_quad -> .

    EOS             reduce using rule 8 (main_quad -> .)

    main_quad                      shift and go to state 4

state 4

    (1) program -> PRGM ID main_quad . add_program_function EOS program_prime
    (9) add_program_function -> .

    EOS             reduce using rule 9 (add_program_function -> .)

    add_program_function           shift and go to state 5

state 5

    (1) program -> PRGM ID main_quad add_program_function . EOS program_prime

    EOS             shift and go to state 6


state 6

    (1) program -> PRGM ID main_quad add_program_function EOS . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . program_second_prime
    (10) vars -> . type vars_prime vars_fourth_prime
    (4) program_second_prime -> . modules program_second_prime
    (5) program_second_prime -> . MAIN program_third_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (28) modules -> . FUNCTION modules_prime ID LEFTP modules_second_prime

    MAIN            shift and go to state 12
    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    FUNCTION        shift and go to state 16

    program_prime                  shift and go to state 7
    vars                           shift and go to state 8
    program_second_prime           shift and go to state 9
    type                           shift and go to state 10
    modules                        shift and go to state 11

state 7

    (1) program -> PRGM ID main_quad add_program_function EOS program_prime .

    $end            reduce using rule 1 (program -> PRGM ID main_quad add_program_function EOS program_prime .)


state 8

    (2) program_prime -> vars . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . program_second_prime
    (10) vars -> . type vars_prime vars_fourth_prime
    (4) program_second_prime -> . modules program_second_prime
    (5) program_second_prime -> . MAIN program_third_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (28) modules -> . FUNCTION modules_prime ID LEFTP modules_second_prime

    MAIN            shift and go to state 12
    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    FUNCTION        shift and go to state 16

    vars                           shift and go to state 8
    program_prime                  shift and go to state 17
    program_second_prime           shift and go to state 9
    type                           shift and go to state 10
    modules                        shift and go to state 11

state 9

    (3) program_prime -> program_second_prime .

    $end            reduce using rule 3 (program_prime -> program_second_prime .)


state 10

    (10) vars -> type . vars_prime vars_fourth_prime
    (11) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 19

    vars_prime                     shift and go to state 18

state 11

    (4) program_second_prime -> modules . program_second_prime
    (4) program_second_prime -> . modules program_second_prime
    (5) program_second_prime -> . MAIN program_third_prime
    (28) modules -> . FUNCTION modules_prime ID LEFTP modules_second_prime

    MAIN            shift and go to state 12
    FUNCTION        shift and go to state 16

    modules                        shift and go to state 11
    program_second_prime           shift and go to state 20

state 12

    (5) program_second_prime -> MAIN . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body END
    (10) vars -> . type vars_prime vars_fourth_prime
    (25) body -> . statement EOS body_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    program_third_prime            shift and go to state 21
    vars                           shift and go to state 22
    body                           shift and go to state 23
    type                           shift and go to state 10
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 13

    (22) type -> TYPEINT .

    ID              reduce using rule 22 (type -> TYPEINT .)


state 14

    (23) type -> TYPEFLOAT .

    ID              reduce using rule 23 (type -> TYPEFLOAT .)


state 15

    (24) type -> TYPECHAR .

    ID              reduce using rule 24 (type -> TYPECHAR .)


state 16

    (28) modules -> FUNCTION . modules_prime ID LEFTP modules_second_prime
    (29) modules_prime -> . type
    (30) modules_prime -> . NOTYPE
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR

    NOTYPE          shift and go to state 38
    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15

    modules_prime                  shift and go to state 36
    type                           shift and go to state 37

state 17

    (2) program_prime -> vars program_prime .

    $end            reduce using rule 2 (program_prime -> vars program_prime .)


state 18

    (10) vars -> type vars_prime . vars_fourth_prime
    (18) vars_fourth_prime -> . SEPARATOR store_variable vars_prime vars_fourth_prime
    (19) vars_fourth_prime -> . store_variable vars_fifth_prime
    (20) store_variable -> .

    SEPARATOR       shift and go to state 40
    EOS             reduce using rule 20 (store_variable -> .)

    vars_fourth_prime              shift and go to state 39
    store_variable                 shift and go to state 41

state 19

    (11) vars_prime -> ID . save_id vars_second_prime
    (12) save_id -> .

    LEFTB           reduce using rule 12 (save_id -> .)
    SEPARATOR       reduce using rule 12 (save_id -> .)
    EOS             reduce using rule 12 (save_id -> .)

    save_id                        shift and go to state 42

state 20

    (4) program_second_prime -> modules program_second_prime .

    $end            reduce using rule 4 (program_second_prime -> modules program_second_prime .)


state 21

    (5) program_second_prime -> MAIN program_third_prime .

    $end            reduce using rule 5 (program_second_prime -> MAIN program_third_prime .)


state 22

    (6) program_third_prime -> vars . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body END
    (10) vars -> . type vars_prime vars_fourth_prime
    (25) body -> . statement EOS body_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    vars                           shift and go to state 22
    program_third_prime            shift and go to state 43
    body                           shift and go to state 23
    type                           shift and go to state 10
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 23

    (7) program_third_prime -> body . END

    END             shift and go to state 44


state 24

    (25) body -> statement . EOS body_prime

    EOS             shift and go to state 45


state 25

    (38) statement -> assignment .

    EOS             reduce using rule 38 (statement -> assignment .)
    ELSEIF          reduce using rule 38 (statement -> assignment .)
    ELSE            reduce using rule 38 (statement -> assignment .)


state 26

    (39) statement -> print .

    EOS             reduce using rule 39 (statement -> print .)
    ELSEIF          reduce using rule 39 (statement -> print .)
    ELSE            reduce using rule 39 (statement -> print .)


state 27

    (40) statement -> functioncall .

    EOS             reduce using rule 40 (statement -> functioncall .)
    ELSEIF          reduce using rule 40 (statement -> functioncall .)
    ELSE            reduce using rule 40 (statement -> functioncall .)


state 28

    (41) statement -> condition .

    EOS             reduce using rule 41 (statement -> condition .)
    ELSEIF          reduce using rule 41 (statement -> condition .)
    ELSE            reduce using rule 41 (statement -> condition .)


state 29

    (42) statement -> specialfunction .

    EOS             reduce using rule 42 (statement -> specialfunction .)
    ELSEIF          reduce using rule 42 (statement -> specialfunction .)
    ELSE            reduce using rule 42 (statement -> specialfunction .)


state 30

    (48) assignment -> ID . assignment_prime EQUALS push_operator expression
    (67) functioncall -> ID . LEFTP fake_bottom exp functioncall_prime
    (49) assignment_prime -> .
    (50) assignment_prime -> . LEFTB exp RIGHTB assignment_second_prime

    LEFTP           shift and go to state 47
    EQUALS          reduce using rule 49 (assignment_prime -> .)
    LEFTB           shift and go to state 48

    assignment_prime               shift and go to state 46

state 31

    (78) print -> PRINT . LEFTP print_prime

    LEFTP           shift and go to state 49


state 32

    (54) condition -> WHILE . LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE

    LEFTP           shift and go to state 50


state 33

    (55) condition -> FOR . LEFTP assignment condition_prime

    LEFTP           shift and go to state 51


state 34

    (56) condition -> IF . condition_second_prime
    (59) condition_second_prime -> . LEFTP compoundexp RIGHTP condition_third_prime

    LEFTP           shift and go to state 53

    condition_second_prime         shift and go to state 52

state 35

    (107) specialfunction -> JEDO . POINT specialfunction_prime

    POINT           shift and go to state 54


state 36

    (28) modules -> FUNCTION modules_prime . ID LEFTP modules_second_prime

    ID              shift and go to state 55


state 37

    (29) modules_prime -> type .

    ID              reduce using rule 29 (modules_prime -> type .)


state 38

    (30) modules_prime -> NOTYPE .

    ID              reduce using rule 30 (modules_prime -> NOTYPE .)


state 39

    (10) vars -> type vars_prime vars_fourth_prime .

    MAIN            reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    TYPEINT         reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    TYPEFLOAT       reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    TYPECHAR        reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    FUNCTION        reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    ID              reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    PRINT           reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    WHILE           reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    FOR             reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    IF              reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)
    JEDO            reduce using rule 10 (vars -> type vars_prime vars_fourth_prime .)


state 40

    (18) vars_fourth_prime -> SEPARATOR . store_variable vars_prime vars_fourth_prime
    (20) store_variable -> .

    ID              reduce using rule 20 (store_variable -> .)

    store_variable                 shift and go to state 56

state 41

    (19) vars_fourth_prime -> store_variable . vars_fifth_prime
    (21) vars_fifth_prime -> . EOS

    EOS             shift and go to state 58

    vars_fifth_prime               shift and go to state 57

state 42

    (11) vars_prime -> ID save_id . vars_second_prime
    (13) vars_second_prime -> . change_dimension LEFTB exp RIGHTB vars_third_prime
    (14) vars_second_prime -> .
    (15) change_dimension -> .

    SEPARATOR       reduce using rule 14 (vars_second_prime -> .)
    EOS             reduce using rule 14 (vars_second_prime -> .)
    LEFTB           reduce using rule 15 (change_dimension -> .)

    vars_second_prime              shift and go to state 59
    change_dimension               shift and go to state 60

state 43

    (6) program_third_prime -> vars program_third_prime .

    $end            reduce using rule 6 (program_third_prime -> vars program_third_prime .)


state 44

    (7) program_third_prime -> body END .

    $end            reduce using rule 7 (program_third_prime -> body END .)


state 45

    (25) body -> statement EOS . body_prime
    (26) body_prime -> . body
    (27) body_prime -> .
    (25) body -> . statement EOS body_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    END             reduce using rule 27 (body_prime -> .)
    RIGHTBRACE      reduce using rule 27 (body_prime -> .)
    RIGHTB          reduce using rule 27 (body_prime -> .)
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    statement                      shift and go to state 24
    body_prime                     shift and go to state 61
    body                           shift and go to state 62
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 46

    (48) assignment -> ID assignment_prime . EQUALS push_operator expression

    EQUALS          shift and go to state 63


state 47

    (67) functioncall -> ID LEFTP . fake_bottom exp functioncall_prime
    (105) fake_bottom -> .

    LEFTP           reduce using rule 105 (fake_bottom -> .)
    PLUS            reduce using rule 105 (fake_bottom -> .)
    MINUS           reduce using rule 105 (fake_bottom -> .)
    CSTI            reduce using rule 105 (fake_bottom -> .)
    CSTF            reduce using rule 105 (fake_bottom -> .)
    ID              reduce using rule 105 (fake_bottom -> .)

    fake_bottom                    shift and go to state 64

state 48

    (50) assignment_prime -> LEFTB . exp RIGHTB assignment_second_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 65
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 49

    (78) print -> PRINT LEFTP . print_prime
    (79) print_prime -> . RIGHTP
    (80) print_prime -> . expression RIGHTP
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    RIGHTP          shift and go to state 76
    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    print_prime                    shift and go to state 75
    expression                     shift and go to state 77
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 50

    (54) condition -> WHILE LEFTP . compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (119) compoundexp -> . expression compoundexp_prime
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    compoundexp                    shift and go to state 79
    expression                     shift and go to state 80
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 51

    (55) condition -> FOR LEFTP . assignment condition_prime
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression

    ID              shift and go to state 82

    assignment                     shift and go to state 81

state 52

    (56) condition -> IF condition_second_prime .

    EOS             reduce using rule 56 (condition -> IF condition_second_prime .)
    ELSEIF          reduce using rule 56 (condition -> IF condition_second_prime .)
    ELSE            reduce using rule 56 (condition -> IF condition_second_prime .)


state 53

    (59) condition_second_prime -> LEFTP . compoundexp RIGHTP condition_third_prime
    (119) compoundexp -> . expression compoundexp_prime
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    compoundexp                    shift and go to state 83
    expression                     shift and go to state 80
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 54

    (107) specialfunction -> JEDO POINT . specialfunction_prime
    (108) specialfunction_prime -> . CIRCLE LEFTP exp RIGHTP
    (109) specialfunction_prime -> . SQUARE LEFTP exp SEPARATOR exp RIGHTP
    (110) specialfunction_prime -> . RECTANGLE LEFTP exp SEPARATOR exp RIGHTP
    (111) specialfunction_prime -> . FORWARD LEFTP exp RIGHTP
    (112) specialfunction_prime -> . BACK LEFTP exp RIGHTP
    (113) specialfunction_prime -> . TURNRIGHT LEFTP exp RIGHTP
    (114) specialfunction_prime -> . TURNLEFT LEFTP exp RIGHTP
    (115) specialfunction_prime -> . COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP
    (116) specialfunction_prime -> . ARCH LEFTP exp RIGHTP
    (117) specialfunction_prime -> . LINE LEFTP exp SEPARATOR exp RIGHTP
    (118) specialfunction_prime -> . THICKNESS LEFTP exp RIGHTP

    CIRCLE          shift and go to state 85
    SQUARE          shift and go to state 86
    RECTANGLE       shift and go to state 87
    FORWARD         shift and go to state 88
    BACK            shift and go to state 89
    TURNRIGHT       shift and go to state 90
    TURNLEFT        shift and go to state 91
    COLOR           shift and go to state 92
    ARCH            shift and go to state 93
    LINE            shift and go to state 94
    THICKNESS       shift and go to state 95

    specialfunction_prime          shift and go to state 84

state 55

    (28) modules -> FUNCTION modules_prime ID . LEFTP modules_second_prime

    LEFTP           shift and go to state 96


state 56

    (18) vars_fourth_prime -> SEPARATOR store_variable . vars_prime vars_fourth_prime
    (11) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 19

    vars_prime                     shift and go to state 97

state 57

    (19) vars_fourth_prime -> store_variable vars_fifth_prime .

    MAIN            reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPEINT         reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPEFLOAT       reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPECHAR        reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    FUNCTION        reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    ID              reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    PRINT           reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    WHILE           reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    FOR             reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    IF              reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    JEDO            reduce using rule 19 (vars_fourth_prime -> store_variable vars_fifth_prime .)


state 58

    (21) vars_fifth_prime -> EOS .

    MAIN            reduce using rule 21 (vars_fifth_prime -> EOS .)
    TYPEINT         reduce using rule 21 (vars_fifth_prime -> EOS .)
    TYPEFLOAT       reduce using rule 21 (vars_fifth_prime -> EOS .)
    TYPECHAR        reduce using rule 21 (vars_fifth_prime -> EOS .)
    FUNCTION        reduce using rule 21 (vars_fifth_prime -> EOS .)
    ID              reduce using rule 21 (vars_fifth_prime -> EOS .)
    PRINT           reduce using rule 21 (vars_fifth_prime -> EOS .)
    WHILE           reduce using rule 21 (vars_fifth_prime -> EOS .)
    FOR             reduce using rule 21 (vars_fifth_prime -> EOS .)
    IF              reduce using rule 21 (vars_fifth_prime -> EOS .)
    JEDO            reduce using rule 21 (vars_fifth_prime -> EOS .)


state 59

    (11) vars_prime -> ID save_id vars_second_prime .

    SEPARATOR       reduce using rule 11 (vars_prime -> ID save_id vars_second_prime .)
    EOS             reduce using rule 11 (vars_prime -> ID save_id vars_second_prime .)


state 60

    (13) vars_second_prime -> change_dimension . LEFTB exp RIGHTB vars_third_prime

    LEFTB           shift and go to state 98


state 61

    (25) body -> statement EOS body_prime .

    END             reduce using rule 25 (body -> statement EOS body_prime .)
    RIGHTBRACE      reduce using rule 25 (body -> statement EOS body_prime .)
    RIGHTB          reduce using rule 25 (body -> statement EOS body_prime .)


state 62

    (26) body_prime -> body .

    END             reduce using rule 26 (body_prime -> body .)
    RIGHTBRACE      reduce using rule 26 (body_prime -> body .)
    RIGHTB          reduce using rule 26 (body_prime -> body .)


state 63

    (48) assignment -> ID assignment_prime EQUALS . push_operator expression
    (37) push_operator -> .

    LEFTP           reduce using rule 37 (push_operator -> .)
    PLUS            reduce using rule 37 (push_operator -> .)
    MINUS           reduce using rule 37 (push_operator -> .)
    CSTI            reduce using rule 37 (push_operator -> .)
    CSTF            reduce using rule 37 (push_operator -> .)
    ID              reduce using rule 37 (push_operator -> .)

    push_operator                  shift and go to state 99

state 64

    (67) functioncall -> ID LEFTP fake_bottom . exp functioncall_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 100
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 65

    (50) assignment_prime -> LEFTB exp . RIGHTB assignment_second_prime

    RIGHTB          shift and go to state 101


state 66

    (81) exp -> term . exp_prime
    (82) exp_prime -> . PLUS term exp_prime
    (83) exp_prime -> . MINUS term exp_prime
    (84) exp_prime -> .

    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    RIGHTB          reduce using rule 84 (exp_prime -> .)
    GREATER         reduce using rule 84 (exp_prime -> .)
    LESS            reduce using rule 84 (exp_prime -> .)
    EQUAL           reduce using rule 84 (exp_prime -> .)
    NOTEQUAL        reduce using rule 84 (exp_prime -> .)
    GREATEREQUAL    reduce using rule 84 (exp_prime -> .)
    LESSEQUAL       reduce using rule 84 (exp_prime -> .)
    RIGHTP          reduce using rule 84 (exp_prime -> .)
    AND             reduce using rule 84 (exp_prime -> .)
    OR              reduce using rule 84 (exp_prime -> .)
    SEPARATOR       reduce using rule 84 (exp_prime -> .)
    EOS             reduce using rule 84 (exp_prime -> .)
    ELSEIF          reduce using rule 84 (exp_prime -> .)
    ELSE            reduce using rule 84 (exp_prime -> .)

    exp_prime                      shift and go to state 102

state 67

    (97) term -> factor . term_prime
    (98) term_prime -> . MULTIPLY factor term_prime
    (99) term_prime -> . DIVIDE factor term_prime
    (100) term_prime -> .

    MULTIPLY        shift and go to state 106
    DIVIDE          shift and go to state 107
    PLUS            reduce using rule 100 (term_prime -> .)
    MINUS           reduce using rule 100 (term_prime -> .)
    RIGHTB          reduce using rule 100 (term_prime -> .)
    GREATER         reduce using rule 100 (term_prime -> .)
    LESS            reduce using rule 100 (term_prime -> .)
    EQUAL           reduce using rule 100 (term_prime -> .)
    NOTEQUAL        reduce using rule 100 (term_prime -> .)
    GREATEREQUAL    reduce using rule 100 (term_prime -> .)
    LESSEQUAL       reduce using rule 100 (term_prime -> .)
    RIGHTP          reduce using rule 100 (term_prime -> .)
    AND             reduce using rule 100 (term_prime -> .)
    OR              reduce using rule 100 (term_prime -> .)
    SEPARATOR       reduce using rule 100 (term_prime -> .)
    EOS             reduce using rule 100 (term_prime -> .)
    ELSEIF          reduce using rule 100 (term_prime -> .)
    ELSE            reduce using rule 100 (term_prime -> .)

    term_prime                     shift and go to state 105

state 68

    (101) factor -> LEFTP . fake_bottom expression RIGHTP pop_fake_bottom
    (105) fake_bottom -> .

    LEFTP           reduce using rule 105 (fake_bottom -> .)
    PLUS            reduce using rule 105 (fake_bottom -> .)
    MINUS           reduce using rule 105 (fake_bottom -> .)
    CSTI            reduce using rule 105 (fake_bottom -> .)
    CSTF            reduce using rule 105 (fake_bottom -> .)
    ID              reduce using rule 105 (fake_bottom -> .)

    fake_bottom                    shift and go to state 108

state 69

    (102) factor -> operand .

    MULTIPLY        reduce using rule 102 (factor -> operand .)
    DIVIDE          reduce using rule 102 (factor -> operand .)
    PLUS            reduce using rule 102 (factor -> operand .)
    MINUS           reduce using rule 102 (factor -> operand .)
    RIGHTB          reduce using rule 102 (factor -> operand .)
    GREATER         reduce using rule 102 (factor -> operand .)
    LESS            reduce using rule 102 (factor -> operand .)
    EQUAL           reduce using rule 102 (factor -> operand .)
    NOTEQUAL        reduce using rule 102 (factor -> operand .)
    GREATEREQUAL    reduce using rule 102 (factor -> operand .)
    LESSEQUAL       reduce using rule 102 (factor -> operand .)
    RIGHTP          reduce using rule 102 (factor -> operand .)
    AND             reduce using rule 102 (factor -> operand .)
    OR              reduce using rule 102 (factor -> operand .)
    SEPARATOR       reduce using rule 102 (factor -> operand .)
    EOS             reduce using rule 102 (factor -> operand .)
    ELSEIF          reduce using rule 102 (factor -> operand .)
    ELSE            reduce using rule 102 (factor -> operand .)


state 70

    (103) factor -> PLUS . operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    operand                        shift and go to state 109

state 71

    (104) factor -> MINUS . operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    operand                        shift and go to state 110

state 72

    (85) operand -> CSTI . evaluate_operation_int
    (88) evaluate_operation_int -> .

    MULTIPLY        reduce using rule 88 (evaluate_operation_int -> .)
    DIVIDE          reduce using rule 88 (evaluate_operation_int -> .)
    PLUS            reduce using rule 88 (evaluate_operation_int -> .)
    MINUS           reduce using rule 88 (evaluate_operation_int -> .)
    RIGHTB          reduce using rule 88 (evaluate_operation_int -> .)
    GREATER         reduce using rule 88 (evaluate_operation_int -> .)
    LESS            reduce using rule 88 (evaluate_operation_int -> .)
    EQUAL           reduce using rule 88 (evaluate_operation_int -> .)
    NOTEQUAL        reduce using rule 88 (evaluate_operation_int -> .)
    GREATEREQUAL    reduce using rule 88 (evaluate_operation_int -> .)
    LESSEQUAL       reduce using rule 88 (evaluate_operation_int -> .)
    RIGHTP          reduce using rule 88 (evaluate_operation_int -> .)
    AND             reduce using rule 88 (evaluate_operation_int -> .)
    OR              reduce using rule 88 (evaluate_operation_int -> .)
    SEPARATOR       reduce using rule 88 (evaluate_operation_int -> .)
    EOS             reduce using rule 88 (evaluate_operation_int -> .)
    ELSEIF          reduce using rule 88 (evaluate_operation_int -> .)
    ELSE            reduce using rule 88 (evaluate_operation_int -> .)

    evaluate_operation_int         shift and go to state 111

state 73

    (86) operand -> CSTF . evaluate_operation_float
    (89) evaluate_operation_float -> .

    MULTIPLY        reduce using rule 89 (evaluate_operation_float -> .)
    DIVIDE          reduce using rule 89 (evaluate_operation_float -> .)
    PLUS            reduce using rule 89 (evaluate_operation_float -> .)
    MINUS           reduce using rule 89 (evaluate_operation_float -> .)
    RIGHTB          reduce using rule 89 (evaluate_operation_float -> .)
    GREATER         reduce using rule 89 (evaluate_operation_float -> .)
    LESS            reduce using rule 89 (evaluate_operation_float -> .)
    EQUAL           reduce using rule 89 (evaluate_operation_float -> .)
    NOTEQUAL        reduce using rule 89 (evaluate_operation_float -> .)
    GREATEREQUAL    reduce using rule 89 (evaluate_operation_float -> .)
    LESSEQUAL       reduce using rule 89 (evaluate_operation_float -> .)
    RIGHTP          reduce using rule 89 (evaluate_operation_float -> .)
    AND             reduce using rule 89 (evaluate_operation_float -> .)
    OR              reduce using rule 89 (evaluate_operation_float -> .)
    SEPARATOR       reduce using rule 89 (evaluate_operation_float -> .)
    EOS             reduce using rule 89 (evaluate_operation_float -> .)
    ELSEIF          reduce using rule 89 (evaluate_operation_float -> .)
    ELSE            reduce using rule 89 (evaluate_operation_float -> .)

    evaluate_operation_float       shift and go to state 112

state 74

    (87) operand -> ID . operand_prime
    (90) operand_prime -> . LEFTB exp RIGHTB operand_second_prime
    (91) operand_prime -> . LEFTP exp operand_third_prime
    (92) operand_prime -> .

    LEFTB           shift and go to state 114
    LEFTP           shift and go to state 115
    MULTIPLY        reduce using rule 92 (operand_prime -> .)
    DIVIDE          reduce using rule 92 (operand_prime -> .)
    PLUS            reduce using rule 92 (operand_prime -> .)
    MINUS           reduce using rule 92 (operand_prime -> .)
    RIGHTB          reduce using rule 92 (operand_prime -> .)
    GREATER         reduce using rule 92 (operand_prime -> .)
    LESS            reduce using rule 92 (operand_prime -> .)
    EQUAL           reduce using rule 92 (operand_prime -> .)
    NOTEQUAL        reduce using rule 92 (operand_prime -> .)
    GREATEREQUAL    reduce using rule 92 (operand_prime -> .)
    LESSEQUAL       reduce using rule 92 (operand_prime -> .)
    RIGHTP          reduce using rule 92 (operand_prime -> .)
    AND             reduce using rule 92 (operand_prime -> .)
    OR              reduce using rule 92 (operand_prime -> .)
    SEPARATOR       reduce using rule 92 (operand_prime -> .)
    EOS             reduce using rule 92 (operand_prime -> .)
    ELSEIF          reduce using rule 92 (operand_prime -> .)
    ELSE            reduce using rule 92 (operand_prime -> .)

    operand_prime                  shift and go to state 113

state 75

    (78) print -> PRINT LEFTP print_prime .

    EOS             reduce using rule 78 (print -> PRINT LEFTP print_prime .)
    ELSEIF          reduce using rule 78 (print -> PRINT LEFTP print_prime .)
    ELSE            reduce using rule 78 (print -> PRINT LEFTP print_prime .)


state 76

    (79) print_prime -> RIGHTP .

    EOS             reduce using rule 79 (print_prime -> RIGHTP .)
    ELSEIF          reduce using rule 79 (print_prime -> RIGHTP .)
    ELSE            reduce using rule 79 (print_prime -> RIGHTP .)


state 77

    (80) print_prime -> expression . RIGHTP

    RIGHTP          shift and go to state 116


state 78

    (70) expression -> exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 117

state 79

    (54) condition -> WHILE LEFTP compoundexp . RIGHTP LEFTBRACE body RIGHTBRACE

    RIGHTP          shift and go to state 124


state 80

    (119) compoundexp -> expression . compoundexp_prime
    (120) compoundexp_prime -> . AND compoundexp
    (121) compoundexp_prime -> . OR compoundexp
    (122) compoundexp_prime -> .

    AND             shift and go to state 126
    OR              shift and go to state 127
    RIGHTP          reduce using rule 122 (compoundexp_prime -> .)
    EOS             reduce using rule 122 (compoundexp_prime -> .)

    compoundexp_prime              shift and go to state 125

state 81

    (55) condition -> FOR LEFTP assignment . condition_prime
    (57) condition_prime -> . SEPARATOR assignment condition_prime
    (58) condition_prime -> . EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE

    SEPARATOR       shift and go to state 129
    EOS             shift and go to state 130

    condition_prime                shift and go to state 128

state 82

    (48) assignment -> ID . assignment_prime EQUALS push_operator expression
    (49) assignment_prime -> .
    (50) assignment_prime -> . LEFTB exp RIGHTB assignment_second_prime

    EQUALS          reduce using rule 49 (assignment_prime -> .)
    LEFTB           shift and go to state 48

    assignment_prime               shift and go to state 46

state 83

    (59) condition_second_prime -> LEFTP compoundexp . RIGHTP condition_third_prime

    RIGHTP          shift and go to state 131


state 84

    (107) specialfunction -> JEDO POINT specialfunction_prime .

    EOS             reduce using rule 107 (specialfunction -> JEDO POINT specialfunction_prime .)
    ELSEIF          reduce using rule 107 (specialfunction -> JEDO POINT specialfunction_prime .)
    ELSE            reduce using rule 107 (specialfunction -> JEDO POINT specialfunction_prime .)


state 85

    (108) specialfunction_prime -> CIRCLE . LEFTP exp RIGHTP

    LEFTP           shift and go to state 132


state 86

    (109) specialfunction_prime -> SQUARE . LEFTP exp SEPARATOR exp RIGHTP

    LEFTP           shift and go to state 133


state 87

    (110) specialfunction_prime -> RECTANGLE . LEFTP exp SEPARATOR exp RIGHTP

    LEFTP           shift and go to state 134


state 88

    (111) specialfunction_prime -> FORWARD . LEFTP exp RIGHTP

    LEFTP           shift and go to state 135


state 89

    (112) specialfunction_prime -> BACK . LEFTP exp RIGHTP

    LEFTP           shift and go to state 136


state 90

    (113) specialfunction_prime -> TURNRIGHT . LEFTP exp RIGHTP

    LEFTP           shift and go to state 137


state 91

    (114) specialfunction_prime -> TURNLEFT . LEFTP exp RIGHTP

    LEFTP           shift and go to state 138


state 92

    (115) specialfunction_prime -> COLOR . LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP

    LEFTP           shift and go to state 139


state 93

    (116) specialfunction_prime -> ARCH . LEFTP exp RIGHTP

    LEFTP           shift and go to state 140


state 94

    (117) specialfunction_prime -> LINE . LEFTP exp SEPARATOR exp RIGHTP

    LEFTP           shift and go to state 141


state 95

    (118) specialfunction_prime -> THICKNESS . LEFTP exp RIGHTP

    LEFTP           shift and go to state 142


state 96

    (28) modules -> FUNCTION modules_prime ID LEFTP . modules_second_prime
    (31) modules_second_prime -> . type ID modules_third_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15

    modules_second_prime           shift and go to state 143
    type                           shift and go to state 144

state 97

    (18) vars_fourth_prime -> SEPARATOR store_variable vars_prime . vars_fourth_prime
    (18) vars_fourth_prime -> . SEPARATOR store_variable vars_prime vars_fourth_prime
    (19) vars_fourth_prime -> . store_variable vars_fifth_prime
    (20) store_variable -> .

    SEPARATOR       shift and go to state 40
    EOS             reduce using rule 20 (store_variable -> .)

    store_variable                 shift and go to state 41
    vars_fourth_prime              shift and go to state 145

state 98

    (13) vars_second_prime -> change_dimension LEFTB . exp RIGHTB vars_third_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 146
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 99

    (48) assignment -> ID assignment_prime EQUALS push_operator . expression
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    expression                     shift and go to state 147
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 100

    (67) functioncall -> ID LEFTP fake_bottom exp . functioncall_prime
    (68) functioncall_prime -> . SEPARATOR exp functioncall_prime
    (69) functioncall_prime -> . RIGHTP pop_fake_bottom

    SEPARATOR       shift and go to state 149
    RIGHTP          shift and go to state 150

    functioncall_prime             shift and go to state 148

state 101

    (50) assignment_prime -> LEFTB exp RIGHTB . assignment_second_prime
    (51) assignment_second_prime -> .
    (52) assignment_second_prime -> . LEFTB exp RIGHTB

    EQUALS          reduce using rule 51 (assignment_second_prime -> .)
    LEFTB           shift and go to state 151

    assignment_second_prime        shift and go to state 152

state 102

    (81) exp -> term exp_prime .

    RIGHTB          reduce using rule 81 (exp -> term exp_prime .)
    GREATER         reduce using rule 81 (exp -> term exp_prime .)
    LESS            reduce using rule 81 (exp -> term exp_prime .)
    EQUAL           reduce using rule 81 (exp -> term exp_prime .)
    NOTEQUAL        reduce using rule 81 (exp -> term exp_prime .)
    GREATEREQUAL    reduce using rule 81 (exp -> term exp_prime .)
    LESSEQUAL       reduce using rule 81 (exp -> term exp_prime .)
    RIGHTP          reduce using rule 81 (exp -> term exp_prime .)
    AND             reduce using rule 81 (exp -> term exp_prime .)
    OR              reduce using rule 81 (exp -> term exp_prime .)
    SEPARATOR       reduce using rule 81 (exp -> term exp_prime .)
    EOS             reduce using rule 81 (exp -> term exp_prime .)
    ELSEIF          reduce using rule 81 (exp -> term exp_prime .)
    ELSE            reduce using rule 81 (exp -> term exp_prime .)


state 103

    (82) exp_prime -> PLUS . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    term                           shift and go to state 153
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 104

    (83) exp_prime -> MINUS . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    term                           shift and go to state 154
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 105

    (97) term -> factor term_prime .

    PLUS            reduce using rule 97 (term -> factor term_prime .)
    MINUS           reduce using rule 97 (term -> factor term_prime .)
    RIGHTB          reduce using rule 97 (term -> factor term_prime .)
    GREATER         reduce using rule 97 (term -> factor term_prime .)
    LESS            reduce using rule 97 (term -> factor term_prime .)
    EQUAL           reduce using rule 97 (term -> factor term_prime .)
    NOTEQUAL        reduce using rule 97 (term -> factor term_prime .)
    GREATEREQUAL    reduce using rule 97 (term -> factor term_prime .)
    LESSEQUAL       reduce using rule 97 (term -> factor term_prime .)
    RIGHTP          reduce using rule 97 (term -> factor term_prime .)
    AND             reduce using rule 97 (term -> factor term_prime .)
    OR              reduce using rule 97 (term -> factor term_prime .)
    SEPARATOR       reduce using rule 97 (term -> factor term_prime .)
    EOS             reduce using rule 97 (term -> factor term_prime .)
    ELSEIF          reduce using rule 97 (term -> factor term_prime .)
    ELSE            reduce using rule 97 (term -> factor term_prime .)


state 106

    (98) term_prime -> MULTIPLY . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    factor                         shift and go to state 155
    operand                        shift and go to state 69

state 107

    (99) term_prime -> DIVIDE . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    factor                         shift and go to state 156
    operand                        shift and go to state 69

state 108

    (101) factor -> LEFTP fake_bottom . expression RIGHTP pop_fake_bottom
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    expression                     shift and go to state 157
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 109

    (103) factor -> PLUS operand .

    MULTIPLY        reduce using rule 103 (factor -> PLUS operand .)
    DIVIDE          reduce using rule 103 (factor -> PLUS operand .)
    PLUS            reduce using rule 103 (factor -> PLUS operand .)
    MINUS           reduce using rule 103 (factor -> PLUS operand .)
    RIGHTB          reduce using rule 103 (factor -> PLUS operand .)
    GREATER         reduce using rule 103 (factor -> PLUS operand .)
    LESS            reduce using rule 103 (factor -> PLUS operand .)
    EQUAL           reduce using rule 103 (factor -> PLUS operand .)
    NOTEQUAL        reduce using rule 103 (factor -> PLUS operand .)
    GREATEREQUAL    reduce using rule 103 (factor -> PLUS operand .)
    LESSEQUAL       reduce using rule 103 (factor -> PLUS operand .)
    RIGHTP          reduce using rule 103 (factor -> PLUS operand .)
    AND             reduce using rule 103 (factor -> PLUS operand .)
    OR              reduce using rule 103 (factor -> PLUS operand .)
    SEPARATOR       reduce using rule 103 (factor -> PLUS operand .)
    EOS             reduce using rule 103 (factor -> PLUS operand .)
    ELSEIF          reduce using rule 103 (factor -> PLUS operand .)
    ELSE            reduce using rule 103 (factor -> PLUS operand .)


state 110

    (104) factor -> MINUS operand .

    MULTIPLY        reduce using rule 104 (factor -> MINUS operand .)
    DIVIDE          reduce using rule 104 (factor -> MINUS operand .)
    PLUS            reduce using rule 104 (factor -> MINUS operand .)
    MINUS           reduce using rule 104 (factor -> MINUS operand .)
    RIGHTB          reduce using rule 104 (factor -> MINUS operand .)
    GREATER         reduce using rule 104 (factor -> MINUS operand .)
    LESS            reduce using rule 104 (factor -> MINUS operand .)
    EQUAL           reduce using rule 104 (factor -> MINUS operand .)
    NOTEQUAL        reduce using rule 104 (factor -> MINUS operand .)
    GREATEREQUAL    reduce using rule 104 (factor -> MINUS operand .)
    LESSEQUAL       reduce using rule 104 (factor -> MINUS operand .)
    RIGHTP          reduce using rule 104 (factor -> MINUS operand .)
    AND             reduce using rule 104 (factor -> MINUS operand .)
    OR              reduce using rule 104 (factor -> MINUS operand .)
    SEPARATOR       reduce using rule 104 (factor -> MINUS operand .)
    EOS             reduce using rule 104 (factor -> MINUS operand .)
    ELSEIF          reduce using rule 104 (factor -> MINUS operand .)
    ELSE            reduce using rule 104 (factor -> MINUS operand .)


state 111

    (85) operand -> CSTI evaluate_operation_int .

    MULTIPLY        reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    DIVIDE          reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    PLUS            reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    MINUS           reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    RIGHTB          reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    GREATER         reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    LESS            reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    EQUAL           reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    NOTEQUAL        reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    GREATEREQUAL    reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    LESSEQUAL       reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    RIGHTP          reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    AND             reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    OR              reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    SEPARATOR       reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    EOS             reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    ELSEIF          reduce using rule 85 (operand -> CSTI evaluate_operation_int .)
    ELSE            reduce using rule 85 (operand -> CSTI evaluate_operation_int .)


state 112

    (86) operand -> CSTF evaluate_operation_float .

    MULTIPLY        reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    DIVIDE          reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    PLUS            reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    MINUS           reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    RIGHTB          reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    GREATER         reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    LESS            reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    EQUAL           reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    NOTEQUAL        reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    GREATEREQUAL    reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    LESSEQUAL       reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    RIGHTP          reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    AND             reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    OR              reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    SEPARATOR       reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    EOS             reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    ELSEIF          reduce using rule 86 (operand -> CSTF evaluate_operation_float .)
    ELSE            reduce using rule 86 (operand -> CSTF evaluate_operation_float .)


state 113

    (87) operand -> ID operand_prime .

    MULTIPLY        reduce using rule 87 (operand -> ID operand_prime .)
    DIVIDE          reduce using rule 87 (operand -> ID operand_prime .)
    PLUS            reduce using rule 87 (operand -> ID operand_prime .)
    MINUS           reduce using rule 87 (operand -> ID operand_prime .)
    RIGHTB          reduce using rule 87 (operand -> ID operand_prime .)
    GREATER         reduce using rule 87 (operand -> ID operand_prime .)
    LESS            reduce using rule 87 (operand -> ID operand_prime .)
    EQUAL           reduce using rule 87 (operand -> ID operand_prime .)
    NOTEQUAL        reduce using rule 87 (operand -> ID operand_prime .)
    GREATEREQUAL    reduce using rule 87 (operand -> ID operand_prime .)
    LESSEQUAL       reduce using rule 87 (operand -> ID operand_prime .)
    RIGHTP          reduce using rule 87 (operand -> ID operand_prime .)
    AND             reduce using rule 87 (operand -> ID operand_prime .)
    OR              reduce using rule 87 (operand -> ID operand_prime .)
    SEPARATOR       reduce using rule 87 (operand -> ID operand_prime .)
    EOS             reduce using rule 87 (operand -> ID operand_prime .)
    ELSEIF          reduce using rule 87 (operand -> ID operand_prime .)
    ELSE            reduce using rule 87 (operand -> ID operand_prime .)


state 114

    (90) operand_prime -> LEFTB . exp RIGHTB operand_second_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 158
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 115

    (91) operand_prime -> LEFTP . exp operand_third_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 159
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 116

    (80) print_prime -> expression RIGHTP .

    EOS             reduce using rule 80 (print_prime -> expression RIGHTP .)
    ELSEIF          reduce using rule 80 (print_prime -> expression RIGHTP .)
    ELSE            reduce using rule 80 (print_prime -> expression RIGHTP .)


state 117

    (70) expression -> exp expression_prime .

    RIGHTP          reduce using rule 70 (expression -> exp expression_prime .)
    AND             reduce using rule 70 (expression -> exp expression_prime .)
    OR              reduce using rule 70 (expression -> exp expression_prime .)
    EOS             reduce using rule 70 (expression -> exp expression_prime .)
    SEPARATOR       reduce using rule 70 (expression -> exp expression_prime .)
    ELSEIF          reduce using rule 70 (expression -> exp expression_prime .)
    ELSE            reduce using rule 70 (expression -> exp expression_prime .)


state 118

    (71) expression_prime -> GREATER . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 160
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 119

    (72) expression_prime -> LESS . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 161
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 120

    (73) expression_prime -> EQUAL . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 162
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 121

    (74) expression_prime -> NOTEQUAL . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 163
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 122

    (75) expression_prime -> GREATEREQUAL . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 164
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 123

    (76) expression_prime -> LESSEQUAL . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 165
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 124

    (54) condition -> WHILE LEFTP compoundexp RIGHTP . LEFTBRACE body RIGHTBRACE

    LEFTBRACE       shift and go to state 166


state 125

    (119) compoundexp -> expression compoundexp_prime .

    RIGHTP          reduce using rule 119 (compoundexp -> expression compoundexp_prime .)
    EOS             reduce using rule 119 (compoundexp -> expression compoundexp_prime .)


state 126

    (120) compoundexp_prime -> AND . compoundexp
    (119) compoundexp -> . expression compoundexp_prime
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    compoundexp                    shift and go to state 167
    expression                     shift and go to state 80
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 127

    (121) compoundexp_prime -> OR . compoundexp
    (119) compoundexp -> . expression compoundexp_prime
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    compoundexp                    shift and go to state 168
    expression                     shift and go to state 80
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 128

    (55) condition -> FOR LEFTP assignment condition_prime .

    EOS             reduce using rule 55 (condition -> FOR LEFTP assignment condition_prime .)
    ELSEIF          reduce using rule 55 (condition -> FOR LEFTP assignment condition_prime .)
    ELSE            reduce using rule 55 (condition -> FOR LEFTP assignment condition_prime .)


state 129

    (57) condition_prime -> SEPARATOR . assignment condition_prime
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression

    ID              shift and go to state 82

    assignment                     shift and go to state 169

state 130

    (58) condition_prime -> EOS . compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE
    (119) compoundexp -> . expression compoundexp_prime
    (70) expression -> . exp expression_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    compoundexp                    shift and go to state 170
    expression                     shift and go to state 80
    exp                            shift and go to state 78
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 131

    (59) condition_second_prime -> LEFTP compoundexp RIGHTP . condition_third_prime
    (60) condition_third_prime -> . statement condition_fourth_prime
    (61) condition_third_prime -> . LEFTBRACE body RIGHTBRACE condition_fourth_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    LEFTBRACE       shift and go to state 173
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    condition_third_prime          shift and go to state 171
    statement                      shift and go to state 172
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 132

    (108) specialfunction_prime -> CIRCLE LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 174
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 133

    (109) specialfunction_prime -> SQUARE LEFTP . exp SEPARATOR exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 175
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 134

    (110) specialfunction_prime -> RECTANGLE LEFTP . exp SEPARATOR exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 176
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 135

    (111) specialfunction_prime -> FORWARD LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 177
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 136

    (112) specialfunction_prime -> BACK LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 178
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 137

    (113) specialfunction_prime -> TURNRIGHT LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 179
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 138

    (114) specialfunction_prime -> TURNLEFT LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 180
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 139

    (115) specialfunction_prime -> COLOR LEFTP . exp SEPARATOR exp SEPARATOR exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 181
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 140

    (116) specialfunction_prime -> ARCH LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 182
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 141

    (117) specialfunction_prime -> LINE LEFTP . exp SEPARATOR exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 183
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 142

    (118) specialfunction_prime -> THICKNESS LEFTP . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 184
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 143

    (28) modules -> FUNCTION modules_prime ID LEFTP modules_second_prime .

    MAIN            reduce using rule 28 (modules -> FUNCTION modules_prime ID LEFTP modules_second_prime .)
    FUNCTION        reduce using rule 28 (modules -> FUNCTION modules_prime ID LEFTP modules_second_prime .)


state 144

    (31) modules_second_prime -> type . ID modules_third_prime

    ID              shift and go to state 185


state 145

    (18) vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .

    MAIN            reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPEINT         reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPEFLOAT       reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPECHAR        reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    FUNCTION        reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    ID              reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    PRINT           reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    WHILE           reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    FOR             reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    IF              reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    JEDO            reduce using rule 18 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)


state 146

    (13) vars_second_prime -> change_dimension LEFTB exp . RIGHTB vars_third_prime

    RIGHTB          shift and go to state 186


state 147

    (48) assignment -> ID assignment_prime EQUALS push_operator expression .

    EOS             reduce using rule 48 (assignment -> ID assignment_prime EQUALS push_operator expression .)
    SEPARATOR       reduce using rule 48 (assignment -> ID assignment_prime EQUALS push_operator expression .)
    ELSEIF          reduce using rule 48 (assignment -> ID assignment_prime EQUALS push_operator expression .)
    ELSE            reduce using rule 48 (assignment -> ID assignment_prime EQUALS push_operator expression .)


state 148

    (67) functioncall -> ID LEFTP fake_bottom exp functioncall_prime .

    EOS             reduce using rule 67 (functioncall -> ID LEFTP fake_bottom exp functioncall_prime .)
    ELSEIF          reduce using rule 67 (functioncall -> ID LEFTP fake_bottom exp functioncall_prime .)
    ELSE            reduce using rule 67 (functioncall -> ID LEFTP fake_bottom exp functioncall_prime .)


state 149

    (68) functioncall_prime -> SEPARATOR . exp functioncall_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 187
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 150

    (69) functioncall_prime -> RIGHTP . pop_fake_bottom
    (106) pop_fake_bottom -> .

    EOS             reduce using rule 106 (pop_fake_bottom -> .)
    ELSEIF          reduce using rule 106 (pop_fake_bottom -> .)
    ELSE            reduce using rule 106 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 188

state 151

    (52) assignment_second_prime -> LEFTB . exp RIGHTB
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 189
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 152

    (50) assignment_prime -> LEFTB exp RIGHTB assignment_second_prime .

    EQUALS          reduce using rule 50 (assignment_prime -> LEFTB exp RIGHTB assignment_second_prime .)


state 153

    (82) exp_prime -> PLUS term . exp_prime
    (82) exp_prime -> . PLUS term exp_prime
    (83) exp_prime -> . MINUS term exp_prime
    (84) exp_prime -> .

    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    RIGHTB          reduce using rule 84 (exp_prime -> .)
    GREATER         reduce using rule 84 (exp_prime -> .)
    LESS            reduce using rule 84 (exp_prime -> .)
    EQUAL           reduce using rule 84 (exp_prime -> .)
    NOTEQUAL        reduce using rule 84 (exp_prime -> .)
    GREATEREQUAL    reduce using rule 84 (exp_prime -> .)
    LESSEQUAL       reduce using rule 84 (exp_prime -> .)
    RIGHTP          reduce using rule 84 (exp_prime -> .)
    AND             reduce using rule 84 (exp_prime -> .)
    OR              reduce using rule 84 (exp_prime -> .)
    SEPARATOR       reduce using rule 84 (exp_prime -> .)
    EOS             reduce using rule 84 (exp_prime -> .)
    ELSEIF          reduce using rule 84 (exp_prime -> .)
    ELSE            reduce using rule 84 (exp_prime -> .)

    exp_prime                      shift and go to state 190

state 154

    (83) exp_prime -> MINUS term . exp_prime
    (82) exp_prime -> . PLUS term exp_prime
    (83) exp_prime -> . MINUS term exp_prime
    (84) exp_prime -> .

    PLUS            shift and go to state 103
    MINUS           shift and go to state 104
    RIGHTB          reduce using rule 84 (exp_prime -> .)
    GREATER         reduce using rule 84 (exp_prime -> .)
    LESS            reduce using rule 84 (exp_prime -> .)
    EQUAL           reduce using rule 84 (exp_prime -> .)
    NOTEQUAL        reduce using rule 84 (exp_prime -> .)
    GREATEREQUAL    reduce using rule 84 (exp_prime -> .)
    LESSEQUAL       reduce using rule 84 (exp_prime -> .)
    RIGHTP          reduce using rule 84 (exp_prime -> .)
    AND             reduce using rule 84 (exp_prime -> .)
    OR              reduce using rule 84 (exp_prime -> .)
    SEPARATOR       reduce using rule 84 (exp_prime -> .)
    EOS             reduce using rule 84 (exp_prime -> .)
    ELSEIF          reduce using rule 84 (exp_prime -> .)
    ELSE            reduce using rule 84 (exp_prime -> .)

    exp_prime                      shift and go to state 191

state 155

    (98) term_prime -> MULTIPLY factor . term_prime
    (98) term_prime -> . MULTIPLY factor term_prime
    (99) term_prime -> . DIVIDE factor term_prime
    (100) term_prime -> .

    MULTIPLY        shift and go to state 106
    DIVIDE          shift and go to state 107
    PLUS            reduce using rule 100 (term_prime -> .)
    MINUS           reduce using rule 100 (term_prime -> .)
    RIGHTB          reduce using rule 100 (term_prime -> .)
    GREATER         reduce using rule 100 (term_prime -> .)
    LESS            reduce using rule 100 (term_prime -> .)
    EQUAL           reduce using rule 100 (term_prime -> .)
    NOTEQUAL        reduce using rule 100 (term_prime -> .)
    GREATEREQUAL    reduce using rule 100 (term_prime -> .)
    LESSEQUAL       reduce using rule 100 (term_prime -> .)
    RIGHTP          reduce using rule 100 (term_prime -> .)
    AND             reduce using rule 100 (term_prime -> .)
    OR              reduce using rule 100 (term_prime -> .)
    SEPARATOR       reduce using rule 100 (term_prime -> .)
    EOS             reduce using rule 100 (term_prime -> .)
    ELSEIF          reduce using rule 100 (term_prime -> .)
    ELSE            reduce using rule 100 (term_prime -> .)

    term_prime                     shift and go to state 192

state 156

    (99) term_prime -> DIVIDE factor . term_prime
    (98) term_prime -> . MULTIPLY factor term_prime
    (99) term_prime -> . DIVIDE factor term_prime
    (100) term_prime -> .

    MULTIPLY        shift and go to state 106
    DIVIDE          shift and go to state 107
    PLUS            reduce using rule 100 (term_prime -> .)
    MINUS           reduce using rule 100 (term_prime -> .)
    RIGHTB          reduce using rule 100 (term_prime -> .)
    GREATER         reduce using rule 100 (term_prime -> .)
    LESS            reduce using rule 100 (term_prime -> .)
    EQUAL           reduce using rule 100 (term_prime -> .)
    NOTEQUAL        reduce using rule 100 (term_prime -> .)
    GREATEREQUAL    reduce using rule 100 (term_prime -> .)
    LESSEQUAL       reduce using rule 100 (term_prime -> .)
    RIGHTP          reduce using rule 100 (term_prime -> .)
    AND             reduce using rule 100 (term_prime -> .)
    OR              reduce using rule 100 (term_prime -> .)
    SEPARATOR       reduce using rule 100 (term_prime -> .)
    EOS             reduce using rule 100 (term_prime -> .)
    ELSEIF          reduce using rule 100 (term_prime -> .)
    ELSE            reduce using rule 100 (term_prime -> .)

    term_prime                     shift and go to state 193

state 157

    (101) factor -> LEFTP fake_bottom expression . RIGHTP pop_fake_bottom

    RIGHTP          shift and go to state 194


state 158

    (90) operand_prime -> LEFTB exp . RIGHTB operand_second_prime

    RIGHTB          shift and go to state 195


state 159

    (91) operand_prime -> LEFTP exp . operand_third_prime
    (95) operand_third_prime -> . SEPARATOR exp operand_third_prime
    (96) operand_third_prime -> . RIGHTP

    SEPARATOR       shift and go to state 197
    RIGHTP          shift and go to state 198

    operand_third_prime            shift and go to state 196

state 160

    (71) expression_prime -> GREATER exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 199

state 161

    (72) expression_prime -> LESS exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 200

state 162

    (73) expression_prime -> EQUAL exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 201

state 163

    (74) expression_prime -> NOTEQUAL exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 202

state 164

    (75) expression_prime -> GREATEREQUAL exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 203

state 165

    (76) expression_prime -> LESSEQUAL exp . expression_prime
    (71) expression_prime -> . GREATER exp expression_prime
    (72) expression_prime -> . LESS exp expression_prime
    (73) expression_prime -> . EQUAL exp expression_prime
    (74) expression_prime -> . NOTEQUAL exp expression_prime
    (75) expression_prime -> . GREATEREQUAL exp expression_prime
    (76) expression_prime -> . LESSEQUAL exp expression_prime
    (77) expression_prime -> .

    GREATER         shift and go to state 118
    LESS            shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121
    GREATEREQUAL    shift and go to state 122
    LESSEQUAL       shift and go to state 123
    RIGHTP          reduce using rule 77 (expression_prime -> .)
    AND             reduce using rule 77 (expression_prime -> .)
    OR              reduce using rule 77 (expression_prime -> .)
    EOS             reduce using rule 77 (expression_prime -> .)
    SEPARATOR       reduce using rule 77 (expression_prime -> .)
    ELSEIF          reduce using rule 77 (expression_prime -> .)
    ELSE            reduce using rule 77 (expression_prime -> .)

    expression_prime               shift and go to state 204

state 166

    (54) condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE . body RIGHTBRACE
    (25) body -> . statement EOS body_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    body                           shift and go to state 205
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 167

    (120) compoundexp_prime -> AND compoundexp .

    RIGHTP          reduce using rule 120 (compoundexp_prime -> AND compoundexp .)
    EOS             reduce using rule 120 (compoundexp_prime -> AND compoundexp .)


state 168

    (121) compoundexp_prime -> OR compoundexp .

    RIGHTP          reduce using rule 121 (compoundexp_prime -> OR compoundexp .)
    EOS             reduce using rule 121 (compoundexp_prime -> OR compoundexp .)


state 169

    (57) condition_prime -> SEPARATOR assignment . condition_prime
    (57) condition_prime -> . SEPARATOR assignment condition_prime
    (58) condition_prime -> . EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE

    SEPARATOR       shift and go to state 129
    EOS             shift and go to state 130

    condition_prime                shift and go to state 206

state 170

    (58) condition_prime -> EOS compoundexp . EOS increment RIGHTP LEFTBRACE body RIGHTBRACE

    EOS             shift and go to state 207


state 171

    (59) condition_second_prime -> LEFTP compoundexp RIGHTP condition_third_prime .

    EOS             reduce using rule 59 (condition_second_prime -> LEFTP compoundexp RIGHTP condition_third_prime .)
    ELSEIF          reduce using rule 59 (condition_second_prime -> LEFTP compoundexp RIGHTP condition_third_prime .)
    ELSE            reduce using rule 59 (condition_second_prime -> LEFTP compoundexp RIGHTP condition_third_prime .)


state 172

    (60) condition_third_prime -> statement . condition_fourth_prime
    (62) condition_fourth_prime -> . ELSEIF condition_second_prime
    (63) condition_fourth_prime -> . ELSE condition_fifth_prime
    (64) condition_fourth_prime -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ELSEIF          shift and go to state 209
    ELSE            shift and go to state 210
    EOS             reduce using rule 64 (condition_fourth_prime -> .)

  ! ELSEIF          [ reduce using rule 64 (condition_fourth_prime -> .) ]
  ! ELSE            [ reduce using rule 64 (condition_fourth_prime -> .) ]

    condition_fourth_prime         shift and go to state 208

state 173

    (61) condition_third_prime -> LEFTBRACE . body RIGHTBRACE condition_fourth_prime
    (25) body -> . statement EOS body_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    body                           shift and go to state 211
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 174

    (108) specialfunction_prime -> CIRCLE LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 212


state 175

    (109) specialfunction_prime -> SQUARE LEFTP exp . SEPARATOR exp RIGHTP

    SEPARATOR       shift and go to state 213


state 176

    (110) specialfunction_prime -> RECTANGLE LEFTP exp . SEPARATOR exp RIGHTP

    SEPARATOR       shift and go to state 214


state 177

    (111) specialfunction_prime -> FORWARD LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 215


state 178

    (112) specialfunction_prime -> BACK LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 216


state 179

    (113) specialfunction_prime -> TURNRIGHT LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 217


state 180

    (114) specialfunction_prime -> TURNLEFT LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 218


state 181

    (115) specialfunction_prime -> COLOR LEFTP exp . SEPARATOR exp SEPARATOR exp RIGHTP

    SEPARATOR       shift and go to state 219


state 182

    (116) specialfunction_prime -> ARCH LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 220


state 183

    (117) specialfunction_prime -> LINE LEFTP exp . SEPARATOR exp RIGHTP

    SEPARATOR       shift and go to state 221


state 184

    (118) specialfunction_prime -> THICKNESS LEFTP exp . RIGHTP

    RIGHTP          shift and go to state 222


state 185

    (31) modules_second_prime -> type ID . modules_third_prime
    (32) modules_third_prime -> . SEPARATOR modules_second_prime
    (33) modules_third_prime -> . RIGHTP LEFTBRACE modules_fourth_prime

    SEPARATOR       shift and go to state 224
    RIGHTP          shift and go to state 225

    modules_third_prime            shift and go to state 223

state 186

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB . vars_third_prime
    (16) vars_third_prime -> . LEFTB exp RIGHTB
    (17) vars_third_prime -> .

    LEFTB           shift and go to state 226
    SEPARATOR       reduce using rule 17 (vars_third_prime -> .)
    EOS             reduce using rule 17 (vars_third_prime -> .)

    vars_third_prime               shift and go to state 227

state 187

    (68) functioncall_prime -> SEPARATOR exp . functioncall_prime
    (68) functioncall_prime -> . SEPARATOR exp functioncall_prime
    (69) functioncall_prime -> . RIGHTP pop_fake_bottom

    SEPARATOR       shift and go to state 149
    RIGHTP          shift and go to state 150

    functioncall_prime             shift and go to state 228

state 188

    (69) functioncall_prime -> RIGHTP pop_fake_bottom .

    EOS             reduce using rule 69 (functioncall_prime -> RIGHTP pop_fake_bottom .)
    ELSEIF          reduce using rule 69 (functioncall_prime -> RIGHTP pop_fake_bottom .)
    ELSE            reduce using rule 69 (functioncall_prime -> RIGHTP pop_fake_bottom .)


state 189

    (52) assignment_second_prime -> LEFTB exp . RIGHTB

    RIGHTB          shift and go to state 229


state 190

    (82) exp_prime -> PLUS term exp_prime .

    RIGHTB          reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    GREATER         reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    LESS            reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    EQUAL           reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    NOTEQUAL        reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    GREATEREQUAL    reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    LESSEQUAL       reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    RIGHTP          reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    AND             reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    OR              reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    SEPARATOR       reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    EOS             reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    ELSEIF          reduce using rule 82 (exp_prime -> PLUS term exp_prime .)
    ELSE            reduce using rule 82 (exp_prime -> PLUS term exp_prime .)


state 191

    (83) exp_prime -> MINUS term exp_prime .

    RIGHTB          reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    GREATER         reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    LESS            reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    EQUAL           reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    NOTEQUAL        reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    GREATEREQUAL    reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    LESSEQUAL       reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    RIGHTP          reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    AND             reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    OR              reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    SEPARATOR       reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    EOS             reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    ELSEIF          reduce using rule 83 (exp_prime -> MINUS term exp_prime .)
    ELSE            reduce using rule 83 (exp_prime -> MINUS term exp_prime .)


state 192

    (98) term_prime -> MULTIPLY factor term_prime .

    PLUS            reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    MINUS           reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    RIGHTB          reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    GREATER         reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    LESS            reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    EQUAL           reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    NOTEQUAL        reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    GREATEREQUAL    reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    LESSEQUAL       reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    RIGHTP          reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    AND             reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    OR              reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    SEPARATOR       reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    EOS             reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    ELSEIF          reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)
    ELSE            reduce using rule 98 (term_prime -> MULTIPLY factor term_prime .)


state 193

    (99) term_prime -> DIVIDE factor term_prime .

    PLUS            reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    MINUS           reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    RIGHTB          reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    GREATER         reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    LESS            reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    EQUAL           reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    NOTEQUAL        reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    GREATEREQUAL    reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    LESSEQUAL       reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    RIGHTP          reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    AND             reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    OR              reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    SEPARATOR       reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    EOS             reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    ELSEIF          reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)
    ELSE            reduce using rule 99 (term_prime -> DIVIDE factor term_prime .)


state 194

    (101) factor -> LEFTP fake_bottom expression RIGHTP . pop_fake_bottom
    (106) pop_fake_bottom -> .

    MULTIPLY        reduce using rule 106 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 106 (pop_fake_bottom -> .)
    PLUS            reduce using rule 106 (pop_fake_bottom -> .)
    MINUS           reduce using rule 106 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 106 (pop_fake_bottom -> .)
    GREATER         reduce using rule 106 (pop_fake_bottom -> .)
    LESS            reduce using rule 106 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 106 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 106 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 106 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 106 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 106 (pop_fake_bottom -> .)
    AND             reduce using rule 106 (pop_fake_bottom -> .)
    OR              reduce using rule 106 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 106 (pop_fake_bottom -> .)
    EOS             reduce using rule 106 (pop_fake_bottom -> .)
    ELSEIF          reduce using rule 106 (pop_fake_bottom -> .)
    ELSE            reduce using rule 106 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 230

state 195

    (90) operand_prime -> LEFTB exp RIGHTB . operand_second_prime
    (93) operand_second_prime -> .
    (94) operand_second_prime -> . LEFTB exp RIGHTB

    MULTIPLY        reduce using rule 93 (operand_second_prime -> .)
    DIVIDE          reduce using rule 93 (operand_second_prime -> .)
    PLUS            reduce using rule 93 (operand_second_prime -> .)
    MINUS           reduce using rule 93 (operand_second_prime -> .)
    RIGHTB          reduce using rule 93 (operand_second_prime -> .)
    GREATER         reduce using rule 93 (operand_second_prime -> .)
    LESS            reduce using rule 93 (operand_second_prime -> .)
    EQUAL           reduce using rule 93 (operand_second_prime -> .)
    NOTEQUAL        reduce using rule 93 (operand_second_prime -> .)
    GREATEREQUAL    reduce using rule 93 (operand_second_prime -> .)
    LESSEQUAL       reduce using rule 93 (operand_second_prime -> .)
    RIGHTP          reduce using rule 93 (operand_second_prime -> .)
    AND             reduce using rule 93 (operand_second_prime -> .)
    OR              reduce using rule 93 (operand_second_prime -> .)
    SEPARATOR       reduce using rule 93 (operand_second_prime -> .)
    EOS             reduce using rule 93 (operand_second_prime -> .)
    ELSEIF          reduce using rule 93 (operand_second_prime -> .)
    ELSE            reduce using rule 93 (operand_second_prime -> .)
    LEFTB           shift and go to state 231

    operand_second_prime           shift and go to state 232

state 196

    (91) operand_prime -> LEFTP exp operand_third_prime .

    MULTIPLY        reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    DIVIDE          reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    PLUS            reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    MINUS           reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    RIGHTB          reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    GREATER         reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    LESS            reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    EQUAL           reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    NOTEQUAL        reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    GREATEREQUAL    reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    LESSEQUAL       reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    RIGHTP          reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    AND             reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    OR              reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    SEPARATOR       reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    EOS             reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    ELSEIF          reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)
    ELSE            reduce using rule 91 (operand_prime -> LEFTP exp operand_third_prime .)


state 197

    (95) operand_third_prime -> SEPARATOR . exp operand_third_prime
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 233
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 198

    (96) operand_third_prime -> RIGHTP .

    MULTIPLY        reduce using rule 96 (operand_third_prime -> RIGHTP .)
    DIVIDE          reduce using rule 96 (operand_third_prime -> RIGHTP .)
    PLUS            reduce using rule 96 (operand_third_prime -> RIGHTP .)
    MINUS           reduce using rule 96 (operand_third_prime -> RIGHTP .)
    RIGHTB          reduce using rule 96 (operand_third_prime -> RIGHTP .)
    GREATER         reduce using rule 96 (operand_third_prime -> RIGHTP .)
    LESS            reduce using rule 96 (operand_third_prime -> RIGHTP .)
    EQUAL           reduce using rule 96 (operand_third_prime -> RIGHTP .)
    NOTEQUAL        reduce using rule 96 (operand_third_prime -> RIGHTP .)
    GREATEREQUAL    reduce using rule 96 (operand_third_prime -> RIGHTP .)
    LESSEQUAL       reduce using rule 96 (operand_third_prime -> RIGHTP .)
    RIGHTP          reduce using rule 96 (operand_third_prime -> RIGHTP .)
    AND             reduce using rule 96 (operand_third_prime -> RIGHTP .)
    OR              reduce using rule 96 (operand_third_prime -> RIGHTP .)
    SEPARATOR       reduce using rule 96 (operand_third_prime -> RIGHTP .)
    EOS             reduce using rule 96 (operand_third_prime -> RIGHTP .)
    ELSEIF          reduce using rule 96 (operand_third_prime -> RIGHTP .)
    ELSE            reduce using rule 96 (operand_third_prime -> RIGHTP .)


state 199

    (71) expression_prime -> GREATER exp expression_prime .

    RIGHTP          reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    AND             reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    OR              reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    EOS             reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    SEPARATOR       reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    ELSEIF          reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)
    ELSE            reduce using rule 71 (expression_prime -> GREATER exp expression_prime .)


state 200

    (72) expression_prime -> LESS exp expression_prime .

    RIGHTP          reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    AND             reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    OR              reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    EOS             reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    SEPARATOR       reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    ELSEIF          reduce using rule 72 (expression_prime -> LESS exp expression_prime .)
    ELSE            reduce using rule 72 (expression_prime -> LESS exp expression_prime .)


state 201

    (73) expression_prime -> EQUAL exp expression_prime .

    RIGHTP          reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    AND             reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    OR              reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    EOS             reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    SEPARATOR       reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    ELSEIF          reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)
    ELSE            reduce using rule 73 (expression_prime -> EQUAL exp expression_prime .)


state 202

    (74) expression_prime -> NOTEQUAL exp expression_prime .

    RIGHTP          reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    AND             reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    OR              reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    EOS             reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    SEPARATOR       reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    ELSEIF          reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)
    ELSE            reduce using rule 74 (expression_prime -> NOTEQUAL exp expression_prime .)


state 203

    (75) expression_prime -> GREATEREQUAL exp expression_prime .

    RIGHTP          reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    AND             reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    OR              reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    EOS             reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    SEPARATOR       reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    ELSEIF          reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)
    ELSE            reduce using rule 75 (expression_prime -> GREATEREQUAL exp expression_prime .)


state 204

    (76) expression_prime -> LESSEQUAL exp expression_prime .

    RIGHTP          reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    AND             reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    OR              reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    EOS             reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    SEPARATOR       reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    ELSEIF          reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)
    ELSE            reduce using rule 76 (expression_prime -> LESSEQUAL exp expression_prime .)


state 205

    (54) condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body . RIGHTBRACE

    RIGHTBRACE      shift and go to state 234


state 206

    (57) condition_prime -> SEPARATOR assignment condition_prime .

    EOS             reduce using rule 57 (condition_prime -> SEPARATOR assignment condition_prime .)
    ELSEIF          reduce using rule 57 (condition_prime -> SEPARATOR assignment condition_prime .)
    ELSE            reduce using rule 57 (condition_prime -> SEPARATOR assignment condition_prime .)


state 207

    (58) condition_prime -> EOS compoundexp EOS . increment RIGHTP LEFTBRACE body RIGHTBRACE
    (43) increment -> . ID increment_prime

    ID              shift and go to state 236

    increment                      shift and go to state 235

state 208

    (60) condition_third_prime -> statement condition_fourth_prime .

    EOS             reduce using rule 60 (condition_third_prime -> statement condition_fourth_prime .)
    ELSEIF          reduce using rule 60 (condition_third_prime -> statement condition_fourth_prime .)
    ELSE            reduce using rule 60 (condition_third_prime -> statement condition_fourth_prime .)


state 209

    (62) condition_fourth_prime -> ELSEIF . condition_second_prime
    (59) condition_second_prime -> . LEFTP compoundexp RIGHTP condition_third_prime

    LEFTP           shift and go to state 53

    condition_second_prime         shift and go to state 237

state 210

    (63) condition_fourth_prime -> ELSE . condition_fifth_prime
    (65) condition_fifth_prime -> . statement
    (66) condition_fifth_prime -> . LEFTB body RIGHTB
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    LEFTB           shift and go to state 240
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    condition_fifth_prime          shift and go to state 238
    statement                      shift and go to state 239
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 211

    (61) condition_third_prime -> LEFTBRACE body . RIGHTBRACE condition_fourth_prime

    RIGHTBRACE      shift and go to state 241


state 212

    (108) specialfunction_prime -> CIRCLE LEFTP exp RIGHTP .

    EOS             reduce using rule 108 (specialfunction_prime -> CIRCLE LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 108 (specialfunction_prime -> CIRCLE LEFTP exp RIGHTP .)
    ELSE            reduce using rule 108 (specialfunction_prime -> CIRCLE LEFTP exp RIGHTP .)


state 213

    (109) specialfunction_prime -> SQUARE LEFTP exp SEPARATOR . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 242
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 214

    (110) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 243
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 215

    (111) specialfunction_prime -> FORWARD LEFTP exp RIGHTP .

    EOS             reduce using rule 111 (specialfunction_prime -> FORWARD LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 111 (specialfunction_prime -> FORWARD LEFTP exp RIGHTP .)
    ELSE            reduce using rule 111 (specialfunction_prime -> FORWARD LEFTP exp RIGHTP .)


state 216

    (112) specialfunction_prime -> BACK LEFTP exp RIGHTP .

    EOS             reduce using rule 112 (specialfunction_prime -> BACK LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 112 (specialfunction_prime -> BACK LEFTP exp RIGHTP .)
    ELSE            reduce using rule 112 (specialfunction_prime -> BACK LEFTP exp RIGHTP .)


state 217

    (113) specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP .

    EOS             reduce using rule 113 (specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 113 (specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP .)
    ELSE            reduce using rule 113 (specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP .)


state 218

    (114) specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP .

    EOS             reduce using rule 114 (specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 114 (specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP .)
    ELSE            reduce using rule 114 (specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP .)


state 219

    (115) specialfunction_prime -> COLOR LEFTP exp SEPARATOR . exp SEPARATOR exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 244
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 220

    (116) specialfunction_prime -> ARCH LEFTP exp RIGHTP .

    EOS             reduce using rule 116 (specialfunction_prime -> ARCH LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 116 (specialfunction_prime -> ARCH LEFTP exp RIGHTP .)
    ELSE            reduce using rule 116 (specialfunction_prime -> ARCH LEFTP exp RIGHTP .)


state 221

    (117) specialfunction_prime -> LINE LEFTP exp SEPARATOR . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 245
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 222

    (118) specialfunction_prime -> THICKNESS LEFTP exp RIGHTP .

    EOS             reduce using rule 118 (specialfunction_prime -> THICKNESS LEFTP exp RIGHTP .)
    ELSEIF          reduce using rule 118 (specialfunction_prime -> THICKNESS LEFTP exp RIGHTP .)
    ELSE            reduce using rule 118 (specialfunction_prime -> THICKNESS LEFTP exp RIGHTP .)


state 223

    (31) modules_second_prime -> type ID modules_third_prime .

    MAIN            reduce using rule 31 (modules_second_prime -> type ID modules_third_prime .)
    FUNCTION        reduce using rule 31 (modules_second_prime -> type ID modules_third_prime .)


state 224

    (32) modules_third_prime -> SEPARATOR . modules_second_prime
    (31) modules_second_prime -> . type ID modules_third_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15

    modules_second_prime           shift and go to state 246
    type                           shift and go to state 144

state 225

    (33) modules_third_prime -> RIGHTP . LEFTBRACE modules_fourth_prime

    LEFTBRACE       shift and go to state 247


state 226

    (16) vars_third_prime -> LEFTB . exp RIGHTB
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 248
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 227

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB vars_third_prime .

    SEPARATOR       reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB vars_third_prime .)
    EOS             reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB vars_third_prime .)


state 228

    (68) functioncall_prime -> SEPARATOR exp functioncall_prime .

    EOS             reduce using rule 68 (functioncall_prime -> SEPARATOR exp functioncall_prime .)
    ELSEIF          reduce using rule 68 (functioncall_prime -> SEPARATOR exp functioncall_prime .)
    ELSE            reduce using rule 68 (functioncall_prime -> SEPARATOR exp functioncall_prime .)


state 229

    (52) assignment_second_prime -> LEFTB exp RIGHTB .

    EQUALS          reduce using rule 52 (assignment_second_prime -> LEFTB exp RIGHTB .)


state 230

    (101) factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .

    MULTIPLY        reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    DIVIDE          reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    PLUS            reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    MINUS           reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTB          reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATER         reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESS            reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EQUAL           reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    NOTEQUAL        reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATEREQUAL    reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESSEQUAL       reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTP          reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    AND             reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    OR              reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    SEPARATOR       reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EOS             reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    ELSEIF          reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    ELSE            reduce using rule 101 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)


state 231

    (94) operand_second_prime -> LEFTB . exp RIGHTB
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 249
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 232

    (90) operand_prime -> LEFTB exp RIGHTB operand_second_prime .

    MULTIPLY        reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    DIVIDE          reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    PLUS            reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    MINUS           reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    RIGHTB          reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    GREATER         reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    LESS            reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    EQUAL           reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    NOTEQUAL        reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    GREATEREQUAL    reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    LESSEQUAL       reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    RIGHTP          reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    AND             reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    OR              reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    SEPARATOR       reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    EOS             reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    ELSEIF          reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    ELSE            reduce using rule 90 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)


state 233

    (95) operand_third_prime -> SEPARATOR exp . operand_third_prime
    (95) operand_third_prime -> . SEPARATOR exp operand_third_prime
    (96) operand_third_prime -> . RIGHTP

    SEPARATOR       shift and go to state 197
    RIGHTP          shift and go to state 198

    operand_third_prime            shift and go to state 250

state 234

    (54) condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE .

    EOS             reduce using rule 54 (condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE .)
    ELSEIF          reduce using rule 54 (condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE .)
    ELSE            reduce using rule 54 (condition -> WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE .)


state 235

    (58) condition_prime -> EOS compoundexp EOS increment . RIGHTP LEFTBRACE body RIGHTBRACE

    RIGHTP          shift and go to state 251


state 236

    (43) increment -> ID . increment_prime
    (44) increment_prime -> . EQUALS increment_second_prime
    (45) increment_prime -> . INCREMENT

    EQUALS          shift and go to state 253
    INCREMENT       shift and go to state 254

    increment_prime                shift and go to state 252

state 237

    (62) condition_fourth_prime -> ELSEIF condition_second_prime .

    EOS             reduce using rule 62 (condition_fourth_prime -> ELSEIF condition_second_prime .)
    ELSEIF          reduce using rule 62 (condition_fourth_prime -> ELSEIF condition_second_prime .)
    ELSE            reduce using rule 62 (condition_fourth_prime -> ELSEIF condition_second_prime .)


state 238

    (63) condition_fourth_prime -> ELSE condition_fifth_prime .

    EOS             reduce using rule 63 (condition_fourth_prime -> ELSE condition_fifth_prime .)
    ELSEIF          reduce using rule 63 (condition_fourth_prime -> ELSE condition_fifth_prime .)
    ELSE            reduce using rule 63 (condition_fourth_prime -> ELSE condition_fifth_prime .)


state 239

    (65) condition_fifth_prime -> statement .

    EOS             reduce using rule 65 (condition_fifth_prime -> statement .)
    ELSEIF          reduce using rule 65 (condition_fifth_prime -> statement .)
    ELSE            reduce using rule 65 (condition_fifth_prime -> statement .)


state 240

    (66) condition_fifth_prime -> LEFTB . body RIGHTB
    (25) body -> . statement EOS body_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    body                           shift and go to state 255
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 241

    (61) condition_third_prime -> LEFTBRACE body RIGHTBRACE . condition_fourth_prime
    (62) condition_fourth_prime -> . ELSEIF condition_second_prime
    (63) condition_fourth_prime -> . ELSE condition_fifth_prime
    (64) condition_fourth_prime -> .

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ELSEIF          shift and go to state 209
    ELSE            shift and go to state 210
    EOS             reduce using rule 64 (condition_fourth_prime -> .)

  ! ELSEIF          [ reduce using rule 64 (condition_fourth_prime -> .) ]
  ! ELSE            [ reduce using rule 64 (condition_fourth_prime -> .) ]

    condition_fourth_prime         shift and go to state 256

state 242

    (109) specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp . RIGHTP

    RIGHTP          shift and go to state 257


state 243

    (110) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp . RIGHTP

    RIGHTP          shift and go to state 258


state 244

    (115) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp . SEPARATOR exp RIGHTP

    SEPARATOR       shift and go to state 259


state 245

    (117) specialfunction_prime -> LINE LEFTP exp SEPARATOR exp . RIGHTP

    RIGHTP          shift and go to state 260


state 246

    (32) modules_third_prime -> SEPARATOR modules_second_prime .

    MAIN            reduce using rule 32 (modules_third_prime -> SEPARATOR modules_second_prime .)
    FUNCTION        reduce using rule 32 (modules_third_prime -> SEPARATOR modules_second_prime .)


state 247

    (33) modules_third_prime -> RIGHTP LEFTBRACE . modules_fourth_prime
    (34) modules_fourth_prime -> . vars modules_fourth_prime
    (35) modules_fourth_prime -> . body RIGHTBRACE
    (10) vars -> . type vars_prime vars_fourth_prime
    (25) body -> . statement EOS body_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    modules_fourth_prime           shift and go to state 261
    vars                           shift and go to state 262
    body                           shift and go to state 263
    type                           shift and go to state 10
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 248

    (16) vars_third_prime -> LEFTB exp . RIGHTB

    RIGHTB          shift and go to state 264


state 249

    (94) operand_second_prime -> LEFTB exp . RIGHTB

    RIGHTB          shift and go to state 265


state 250

    (95) operand_third_prime -> SEPARATOR exp operand_third_prime .

    MULTIPLY        reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    DIVIDE          reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    PLUS            reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    MINUS           reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    RIGHTB          reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    GREATER         reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    LESS            reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    EQUAL           reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    NOTEQUAL        reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    GREATEREQUAL    reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    LESSEQUAL       reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    RIGHTP          reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    AND             reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    OR              reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    SEPARATOR       reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    EOS             reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    ELSEIF          reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    ELSE            reduce using rule 95 (operand_third_prime -> SEPARATOR exp operand_third_prime .)


state 251

    (58) condition_prime -> EOS compoundexp EOS increment RIGHTP . LEFTBRACE body RIGHTBRACE

    LEFTBRACE       shift and go to state 266


state 252

    (43) increment -> ID increment_prime .

    RIGHTP          reduce using rule 43 (increment -> ID increment_prime .)


state 253

    (44) increment_prime -> EQUALS . increment_second_prime
    (46) increment_second_prime -> . CSTI PLUS ID
    (47) increment_second_prime -> . ID PLUS CSTI

    CSTI            shift and go to state 268
    ID              shift and go to state 269

    increment_second_prime         shift and go to state 267

state 254

    (45) increment_prime -> INCREMENT .

    RIGHTP          reduce using rule 45 (increment_prime -> INCREMENT .)


state 255

    (66) condition_fifth_prime -> LEFTB body . RIGHTB

    RIGHTB          shift and go to state 270


state 256

    (61) condition_third_prime -> LEFTBRACE body RIGHTBRACE condition_fourth_prime .

    EOS             reduce using rule 61 (condition_third_prime -> LEFTBRACE body RIGHTBRACE condition_fourth_prime .)
    ELSEIF          reduce using rule 61 (condition_third_prime -> LEFTBRACE body RIGHTBRACE condition_fourth_prime .)
    ELSE            reduce using rule 61 (condition_third_prime -> LEFTBRACE body RIGHTBRACE condition_fourth_prime .)


state 257

    (109) specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp RIGHTP .

    EOS             reduce using rule 109 (specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSEIF          reduce using rule 109 (specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSE            reduce using rule 109 (specialfunction_prime -> SQUARE LEFTP exp SEPARATOR exp RIGHTP .)


state 258

    (110) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP .

    EOS             reduce using rule 110 (specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSEIF          reduce using rule 110 (specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSE            reduce using rule 110 (specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP .)


state 259

    (115) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR . exp RIGHTP
    (81) exp -> . term exp_prime
    (97) term -> . factor term_prime
    (101) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (102) factor -> . operand
    (103) factor -> . PLUS operand
    (104) factor -> . MINUS operand
    (85) operand -> . CSTI evaluate_operation_int
    (86) operand -> . CSTF evaluate_operation_float
    (87) operand -> . ID operand_prime

    LEFTP           shift and go to state 68
    PLUS            shift and go to state 70
    MINUS           shift and go to state 71
    CSTI            shift and go to state 72
    CSTF            shift and go to state 73
    ID              shift and go to state 74

    exp                            shift and go to state 271
    term                           shift and go to state 66
    factor                         shift and go to state 67
    operand                        shift and go to state 69

state 260

    (117) specialfunction_prime -> LINE LEFTP exp SEPARATOR exp RIGHTP .

    EOS             reduce using rule 117 (specialfunction_prime -> LINE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSEIF          reduce using rule 117 (specialfunction_prime -> LINE LEFTP exp SEPARATOR exp RIGHTP .)
    ELSE            reduce using rule 117 (specialfunction_prime -> LINE LEFTP exp SEPARATOR exp RIGHTP .)


state 261

    (33) modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .

    MAIN            reduce using rule 33 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    FUNCTION        reduce using rule 33 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)


state 262

    (34) modules_fourth_prime -> vars . modules_fourth_prime
    (34) modules_fourth_prime -> . vars modules_fourth_prime
    (35) modules_fourth_prime -> . body RIGHTBRACE
    (10) vars -> . type vars_prime vars_fourth_prime
    (25) body -> . statement EOS body_prime
    (22) type -> . TYPEINT
    (23) type -> . TYPEFLOAT
    (24) type -> . TYPECHAR
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    TYPEINT         shift and go to state 13
    TYPEFLOAT       shift and go to state 14
    TYPECHAR        shift and go to state 15
    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    vars                           shift and go to state 262
    modules_fourth_prime           shift and go to state 272
    body                           shift and go to state 263
    type                           shift and go to state 10
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 263

    (35) modules_fourth_prime -> body . RIGHTBRACE

    RIGHTBRACE      shift and go to state 273


state 264

    (16) vars_third_prime -> LEFTB exp RIGHTB .

    SEPARATOR       reduce using rule 16 (vars_third_prime -> LEFTB exp RIGHTB .)
    EOS             reduce using rule 16 (vars_third_prime -> LEFTB exp RIGHTB .)


state 265

    (94) operand_second_prime -> LEFTB exp RIGHTB .

    MULTIPLY        reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    DIVIDE          reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    PLUS            reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    MINUS           reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    RIGHTB          reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    GREATER         reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    LESS            reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    EQUAL           reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    NOTEQUAL        reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    GREATEREQUAL    reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    LESSEQUAL       reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    RIGHTP          reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    AND             reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    OR              reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    SEPARATOR       reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    EOS             reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    ELSEIF          reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)
    ELSE            reduce using rule 94 (operand_second_prime -> LEFTB exp RIGHTB .)


state 266

    (58) condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE . body RIGHTBRACE
    (25) body -> . statement EOS body_prime
    (38) statement -> . assignment
    (39) statement -> . print
    (40) statement -> . functioncall
    (41) statement -> . condition
    (42) statement -> . specialfunction
    (48) assignment -> . ID assignment_prime EQUALS push_operator expression
    (78) print -> . PRINT LEFTP print_prime
    (67) functioncall -> . ID LEFTP fake_bottom exp functioncall_prime
    (54) condition -> . WHILE LEFTP compoundexp RIGHTP LEFTBRACE body RIGHTBRACE
    (55) condition -> . FOR LEFTP assignment condition_prime
    (56) condition -> . IF condition_second_prime
    (107) specialfunction -> . JEDO POINT specialfunction_prime

    ID              shift and go to state 30
    PRINT           shift and go to state 31
    WHILE           shift and go to state 32
    FOR             shift and go to state 33
    IF              shift and go to state 34
    JEDO            shift and go to state 35

    body                           shift and go to state 274
    statement                      shift and go to state 24
    assignment                     shift and go to state 25
    print                          shift and go to state 26
    functioncall                   shift and go to state 27
    condition                      shift and go to state 28
    specialfunction                shift and go to state 29

state 267

    (44) increment_prime -> EQUALS increment_second_prime .

    RIGHTP          reduce using rule 44 (increment_prime -> EQUALS increment_second_prime .)


state 268

    (46) increment_second_prime -> CSTI . PLUS ID

    PLUS            shift and go to state 275


state 269

    (47) increment_second_prime -> ID . PLUS CSTI

    PLUS            shift and go to state 276


state 270

    (66) condition_fifth_prime -> LEFTB body RIGHTB .

    EOS             reduce using rule 66 (condition_fifth_prime -> LEFTB body RIGHTB .)
    ELSEIF          reduce using rule 66 (condition_fifth_prime -> LEFTB body RIGHTB .)
    ELSE            reduce using rule 66 (condition_fifth_prime -> LEFTB body RIGHTB .)


state 271

    (115) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp . RIGHTP

    RIGHTP          shift and go to state 277


state 272

    (34) modules_fourth_prime -> vars modules_fourth_prime .

    MAIN            reduce using rule 34 (modules_fourth_prime -> vars modules_fourth_prime .)
    FUNCTION        reduce using rule 34 (modules_fourth_prime -> vars modules_fourth_prime .)


state 273

    (35) modules_fourth_prime -> body RIGHTBRACE .

    MAIN            reduce using rule 35 (modules_fourth_prime -> body RIGHTBRACE .)
    FUNCTION        reduce using rule 35 (modules_fourth_prime -> body RIGHTBRACE .)


state 274

    (58) condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body . RIGHTBRACE

    RIGHTBRACE      shift and go to state 278


state 275

    (46) increment_second_prime -> CSTI PLUS . ID

    ID              shift and go to state 279


state 276

    (47) increment_second_prime -> ID PLUS . CSTI

    CSTI            shift and go to state 280


state 277

    (115) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP .

    EOS             reduce using rule 115 (specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP .)
    ELSEIF          reduce using rule 115 (specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP .)
    ELSE            reduce using rule 115 (specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP .)


state 278

    (58) condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE .

    EOS             reduce using rule 58 (condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE .)
    ELSEIF          reduce using rule 58 (condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE .)
    ELSE            reduce using rule 58 (condition_prime -> EOS compoundexp EOS increment RIGHTP LEFTBRACE body RIGHTBRACE .)


state 279

    (46) increment_second_prime -> CSTI PLUS ID .

    RIGHTP          reduce using rule 46 (increment_second_prime -> CSTI PLUS ID .)


state 280

    (47) increment_second_prime -> ID PLUS CSTI .

    RIGHTP          reduce using rule 47 (increment_second_prime -> ID PLUS CSTI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSEIF in state 172 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 172 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 241 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 241 resolved as shift
