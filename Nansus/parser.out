Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PRGM ID main_quad add_program_function EOS program_prime
Rule 2     program_prime -> vars program_prime
Rule 3     program_prime -> modules program_prime
Rule 4     program_prime -> program_second_prime
Rule 5     program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime
Rule 6     program_third_prime -> vars program_third_prime
Rule 7     program_third_prime -> body RIGHTBRACE EOS
Rule 8     main_quad -> <empty>
Rule 9     add_program_function -> <empty>
Rule 10    fill_main -> <empty>
Rule 11    vars -> type vars_prime vars_fourth_prime
Rule 12    vars_prime -> ID save_id vars_second_prime
Rule 13    vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_third_prime
Rule 14    vars_second_prime -> <empty>
Rule 15    first_dimension -> <empty>
Rule 16    vars_third_prime -> LEFTB exp RIGHTB second_dimension dimensional_address_allocation
Rule 17    vars_third_prime -> dimensional_address_allocation
Rule 18    second_dimension -> <empty>
Rule 19    dimensional_address_allocation -> <empty>
Rule 20    vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime
Rule 21    vars_fourth_prime -> store_variable vars_fifth_prime
Rule 22    vars_fifth_prime -> EOS
Rule 23    save_id -> <empty>
Rule 24    change_dimension -> <empty>
Rule 25    store_variable -> <empty>
Rule 26    type -> TYPEINT
Rule 27    type -> TYPEFLOAT
Rule 28    type -> TYPECHAR
Rule 29    body -> statement body_prime
Rule 30    body_prime -> body
Rule 31    body_prime -> <empty>
Rule 32    modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime
Rule 33    modules_prime -> type
Rule 34    modules_prime -> NOTYPE void_type
Rule 35    modules_second_prime -> type ID add_parameter modules_third_prime
Rule 36    modules_third_prime -> SEPARATOR modules_second_prime
Rule 37    modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime
Rule 38    modules_fourth_prime -> vars modules_fourth_prime
Rule 39    modules_fourth_prime -> body modules_fifth_prime
Rule 40    modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad
Rule 41    modules_fifth_prime -> RIGHTBRACE endproc_quad
Rule 42    void_type -> <empty>
Rule 43    add_module -> <empty>
Rule 44    add_parameter -> <empty>
Rule 45    return_quad -> <empty>
Rule 46    endproc_quad -> <empty>
Rule 47    statement -> assignment EOS
Rule 48    statement -> print EOS
Rule 49    statement -> functioncall EOS
Rule 50    statement -> condition
Rule 51    statement -> specialfunction EOS
Rule 52    statement -> input EOS
Rule 53    compoundexp -> expression eval_logic compoundexp_prime
Rule 54    compoundexp_prime -> AND push_operator compoundexp
Rule 55    compoundexp_prime -> OR push_operator compoundexp
Rule 56    compoundexp_prime -> <empty>
Rule 57    eval_logic -> <empty>
Rule 58    expression -> exp eval_relational expression_prime
Rule 59    expression_prime -> GREATER push_operator expression
Rule 60    expression_prime -> LESS push_operator expression
Rule 61    expression_prime -> EQUAL push_operator expression
Rule 62    expression_prime -> NOTEQUAL push_operator expression
Rule 63    expression_prime -> GREATEREQUAL push_operator expression
Rule 64    expression_prime -> LESSEQUAL push_operator expression
Rule 65    expression_prime -> <empty>
Rule 66    eval_relational -> <empty>
Rule 67    exp -> term eval_term exp_prime
Rule 68    exp_prime -> PLUS push_operator exp
Rule 69    exp_prime -> MINUS push_operator exp
Rule 70    exp_prime -> <empty>
Rule 71    eval_term -> <empty>
Rule 72    term -> factor eval_factor term_prime
Rule 73    term_prime -> MULTIPLY push_operator term
Rule 74    term_prime -> DIVIDE push_operator term
Rule 75    term_prime -> <empty>
Rule 76    eval_factor -> <empty>
Rule 77    factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom
Rule 78    factor -> operand
Rule 79    factor -> PLUS operand
Rule 80    factor -> MINUS operand
Rule 81    fake_bottom -> <empty>
Rule 82    pop_fake_bottom -> <empty>
Rule 83    operand -> CSTI evaluate_operation_int
Rule 84    operand -> CSTF evaluate_operation_float
Rule 85    operand -> CSTC evaluate_operation_char
Rule 86    operand -> ID push_id operand_prime
Rule 87    operand_prime -> LEFTB exp RIGHTB operand_second_prime
Rule 88    operand_prime -> LEFTP exp operand_third_prime
Rule 89    operand_prime -> <empty>
Rule 90    operand_second_prime -> <empty>
Rule 91    operand_second_prime -> LEFTB exp RIGHTB
Rule 92    operand_third_prime -> SEPARATOR exp operand_third_prime
Rule 93    operand_third_prime -> RIGHTP
Rule 94    push_id -> <empty>
Rule 95    evaluate_operation_int -> <empty>
Rule 96    evaluate_operation_float -> <empty>
Rule 97    evaluate_operation_char -> <empty>
Rule 98    assignment -> ID push_id assignment_prime EQUALS push_operator expression eval_assignment
Rule 99    assignment_prime -> <empty>
Rule 100   assignment_prime -> LEFTB exp RIGHTB assignment_second_prime
Rule 101   assignment_second_prime -> <empty>
Rule 102   assignment_second_prime -> LEFTB exp RIGHTB
Rule 103   eval_assignment -> <empty>
Rule 104   condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
Rule 105   condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
Rule 106   condition -> IF condition_prime
Rule 107   condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime
Rule 108   condition_second_prime -> statement condition_third_prime
Rule 109   condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime
Rule 110   condition_third_prime -> goto_if_fill ELSEIF condition_prime
Rule 111   condition_third_prime -> ELSE goto_else condition_fourth_prime
Rule 112   condition_third_prime -> goto_if_fill
Rule 113   condition_fourth_prime -> statement goto_if_fill
Rule 114   condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill
Rule 115   save_jump -> <empty>
Rule 116   gotof_quad -> <empty>
Rule 117   goto_else -> <empty>
Rule 118   gotov_quad -> <empty>
Rule 119   goto_if_fill -> <empty>
Rule 120   goto_while_fill -> <empty>
Rule 121   functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
Rule 122   functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime
Rule 123   functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom store_memory_data go_sub_quad
Rule 124   verify_function -> <empty>
Rule 125   verify_parameter -> <empty>
Rule 126   verify_param_count -> <empty>
Rule 127   store_memory_data -> <empty>
Rule 128   go_sub_quad -> <empty>
Rule 129   push_operator -> <empty>
Rule 130   print -> PRINT LEFTP expression print_quad print_prime
Rule 131   print_prime -> SEPARATOR expression print_quad print_prime
Rule 132   print_prime -> RIGHTP
Rule 133   print_quad -> <empty>
Rule 134   specialfunction -> JEDO POINT specialfunction_prime
Rule 135   specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad
Rule 136   specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad
Rule 137   specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad
Rule 138   specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad
Rule 139   specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad
Rule 140   specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad
Rule 141   specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad
Rule 142   specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad
Rule 143   specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
Rule 144   specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad
Rule 145   specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad
Rule 146   specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad
Rule 147   specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad
Rule 148   specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
Rule 149   specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad
Rule 150   specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad
Rule 151   specialfunction_prime -> <empty>
Rule 152   no_argument_quad -> <empty>
Rule 153   one_argument_quad -> <empty>
Rule 154   two_argument_quad -> <empty>
Rule 155   three_argument_quad -> <empty>
Rule 156   input -> READINPUT LEFTP ID input_quad RIGHTP
Rule 157   input_quad -> <empty>

Terminals, with rules where they appear

AND                  : 54
BACK                 : 140
CIRCLE               : 135
COLOR                : 143
CSTC                 : 85
CSTF                 : 84
CSTI                 : 83
DIVIDE               : 74
DO                   : 105
ELSE                 : 111
ELSEIF               : 110
EOS                  : 1 7 22 40 47 48 49 51 52
EQUAL                : 61
EQUALS               : 98
FILLSHAPE            : 148
FORWARD              : 139
FUNCTION             : 32
GREATER              : 59
GREATEREQUAL         : 63
ID                   : 1 12 32 35 86 98 121 156
IF                   : 106
JEDO                 : 134
LEFTB                : 13 16 87 91 100 102
LEFTBRACE            : 5 37 104 105 109 114
LEFTP                : 32 77 88 104 105 107 121 130 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 156
LESS                 : 60
LESSEQUAL            : 64
MAIN                 : 5
MINUS                : 69 80
MULTIPLY             : 73
NOTEQUAL             : 62
NOTYPE               : 34
OR                   : 55
PLUS                 : 68 79
POINT                : 134
PRGM                 : 1
PRINT                : 130
READINPUT            : 156
RECTANGLE            : 137
RESTART              : 150
RETURN               : 40
RIGHTB               : 13 16 87 91 100 102
RIGHTBRACE           : 7 40 41 104 105 109 114
RIGHTP               : 37 77 93 104 105 107 123 132 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 156
SEPARATOR            : 20 36 92 122 131 137 143 143 148 148
SQUARE               : 136
STARTFILL            : 147
STARTPEN             : 145
STOPFILL             : 149
STOPPEN              : 146
THICKNESS            : 144
TRIANGLE             : 138
TURNLEFT             : 142
TURNRIGHT            : 141
TYPECHAR             : 28
TYPEFLOAT            : 27
TYPEINT              : 26
WHILE                : 104 105
error                : 

Nonterminals, with rules where they appear

add_module           : 32
add_parameter        : 35
add_program_function : 1
assignment           : 47
assignment_prime     : 98
assignment_second_prime : 100
body                 : 7 30 39 104 105 109 114
body_prime           : 29
change_dimension     : 13
compoundexp          : 54 55 104 105 107
compoundexp_prime    : 53
condition            : 50
condition_fourth_prime : 111
condition_prime      : 106 110
condition_second_prime : 107
condition_third_prime : 108 109
dimensional_address_allocation : 16 17
endproc_quad         : 40 41
eval_assignment      : 98
eval_factor          : 72
eval_logic           : 53
eval_relational      : 58
eval_term            : 67
evaluate_operation_char : 85
evaluate_operation_float : 84
evaluate_operation_int : 83
exp                  : 13 16 40 58 68 69 87 88 91 92 100 102 121 122 135 136 137 137 138 139 140 141 142 143 143 143 144 148 148 148
exp_prime            : 67
expression           : 53 59 60 61 62 63 64 77 98 130 131
expression_prime     : 58
factor               : 72
fake_bottom          : 77 121
fill_main            : 5
first_dimension      : 13
functioncall         : 49
functioncall_prime   : 121 122
go_sub_quad          : 123
goto_else            : 111
goto_if_fill         : 110 112 113 114
goto_while_fill      : 104
gotof_quad           : 104 107
gotov_quad           : 105
input                : 52
input_quad           : 156
main_quad            : 1
modules              : 3
modules_fifth_prime  : 39
modules_fourth_prime : 37 38
modules_prime        : 32
modules_second_prime : 32 36
modules_third_prime  : 35
no_argument_quad     : 145 146 147 149 150
one_argument_quad    : 135 136 138 139 140 141 142 144
operand              : 78 79 80
operand_prime        : 86
operand_second_prime : 87
operand_third_prime  : 88 92
pop_fake_bottom      : 77 123
print                : 48
print_prime          : 130 131
print_quad           : 130 131
program              : 0
program_prime        : 1 2 3
program_second_prime : 4
program_third_prime  : 5 6
push_id              : 86 98
push_operator        : 54 55 59 60 61 62 63 64 68 69 73 74 98
return_quad          : 40
save_id              : 12
save_jump            : 104 105
second_dimension     : 16
specialfunction      : 51
specialfunction_prime : 134
statement            : 29 108 113
store_memory_data    : 123
store_variable       : 20 21
term                 : 67 73 74
term_prime           : 72
three_argument_quad  : 143 148
two_argument_quad    : 137
type                 : 11 33 35
vars                 : 2 6 38
vars_fifth_prime     : 21
vars_fourth_prime    : 11 20
vars_prime           : 11 20
vars_second_prime    : 12
vars_third_prime     : 13
verify_function      : 121
verify_param_count   : 123
verify_parameter     : 121 122
void_type            : 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PRGM ID main_quad add_program_function EOS program_prime

    PRGM            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PRGM . ID main_quad add_program_function EOS program_prime

    ID              shift and go to state 3


state 3

    (1) program -> PRGM ID . main_quad add_program_function EOS program_prime
    (8) main_quad -> .

    EOS             reduce using rule 8 (main_quad -> .)

    main_quad                      shift and go to state 4

state 4

    (1) program -> PRGM ID main_quad . add_program_function EOS program_prime
    (9) add_program_function -> .

    EOS             reduce using rule 9 (add_program_function -> .)

    add_program_function           shift and go to state 5

state 5

    (1) program -> PRGM ID main_quad add_program_function . EOS program_prime

    EOS             shift and go to state 6


state 6

    (1) program -> PRGM ID main_quad add_program_function EOS . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_fourth_prime
    (32) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    program_prime                  shift and go to state 7
    vars                           shift and go to state 8
    modules                        shift and go to state 9
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 7

    (1) program -> PRGM ID main_quad add_program_function EOS program_prime .

    $end            reduce using rule 1 (program -> PRGM ID main_quad add_program_function EOS program_prime .)


state 8

    (2) program_prime -> vars . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_fourth_prime
    (32) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    vars                           shift and go to state 8
    program_prime                  shift and go to state 17
    modules                        shift and go to state 9
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 9

    (3) program_prime -> modules . program_prime
    (2) program_prime -> . vars program_prime
    (3) program_prime -> . modules program_prime
    (4) program_prime -> . program_second_prime
    (11) vars -> . type vars_prime vars_fourth_prime
    (32) modules -> . FUNCTION modules_prime ID add_module LEFTP modules_second_prime
    (5) program_second_prime -> . MAIN fill_main LEFTBRACE program_third_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    FUNCTION        shift and go to state 12
    MAIN            shift and go to state 13
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules                        shift and go to state 9
    program_prime                  shift and go to state 18
    vars                           shift and go to state 8
    program_second_prime           shift and go to state 10
    type                           shift and go to state 11

state 10

    (4) program_prime -> program_second_prime .

    $end            reduce using rule 4 (program_prime -> program_second_prime .)


state 11

    (11) vars -> type . vars_prime vars_fourth_prime
    (12) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 20

    vars_prime                     shift and go to state 19

state 12

    (32) modules -> FUNCTION . modules_prime ID add_module LEFTP modules_second_prime
    (33) modules_prime -> . type
    (34) modules_prime -> . NOTYPE void_type
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    NOTYPE          shift and go to state 23
    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_prime                  shift and go to state 21
    type                           shift and go to state 22

state 13

    (5) program_second_prime -> MAIN . fill_main LEFTBRACE program_third_prime
    (10) fill_main -> .

    LEFTBRACE       reduce using rule 10 (fill_main -> .)

    fill_main                      shift and go to state 24

state 14

    (26) type -> TYPEINT .

    ID              reduce using rule 26 (type -> TYPEINT .)


state 15

    (27) type -> TYPEFLOAT .

    ID              reduce using rule 27 (type -> TYPEFLOAT .)


state 16

    (28) type -> TYPECHAR .

    ID              reduce using rule 28 (type -> TYPECHAR .)


state 17

    (2) program_prime -> vars program_prime .

    $end            reduce using rule 2 (program_prime -> vars program_prime .)


state 18

    (3) program_prime -> modules program_prime .

    $end            reduce using rule 3 (program_prime -> modules program_prime .)


state 19

    (11) vars -> type vars_prime . vars_fourth_prime
    (20) vars_fourth_prime -> . SEPARATOR store_variable vars_prime vars_fourth_prime
    (21) vars_fourth_prime -> . store_variable vars_fifth_prime
    (25) store_variable -> .

    SEPARATOR       shift and go to state 26
    EOS             reduce using rule 25 (store_variable -> .)

    vars_fourth_prime              shift and go to state 25
    store_variable                 shift and go to state 27

state 20

    (12) vars_prime -> ID . save_id vars_second_prime
    (23) save_id -> .

    LEFTB           reduce using rule 23 (save_id -> .)
    SEPARATOR       reduce using rule 23 (save_id -> .)
    EOS             reduce using rule 23 (save_id -> .)

    save_id                        shift and go to state 28

state 21

    (32) modules -> FUNCTION modules_prime . ID add_module LEFTP modules_second_prime

    ID              shift and go to state 29


state 22

    (33) modules_prime -> type .

    ID              reduce using rule 33 (modules_prime -> type .)


state 23

    (34) modules_prime -> NOTYPE . void_type
    (42) void_type -> .

    ID              reduce using rule 42 (void_type -> .)

    void_type                      shift and go to state 30

state 24

    (5) program_second_prime -> MAIN fill_main . LEFTBRACE program_third_prime

    LEFTBRACE       shift and go to state 31


state 25

    (11) vars -> type vars_prime vars_fourth_prime .

    FUNCTION        reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    MAIN            reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    TYPEINT         reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    TYPEFLOAT       reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    TYPECHAR        reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    ID              reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    PRINT           reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    WHILE           reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    DO              reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    IF              reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    JEDO            reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)
    READINPUT       reduce using rule 11 (vars -> type vars_prime vars_fourth_prime .)


state 26

    (20) vars_fourth_prime -> SEPARATOR . store_variable vars_prime vars_fourth_prime
    (25) store_variable -> .

    ID              reduce using rule 25 (store_variable -> .)

    store_variable                 shift and go to state 32

state 27

    (21) vars_fourth_prime -> store_variable . vars_fifth_prime
    (22) vars_fifth_prime -> . EOS

    EOS             shift and go to state 34

    vars_fifth_prime               shift and go to state 33

state 28

    (12) vars_prime -> ID save_id . vars_second_prime
    (13) vars_second_prime -> . change_dimension LEFTB exp RIGHTB first_dimension vars_third_prime
    (14) vars_second_prime -> .
    (24) change_dimension -> .

    SEPARATOR       reduce using rule 14 (vars_second_prime -> .)
    EOS             reduce using rule 14 (vars_second_prime -> .)
    LEFTB           reduce using rule 24 (change_dimension -> .)

    vars_second_prime              shift and go to state 35
    change_dimension               shift and go to state 36

state 29

    (32) modules -> FUNCTION modules_prime ID . add_module LEFTP modules_second_prime
    (43) add_module -> .

    LEFTP           reduce using rule 43 (add_module -> .)

    add_module                     shift and go to state 37

state 30

    (34) modules_prime -> NOTYPE void_type .

    ID              reduce using rule 34 (modules_prime -> NOTYPE void_type .)


state 31

    (5) program_second_prime -> MAIN fill_main LEFTBRACE . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body RIGHTBRACE EOS
    (11) vars -> . type vars_prime vars_fourth_prime
    (29) body -> . statement body_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    program_third_prime            shift and go to state 38
    vars                           shift and go to state 39
    body                           shift and go to state 40
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 32

    (20) vars_fourth_prime -> SEPARATOR store_variable . vars_prime vars_fourth_prime
    (12) vars_prime -> . ID save_id vars_second_prime

    ID              shift and go to state 20

    vars_prime                     shift and go to state 55

state 33

    (21) vars_fourth_prime -> store_variable vars_fifth_prime .

    FUNCTION        reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    MAIN            reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPEINT         reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPEFLOAT       reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    TYPECHAR        reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    ID              reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    PRINT           reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    WHILE           reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    DO              reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    IF              reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    JEDO            reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)
    READINPUT       reduce using rule 21 (vars_fourth_prime -> store_variable vars_fifth_prime .)


state 34

    (22) vars_fifth_prime -> EOS .

    FUNCTION        reduce using rule 22 (vars_fifth_prime -> EOS .)
    MAIN            reduce using rule 22 (vars_fifth_prime -> EOS .)
    TYPEINT         reduce using rule 22 (vars_fifth_prime -> EOS .)
    TYPEFLOAT       reduce using rule 22 (vars_fifth_prime -> EOS .)
    TYPECHAR        reduce using rule 22 (vars_fifth_prime -> EOS .)
    ID              reduce using rule 22 (vars_fifth_prime -> EOS .)
    PRINT           reduce using rule 22 (vars_fifth_prime -> EOS .)
    WHILE           reduce using rule 22 (vars_fifth_prime -> EOS .)
    DO              reduce using rule 22 (vars_fifth_prime -> EOS .)
    IF              reduce using rule 22 (vars_fifth_prime -> EOS .)
    JEDO            reduce using rule 22 (vars_fifth_prime -> EOS .)
    READINPUT       reduce using rule 22 (vars_fifth_prime -> EOS .)


state 35

    (12) vars_prime -> ID save_id vars_second_prime .

    SEPARATOR       reduce using rule 12 (vars_prime -> ID save_id vars_second_prime .)
    EOS             reduce using rule 12 (vars_prime -> ID save_id vars_second_prime .)


state 36

    (13) vars_second_prime -> change_dimension . LEFTB exp RIGHTB first_dimension vars_third_prime

    LEFTB           shift and go to state 56


state 37

    (32) modules -> FUNCTION modules_prime ID add_module . LEFTP modules_second_prime

    LEFTP           shift and go to state 57


state 38

    (5) program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime .

    $end            reduce using rule 5 (program_second_prime -> MAIN fill_main LEFTBRACE program_third_prime .)


state 39

    (6) program_third_prime -> vars . program_third_prime
    (6) program_third_prime -> . vars program_third_prime
    (7) program_third_prime -> . body RIGHTBRACE EOS
    (11) vars -> . type vars_prime vars_fourth_prime
    (29) body -> . statement body_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    vars                           shift and go to state 39
    program_third_prime            shift and go to state 58
    body                           shift and go to state 40
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 40

    (7) program_third_prime -> body . RIGHTBRACE EOS

    RIGHTBRACE      shift and go to state 59


state 41

    (29) body -> statement . body_prime
    (30) body_prime -> . body
    (31) body_prime -> .
    (29) body -> . statement body_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    RIGHTBRACE      reduce using rule 31 (body_prime -> .)
    RETURN          reduce using rule 31 (body_prime -> .)
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    statement                      shift and go to state 41
    body_prime                     shift and go to state 60
    body                           shift and go to state 61
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 42

    (47) statement -> assignment . EOS

    EOS             shift and go to state 62


state 43

    (48) statement -> print . EOS

    EOS             shift and go to state 63


state 44

    (49) statement -> functioncall . EOS

    EOS             shift and go to state 64


state 45

    (50) statement -> condition .

    ID              reduce using rule 50 (statement -> condition .)
    PRINT           reduce using rule 50 (statement -> condition .)
    WHILE           reduce using rule 50 (statement -> condition .)
    DO              reduce using rule 50 (statement -> condition .)
    IF              reduce using rule 50 (statement -> condition .)
    JEDO            reduce using rule 50 (statement -> condition .)
    READINPUT       reduce using rule 50 (statement -> condition .)
    RIGHTBRACE      reduce using rule 50 (statement -> condition .)
    RETURN          reduce using rule 50 (statement -> condition .)
    ELSE            reduce using rule 50 (statement -> condition .)
    ELSEIF          reduce using rule 50 (statement -> condition .)


state 46

    (51) statement -> specialfunction . EOS

    EOS             shift and go to state 65


state 47

    (52) statement -> input . EOS

    EOS             shift and go to state 66


state 48

    (98) assignment -> ID . push_id assignment_prime EQUALS push_operator expression eval_assignment
    (121) functioncall -> ID . verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (94) push_id -> .
    (124) verify_function -> .

    LEFTB           reduce using rule 94 (push_id -> .)
    EQUALS          reduce using rule 94 (push_id -> .)
    LEFTP           reduce using rule 124 (verify_function -> .)

    push_id                        shift and go to state 67
    verify_function                shift and go to state 68

state 49

    (130) print -> PRINT . LEFTP expression print_quad print_prime

    LEFTP           shift and go to state 69


state 50

    (104) condition -> WHILE . save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (115) save_jump -> .

    LEFTP           reduce using rule 115 (save_jump -> .)

    save_jump                      shift and go to state 70

state 51

    (105) condition -> DO . save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (115) save_jump -> .

    LEFTBRACE       reduce using rule 115 (save_jump -> .)

    save_jump                      shift and go to state 71

state 52

    (106) condition -> IF . condition_prime
    (107) condition_prime -> . LEFTP compoundexp RIGHTP gotof_quad condition_second_prime

    LEFTP           shift and go to state 73

    condition_prime                shift and go to state 72

state 53

    (134) specialfunction -> JEDO . POINT specialfunction_prime

    POINT           shift and go to state 74


state 54

    (156) input -> READINPUT . LEFTP ID input_quad RIGHTP

    LEFTP           shift and go to state 75


state 55

    (20) vars_fourth_prime -> SEPARATOR store_variable vars_prime . vars_fourth_prime
    (20) vars_fourth_prime -> . SEPARATOR store_variable vars_prime vars_fourth_prime
    (21) vars_fourth_prime -> . store_variable vars_fifth_prime
    (25) store_variable -> .

    SEPARATOR       shift and go to state 26
    EOS             reduce using rule 25 (store_variable -> .)

    store_variable                 shift and go to state 27
    vars_fourth_prime              shift and go to state 76

state 56

    (13) vars_second_prime -> change_dimension LEFTB . exp RIGHTB first_dimension vars_third_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 57

    (32) modules -> FUNCTION modules_prime ID add_module LEFTP . modules_second_prime
    (35) modules_second_prime -> . type ID add_parameter modules_third_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_second_prime           shift and go to state 88
    type                           shift and go to state 89

state 58

    (6) program_third_prime -> vars program_third_prime .

    $end            reduce using rule 6 (program_third_prime -> vars program_third_prime .)


state 59

    (7) program_third_prime -> body RIGHTBRACE . EOS

    EOS             shift and go to state 90


state 60

    (29) body -> statement body_prime .

    RIGHTBRACE      reduce using rule 29 (body -> statement body_prime .)
    RETURN          reduce using rule 29 (body -> statement body_prime .)


state 61

    (30) body_prime -> body .

    RIGHTBRACE      reduce using rule 30 (body_prime -> body .)
    RETURN          reduce using rule 30 (body_prime -> body .)


state 62

    (47) statement -> assignment EOS .

    ID              reduce using rule 47 (statement -> assignment EOS .)
    PRINT           reduce using rule 47 (statement -> assignment EOS .)
    WHILE           reduce using rule 47 (statement -> assignment EOS .)
    DO              reduce using rule 47 (statement -> assignment EOS .)
    IF              reduce using rule 47 (statement -> assignment EOS .)
    JEDO            reduce using rule 47 (statement -> assignment EOS .)
    READINPUT       reduce using rule 47 (statement -> assignment EOS .)
    RIGHTBRACE      reduce using rule 47 (statement -> assignment EOS .)
    RETURN          reduce using rule 47 (statement -> assignment EOS .)
    ELSE            reduce using rule 47 (statement -> assignment EOS .)
    ELSEIF          reduce using rule 47 (statement -> assignment EOS .)


state 63

    (48) statement -> print EOS .

    ID              reduce using rule 48 (statement -> print EOS .)
    PRINT           reduce using rule 48 (statement -> print EOS .)
    WHILE           reduce using rule 48 (statement -> print EOS .)
    DO              reduce using rule 48 (statement -> print EOS .)
    IF              reduce using rule 48 (statement -> print EOS .)
    JEDO            reduce using rule 48 (statement -> print EOS .)
    READINPUT       reduce using rule 48 (statement -> print EOS .)
    RIGHTBRACE      reduce using rule 48 (statement -> print EOS .)
    RETURN          reduce using rule 48 (statement -> print EOS .)
    ELSE            reduce using rule 48 (statement -> print EOS .)
    ELSEIF          reduce using rule 48 (statement -> print EOS .)


state 64

    (49) statement -> functioncall EOS .

    ID              reduce using rule 49 (statement -> functioncall EOS .)
    PRINT           reduce using rule 49 (statement -> functioncall EOS .)
    WHILE           reduce using rule 49 (statement -> functioncall EOS .)
    DO              reduce using rule 49 (statement -> functioncall EOS .)
    IF              reduce using rule 49 (statement -> functioncall EOS .)
    JEDO            reduce using rule 49 (statement -> functioncall EOS .)
    READINPUT       reduce using rule 49 (statement -> functioncall EOS .)
    RIGHTBRACE      reduce using rule 49 (statement -> functioncall EOS .)
    RETURN          reduce using rule 49 (statement -> functioncall EOS .)
    ELSE            reduce using rule 49 (statement -> functioncall EOS .)
    ELSEIF          reduce using rule 49 (statement -> functioncall EOS .)


state 65

    (51) statement -> specialfunction EOS .

    ID              reduce using rule 51 (statement -> specialfunction EOS .)
    PRINT           reduce using rule 51 (statement -> specialfunction EOS .)
    WHILE           reduce using rule 51 (statement -> specialfunction EOS .)
    DO              reduce using rule 51 (statement -> specialfunction EOS .)
    IF              reduce using rule 51 (statement -> specialfunction EOS .)
    JEDO            reduce using rule 51 (statement -> specialfunction EOS .)
    READINPUT       reduce using rule 51 (statement -> specialfunction EOS .)
    RIGHTBRACE      reduce using rule 51 (statement -> specialfunction EOS .)
    RETURN          reduce using rule 51 (statement -> specialfunction EOS .)
    ELSE            reduce using rule 51 (statement -> specialfunction EOS .)
    ELSEIF          reduce using rule 51 (statement -> specialfunction EOS .)


state 66

    (52) statement -> input EOS .

    ID              reduce using rule 52 (statement -> input EOS .)
    PRINT           reduce using rule 52 (statement -> input EOS .)
    WHILE           reduce using rule 52 (statement -> input EOS .)
    DO              reduce using rule 52 (statement -> input EOS .)
    IF              reduce using rule 52 (statement -> input EOS .)
    JEDO            reduce using rule 52 (statement -> input EOS .)
    READINPUT       reduce using rule 52 (statement -> input EOS .)
    RIGHTBRACE      reduce using rule 52 (statement -> input EOS .)
    RETURN          reduce using rule 52 (statement -> input EOS .)
    ELSE            reduce using rule 52 (statement -> input EOS .)
    ELSEIF          reduce using rule 52 (statement -> input EOS .)


state 67

    (98) assignment -> ID push_id . assignment_prime EQUALS push_operator expression eval_assignment
    (99) assignment_prime -> .
    (100) assignment_prime -> . LEFTB exp RIGHTB assignment_second_prime

    EQUALS          reduce using rule 99 (assignment_prime -> .)
    LEFTB           shift and go to state 92

    assignment_prime               shift and go to state 91

state 68

    (121) functioncall -> ID verify_function . LEFTP fake_bottom exp verify_parameter functioncall_prime

    LEFTP           shift and go to state 93


state 69

    (130) print -> PRINT LEFTP . expression print_quad print_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 70

    (104) condition -> WHILE save_jump . LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill

    LEFTP           shift and go to state 96


state 71

    (105) condition -> DO save_jump . LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad

    LEFTBRACE       shift and go to state 97


state 72

    (106) condition -> IF condition_prime .

    ID              reduce using rule 106 (condition -> IF condition_prime .)
    PRINT           reduce using rule 106 (condition -> IF condition_prime .)
    WHILE           reduce using rule 106 (condition -> IF condition_prime .)
    DO              reduce using rule 106 (condition -> IF condition_prime .)
    IF              reduce using rule 106 (condition -> IF condition_prime .)
    JEDO            reduce using rule 106 (condition -> IF condition_prime .)
    READINPUT       reduce using rule 106 (condition -> IF condition_prime .)
    RIGHTBRACE      reduce using rule 106 (condition -> IF condition_prime .)
    RETURN          reduce using rule 106 (condition -> IF condition_prime .)
    ELSE            reduce using rule 106 (condition -> IF condition_prime .)
    ELSEIF          reduce using rule 106 (condition -> IF condition_prime .)


state 73

    (107) condition_prime -> LEFTP . compoundexp RIGHTP gotof_quad condition_second_prime
    (53) compoundexp -> . expression eval_logic compoundexp_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    compoundexp                    shift and go to state 98
    expression                     shift and go to state 99
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 74

    (134) specialfunction -> JEDO POINT . specialfunction_prime
    (135) specialfunction_prime -> . CIRCLE LEFTP exp RIGHTP one_argument_quad
    (136) specialfunction_prime -> . SQUARE LEFTP exp RIGHTP one_argument_quad
    (137) specialfunction_prime -> . RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad
    (138) specialfunction_prime -> . TRIANGLE LEFTP exp RIGHTP one_argument_quad
    (139) specialfunction_prime -> . FORWARD LEFTP exp RIGHTP one_argument_quad
    (140) specialfunction_prime -> . BACK LEFTP exp RIGHTP one_argument_quad
    (141) specialfunction_prime -> . TURNRIGHT LEFTP exp RIGHTP one_argument_quad
    (142) specialfunction_prime -> . TURNLEFT LEFTP exp RIGHTP one_argument_quad
    (143) specialfunction_prime -> . COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
    (144) specialfunction_prime -> . THICKNESS LEFTP exp RIGHTP one_argument_quad
    (145) specialfunction_prime -> . STARTPEN LEFTP RIGHTP no_argument_quad
    (146) specialfunction_prime -> . STOPPEN LEFTP RIGHTP no_argument_quad
    (147) specialfunction_prime -> . STARTFILL LEFTP RIGHTP no_argument_quad
    (148) specialfunction_prime -> . FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
    (149) specialfunction_prime -> . STOPFILL LEFTP RIGHTP no_argument_quad
    (150) specialfunction_prime -> . RESTART LEFTP RIGHTP no_argument_quad
    (151) specialfunction_prime -> .

    CIRCLE          shift and go to state 101
    SQUARE          shift and go to state 102
    RECTANGLE       shift and go to state 103
    TRIANGLE        shift and go to state 104
    FORWARD         shift and go to state 105
    BACK            shift and go to state 106
    TURNRIGHT       shift and go to state 107
    TURNLEFT        shift and go to state 108
    COLOR           shift and go to state 109
    THICKNESS       shift and go to state 110
    STARTPEN        shift and go to state 111
    STOPPEN         shift and go to state 112
    STARTFILL       shift and go to state 113
    FILLSHAPE       shift and go to state 114
    STOPFILL        shift and go to state 115
    RESTART         shift and go to state 116
    EOS             reduce using rule 151 (specialfunction_prime -> .)

    specialfunction_prime          shift and go to state 100

state 75

    (156) input -> READINPUT LEFTP . ID input_quad RIGHTP

    ID              shift and go to state 117


state 76

    (20) vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .

    FUNCTION        reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    MAIN            reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPEINT         reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPEFLOAT       reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    TYPECHAR        reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    ID              reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    PRINT           reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    WHILE           reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    DO              reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    IF              reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    JEDO            reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)
    READINPUT       reduce using rule 20 (vars_fourth_prime -> SEPARATOR store_variable vars_prime vars_fourth_prime .)


state 77

    (13) vars_second_prime -> change_dimension LEFTB exp . RIGHTB first_dimension vars_third_prime

    RIGHTB          shift and go to state 118


state 78

    (67) exp -> term . eval_term exp_prime
    (71) eval_term -> .

    PLUS            reduce using rule 71 (eval_term -> .)
    MINUS           reduce using rule 71 (eval_term -> .)
    RIGHTB          reduce using rule 71 (eval_term -> .)
    GREATER         reduce using rule 71 (eval_term -> .)
    LESS            reduce using rule 71 (eval_term -> .)
    EQUAL           reduce using rule 71 (eval_term -> .)
    NOTEQUAL        reduce using rule 71 (eval_term -> .)
    GREATEREQUAL    reduce using rule 71 (eval_term -> .)
    LESSEQUAL       reduce using rule 71 (eval_term -> .)
    SEPARATOR       reduce using rule 71 (eval_term -> .)
    RIGHTP          reduce using rule 71 (eval_term -> .)
    AND             reduce using rule 71 (eval_term -> .)
    OR              reduce using rule 71 (eval_term -> .)
    EOS             reduce using rule 71 (eval_term -> .)

    eval_term                      shift and go to state 119

state 79

    (72) term -> factor . eval_factor term_prime
    (76) eval_factor -> .

    MULTIPLY        reduce using rule 76 (eval_factor -> .)
    DIVIDE          reduce using rule 76 (eval_factor -> .)
    PLUS            reduce using rule 76 (eval_factor -> .)
    MINUS           reduce using rule 76 (eval_factor -> .)
    RIGHTB          reduce using rule 76 (eval_factor -> .)
    GREATER         reduce using rule 76 (eval_factor -> .)
    LESS            reduce using rule 76 (eval_factor -> .)
    EQUAL           reduce using rule 76 (eval_factor -> .)
    NOTEQUAL        reduce using rule 76 (eval_factor -> .)
    GREATEREQUAL    reduce using rule 76 (eval_factor -> .)
    LESSEQUAL       reduce using rule 76 (eval_factor -> .)
    SEPARATOR       reduce using rule 76 (eval_factor -> .)
    RIGHTP          reduce using rule 76 (eval_factor -> .)
    AND             reduce using rule 76 (eval_factor -> .)
    OR              reduce using rule 76 (eval_factor -> .)
    EOS             reduce using rule 76 (eval_factor -> .)

    eval_factor                    shift and go to state 120

state 80

    (77) factor -> LEFTP . fake_bottom expression RIGHTP pop_fake_bottom
    (81) fake_bottom -> .

    LEFTP           reduce using rule 81 (fake_bottom -> .)
    PLUS            reduce using rule 81 (fake_bottom -> .)
    MINUS           reduce using rule 81 (fake_bottom -> .)
    CSTI            reduce using rule 81 (fake_bottom -> .)
    CSTF            reduce using rule 81 (fake_bottom -> .)
    CSTC            reduce using rule 81 (fake_bottom -> .)
    ID              reduce using rule 81 (fake_bottom -> .)

    fake_bottom                    shift and go to state 121

state 81

    (78) factor -> operand .

    MULTIPLY        reduce using rule 78 (factor -> operand .)
    DIVIDE          reduce using rule 78 (factor -> operand .)
    PLUS            reduce using rule 78 (factor -> operand .)
    MINUS           reduce using rule 78 (factor -> operand .)
    RIGHTB          reduce using rule 78 (factor -> operand .)
    GREATER         reduce using rule 78 (factor -> operand .)
    LESS            reduce using rule 78 (factor -> operand .)
    EQUAL           reduce using rule 78 (factor -> operand .)
    NOTEQUAL        reduce using rule 78 (factor -> operand .)
    GREATEREQUAL    reduce using rule 78 (factor -> operand .)
    LESSEQUAL       reduce using rule 78 (factor -> operand .)
    SEPARATOR       reduce using rule 78 (factor -> operand .)
    RIGHTP          reduce using rule 78 (factor -> operand .)
    AND             reduce using rule 78 (factor -> operand .)
    OR              reduce using rule 78 (factor -> operand .)
    EOS             reduce using rule 78 (factor -> operand .)


state 82

    (79) factor -> PLUS . operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    operand                        shift and go to state 122

state 83

    (80) factor -> MINUS . operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    operand                        shift and go to state 123

state 84

    (83) operand -> CSTI . evaluate_operation_int
    (95) evaluate_operation_int -> .

    MULTIPLY        reduce using rule 95 (evaluate_operation_int -> .)
    DIVIDE          reduce using rule 95 (evaluate_operation_int -> .)
    PLUS            reduce using rule 95 (evaluate_operation_int -> .)
    MINUS           reduce using rule 95 (evaluate_operation_int -> .)
    RIGHTB          reduce using rule 95 (evaluate_operation_int -> .)
    GREATER         reduce using rule 95 (evaluate_operation_int -> .)
    LESS            reduce using rule 95 (evaluate_operation_int -> .)
    EQUAL           reduce using rule 95 (evaluate_operation_int -> .)
    NOTEQUAL        reduce using rule 95 (evaluate_operation_int -> .)
    GREATEREQUAL    reduce using rule 95 (evaluate_operation_int -> .)
    LESSEQUAL       reduce using rule 95 (evaluate_operation_int -> .)
    SEPARATOR       reduce using rule 95 (evaluate_operation_int -> .)
    RIGHTP          reduce using rule 95 (evaluate_operation_int -> .)
    AND             reduce using rule 95 (evaluate_operation_int -> .)
    OR              reduce using rule 95 (evaluate_operation_int -> .)
    EOS             reduce using rule 95 (evaluate_operation_int -> .)

    evaluate_operation_int         shift and go to state 124

state 85

    (84) operand -> CSTF . evaluate_operation_float
    (96) evaluate_operation_float -> .

    MULTIPLY        reduce using rule 96 (evaluate_operation_float -> .)
    DIVIDE          reduce using rule 96 (evaluate_operation_float -> .)
    PLUS            reduce using rule 96 (evaluate_operation_float -> .)
    MINUS           reduce using rule 96 (evaluate_operation_float -> .)
    RIGHTB          reduce using rule 96 (evaluate_operation_float -> .)
    GREATER         reduce using rule 96 (evaluate_operation_float -> .)
    LESS            reduce using rule 96 (evaluate_operation_float -> .)
    EQUAL           reduce using rule 96 (evaluate_operation_float -> .)
    NOTEQUAL        reduce using rule 96 (evaluate_operation_float -> .)
    GREATEREQUAL    reduce using rule 96 (evaluate_operation_float -> .)
    LESSEQUAL       reduce using rule 96 (evaluate_operation_float -> .)
    SEPARATOR       reduce using rule 96 (evaluate_operation_float -> .)
    RIGHTP          reduce using rule 96 (evaluate_operation_float -> .)
    AND             reduce using rule 96 (evaluate_operation_float -> .)
    OR              reduce using rule 96 (evaluate_operation_float -> .)
    EOS             reduce using rule 96 (evaluate_operation_float -> .)

    evaluate_operation_float       shift and go to state 125

state 86

    (85) operand -> CSTC . evaluate_operation_char
    (97) evaluate_operation_char -> .

    MULTIPLY        reduce using rule 97 (evaluate_operation_char -> .)
    DIVIDE          reduce using rule 97 (evaluate_operation_char -> .)
    PLUS            reduce using rule 97 (evaluate_operation_char -> .)
    MINUS           reduce using rule 97 (evaluate_operation_char -> .)
    RIGHTB          reduce using rule 97 (evaluate_operation_char -> .)
    GREATER         reduce using rule 97 (evaluate_operation_char -> .)
    LESS            reduce using rule 97 (evaluate_operation_char -> .)
    EQUAL           reduce using rule 97 (evaluate_operation_char -> .)
    NOTEQUAL        reduce using rule 97 (evaluate_operation_char -> .)
    GREATEREQUAL    reduce using rule 97 (evaluate_operation_char -> .)
    LESSEQUAL       reduce using rule 97 (evaluate_operation_char -> .)
    SEPARATOR       reduce using rule 97 (evaluate_operation_char -> .)
    RIGHTP          reduce using rule 97 (evaluate_operation_char -> .)
    AND             reduce using rule 97 (evaluate_operation_char -> .)
    OR              reduce using rule 97 (evaluate_operation_char -> .)
    EOS             reduce using rule 97 (evaluate_operation_char -> .)

    evaluate_operation_char        shift and go to state 126

state 87

    (86) operand -> ID . push_id operand_prime
    (94) push_id -> .

    LEFTB           reduce using rule 94 (push_id -> .)
    LEFTP           reduce using rule 94 (push_id -> .)
    MULTIPLY        reduce using rule 94 (push_id -> .)
    DIVIDE          reduce using rule 94 (push_id -> .)
    PLUS            reduce using rule 94 (push_id -> .)
    MINUS           reduce using rule 94 (push_id -> .)
    RIGHTB          reduce using rule 94 (push_id -> .)
    GREATER         reduce using rule 94 (push_id -> .)
    LESS            reduce using rule 94 (push_id -> .)
    EQUAL           reduce using rule 94 (push_id -> .)
    NOTEQUAL        reduce using rule 94 (push_id -> .)
    GREATEREQUAL    reduce using rule 94 (push_id -> .)
    LESSEQUAL       reduce using rule 94 (push_id -> .)
    SEPARATOR       reduce using rule 94 (push_id -> .)
    RIGHTP          reduce using rule 94 (push_id -> .)
    AND             reduce using rule 94 (push_id -> .)
    OR              reduce using rule 94 (push_id -> .)
    EOS             reduce using rule 94 (push_id -> .)

    push_id                        shift and go to state 127

state 88

    (32) modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .

    FUNCTION        reduce using rule 32 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    MAIN            reduce using rule 32 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPEINT         reduce using rule 32 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPEFLOAT       reduce using rule 32 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)
    TYPECHAR        reduce using rule 32 (modules -> FUNCTION modules_prime ID add_module LEFTP modules_second_prime .)


state 89

    (35) modules_second_prime -> type . ID add_parameter modules_third_prime

    ID              shift and go to state 128


state 90

    (7) program_third_prime -> body RIGHTBRACE EOS .

    $end            reduce using rule 7 (program_third_prime -> body RIGHTBRACE EOS .)


state 91

    (98) assignment -> ID push_id assignment_prime . EQUALS push_operator expression eval_assignment

    EQUALS          shift and go to state 129


state 92

    (100) assignment_prime -> LEFTB . exp RIGHTB assignment_second_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 130
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 93

    (121) functioncall -> ID verify_function LEFTP . fake_bottom exp verify_parameter functioncall_prime
    (81) fake_bottom -> .

    LEFTP           reduce using rule 81 (fake_bottom -> .)
    PLUS            reduce using rule 81 (fake_bottom -> .)
    MINUS           reduce using rule 81 (fake_bottom -> .)
    CSTI            reduce using rule 81 (fake_bottom -> .)
    CSTF            reduce using rule 81 (fake_bottom -> .)
    CSTC            reduce using rule 81 (fake_bottom -> .)
    ID              reduce using rule 81 (fake_bottom -> .)

    fake_bottom                    shift and go to state 131

state 94

    (130) print -> PRINT LEFTP expression . print_quad print_prime
    (133) print_quad -> .

    SEPARATOR       reduce using rule 133 (print_quad -> .)
    RIGHTP          reduce using rule 133 (print_quad -> .)

    print_quad                     shift and go to state 132

state 95

    (58) expression -> exp . eval_relational expression_prime
    (66) eval_relational -> .

    GREATER         reduce using rule 66 (eval_relational -> .)
    LESS            reduce using rule 66 (eval_relational -> .)
    EQUAL           reduce using rule 66 (eval_relational -> .)
    NOTEQUAL        reduce using rule 66 (eval_relational -> .)
    GREATEREQUAL    reduce using rule 66 (eval_relational -> .)
    LESSEQUAL       reduce using rule 66 (eval_relational -> .)
    SEPARATOR       reduce using rule 66 (eval_relational -> .)
    RIGHTP          reduce using rule 66 (eval_relational -> .)
    AND             reduce using rule 66 (eval_relational -> .)
    OR              reduce using rule 66 (eval_relational -> .)
    EOS             reduce using rule 66 (eval_relational -> .)

    eval_relational                shift and go to state 133

state 96

    (104) condition -> WHILE save_jump LEFTP . compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (53) compoundexp -> . expression eval_logic compoundexp_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    compoundexp                    shift and go to state 134
    expression                     shift and go to state 99
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 97

    (105) condition -> DO save_jump LEFTBRACE . body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (29) body -> . statement body_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 135
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 98

    (107) condition_prime -> LEFTP compoundexp . RIGHTP gotof_quad condition_second_prime

    RIGHTP          shift and go to state 136


state 99

    (53) compoundexp -> expression . eval_logic compoundexp_prime
    (57) eval_logic -> .

    AND             reduce using rule 57 (eval_logic -> .)
    OR              reduce using rule 57 (eval_logic -> .)
    RIGHTP          reduce using rule 57 (eval_logic -> .)

    eval_logic                     shift and go to state 137

state 100

    (134) specialfunction -> JEDO POINT specialfunction_prime .

    EOS             reduce using rule 134 (specialfunction -> JEDO POINT specialfunction_prime .)


state 101

    (135) specialfunction_prime -> CIRCLE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 138


state 102

    (136) specialfunction_prime -> SQUARE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 139


state 103

    (137) specialfunction_prime -> RECTANGLE . LEFTP exp SEPARATOR exp RIGHTP two_argument_quad

    LEFTP           shift and go to state 140


state 104

    (138) specialfunction_prime -> TRIANGLE . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 141


state 105

    (139) specialfunction_prime -> FORWARD . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 142


state 106

    (140) specialfunction_prime -> BACK . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 143


state 107

    (141) specialfunction_prime -> TURNRIGHT . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 144


state 108

    (142) specialfunction_prime -> TURNLEFT . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 145


state 109

    (143) specialfunction_prime -> COLOR . LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad

    LEFTP           shift and go to state 146


state 110

    (144) specialfunction_prime -> THICKNESS . LEFTP exp RIGHTP one_argument_quad

    LEFTP           shift and go to state 147


state 111

    (145) specialfunction_prime -> STARTPEN . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 148


state 112

    (146) specialfunction_prime -> STOPPEN . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 149


state 113

    (147) specialfunction_prime -> STARTFILL . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 150


state 114

    (148) specialfunction_prime -> FILLSHAPE . LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad

    LEFTP           shift and go to state 151


state 115

    (149) specialfunction_prime -> STOPFILL . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 152


state 116

    (150) specialfunction_prime -> RESTART . LEFTP RIGHTP no_argument_quad

    LEFTP           shift and go to state 153


state 117

    (156) input -> READINPUT LEFTP ID . input_quad RIGHTP
    (157) input_quad -> .

    RIGHTP          reduce using rule 157 (input_quad -> .)

    input_quad                     shift and go to state 154

state 118

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB . first_dimension vars_third_prime
    (15) first_dimension -> .

    LEFTB           reduce using rule 15 (first_dimension -> .)
    SEPARATOR       reduce using rule 15 (first_dimension -> .)
    EOS             reduce using rule 15 (first_dimension -> .)

    first_dimension                shift and go to state 155

state 119

    (67) exp -> term eval_term . exp_prime
    (68) exp_prime -> . PLUS push_operator exp
    (69) exp_prime -> . MINUS push_operator exp
    (70) exp_prime -> .

    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    RIGHTB          reduce using rule 70 (exp_prime -> .)
    GREATER         reduce using rule 70 (exp_prime -> .)
    LESS            reduce using rule 70 (exp_prime -> .)
    EQUAL           reduce using rule 70 (exp_prime -> .)
    NOTEQUAL        reduce using rule 70 (exp_prime -> .)
    GREATEREQUAL    reduce using rule 70 (exp_prime -> .)
    LESSEQUAL       reduce using rule 70 (exp_prime -> .)
    SEPARATOR       reduce using rule 70 (exp_prime -> .)
    RIGHTP          reduce using rule 70 (exp_prime -> .)
    AND             reduce using rule 70 (exp_prime -> .)
    OR              reduce using rule 70 (exp_prime -> .)
    EOS             reduce using rule 70 (exp_prime -> .)

    exp_prime                      shift and go to state 156

state 120

    (72) term -> factor eval_factor . term_prime
    (73) term_prime -> . MULTIPLY push_operator term
    (74) term_prime -> . DIVIDE push_operator term
    (75) term_prime -> .

    MULTIPLY        shift and go to state 160
    DIVIDE          shift and go to state 161
    PLUS            reduce using rule 75 (term_prime -> .)
    MINUS           reduce using rule 75 (term_prime -> .)
    RIGHTB          reduce using rule 75 (term_prime -> .)
    GREATER         reduce using rule 75 (term_prime -> .)
    LESS            reduce using rule 75 (term_prime -> .)
    EQUAL           reduce using rule 75 (term_prime -> .)
    NOTEQUAL        reduce using rule 75 (term_prime -> .)
    GREATEREQUAL    reduce using rule 75 (term_prime -> .)
    LESSEQUAL       reduce using rule 75 (term_prime -> .)
    SEPARATOR       reduce using rule 75 (term_prime -> .)
    RIGHTP          reduce using rule 75 (term_prime -> .)
    AND             reduce using rule 75 (term_prime -> .)
    OR              reduce using rule 75 (term_prime -> .)
    EOS             reduce using rule 75 (term_prime -> .)

    term_prime                     shift and go to state 159

state 121

    (77) factor -> LEFTP fake_bottom . expression RIGHTP pop_fake_bottom
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 162
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 122

    (79) factor -> PLUS operand .

    MULTIPLY        reduce using rule 79 (factor -> PLUS operand .)
    DIVIDE          reduce using rule 79 (factor -> PLUS operand .)
    PLUS            reduce using rule 79 (factor -> PLUS operand .)
    MINUS           reduce using rule 79 (factor -> PLUS operand .)
    RIGHTB          reduce using rule 79 (factor -> PLUS operand .)
    GREATER         reduce using rule 79 (factor -> PLUS operand .)
    LESS            reduce using rule 79 (factor -> PLUS operand .)
    EQUAL           reduce using rule 79 (factor -> PLUS operand .)
    NOTEQUAL        reduce using rule 79 (factor -> PLUS operand .)
    GREATEREQUAL    reduce using rule 79 (factor -> PLUS operand .)
    LESSEQUAL       reduce using rule 79 (factor -> PLUS operand .)
    SEPARATOR       reduce using rule 79 (factor -> PLUS operand .)
    RIGHTP          reduce using rule 79 (factor -> PLUS operand .)
    AND             reduce using rule 79 (factor -> PLUS operand .)
    OR              reduce using rule 79 (factor -> PLUS operand .)
    EOS             reduce using rule 79 (factor -> PLUS operand .)


state 123

    (80) factor -> MINUS operand .

    MULTIPLY        reduce using rule 80 (factor -> MINUS operand .)
    DIVIDE          reduce using rule 80 (factor -> MINUS operand .)
    PLUS            reduce using rule 80 (factor -> MINUS operand .)
    MINUS           reduce using rule 80 (factor -> MINUS operand .)
    RIGHTB          reduce using rule 80 (factor -> MINUS operand .)
    GREATER         reduce using rule 80 (factor -> MINUS operand .)
    LESS            reduce using rule 80 (factor -> MINUS operand .)
    EQUAL           reduce using rule 80 (factor -> MINUS operand .)
    NOTEQUAL        reduce using rule 80 (factor -> MINUS operand .)
    GREATEREQUAL    reduce using rule 80 (factor -> MINUS operand .)
    LESSEQUAL       reduce using rule 80 (factor -> MINUS operand .)
    SEPARATOR       reduce using rule 80 (factor -> MINUS operand .)
    RIGHTP          reduce using rule 80 (factor -> MINUS operand .)
    AND             reduce using rule 80 (factor -> MINUS operand .)
    OR              reduce using rule 80 (factor -> MINUS operand .)
    EOS             reduce using rule 80 (factor -> MINUS operand .)


state 124

    (83) operand -> CSTI evaluate_operation_int .

    MULTIPLY        reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    DIVIDE          reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    PLUS            reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    MINUS           reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    RIGHTB          reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    GREATER         reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    LESS            reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    EQUAL           reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    NOTEQUAL        reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    GREATEREQUAL    reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    LESSEQUAL       reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    SEPARATOR       reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    RIGHTP          reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    AND             reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    OR              reduce using rule 83 (operand -> CSTI evaluate_operation_int .)
    EOS             reduce using rule 83 (operand -> CSTI evaluate_operation_int .)


state 125

    (84) operand -> CSTF evaluate_operation_float .

    MULTIPLY        reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    DIVIDE          reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    PLUS            reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    MINUS           reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    RIGHTB          reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    GREATER         reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    LESS            reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    EQUAL           reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    NOTEQUAL        reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    GREATEREQUAL    reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    LESSEQUAL       reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    SEPARATOR       reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    RIGHTP          reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    AND             reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    OR              reduce using rule 84 (operand -> CSTF evaluate_operation_float .)
    EOS             reduce using rule 84 (operand -> CSTF evaluate_operation_float .)


state 126

    (85) operand -> CSTC evaluate_operation_char .

    MULTIPLY        reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    DIVIDE          reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    PLUS            reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    MINUS           reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    RIGHTB          reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    GREATER         reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    LESS            reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    EQUAL           reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    NOTEQUAL        reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    GREATEREQUAL    reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    LESSEQUAL       reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    SEPARATOR       reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    RIGHTP          reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    AND             reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    OR              reduce using rule 85 (operand -> CSTC evaluate_operation_char .)
    EOS             reduce using rule 85 (operand -> CSTC evaluate_operation_char .)


state 127

    (86) operand -> ID push_id . operand_prime
    (87) operand_prime -> . LEFTB exp RIGHTB operand_second_prime
    (88) operand_prime -> . LEFTP exp operand_third_prime
    (89) operand_prime -> .

    LEFTB           shift and go to state 164
    LEFTP           shift and go to state 165
    MULTIPLY        reduce using rule 89 (operand_prime -> .)
    DIVIDE          reduce using rule 89 (operand_prime -> .)
    PLUS            reduce using rule 89 (operand_prime -> .)
    MINUS           reduce using rule 89 (operand_prime -> .)
    RIGHTB          reduce using rule 89 (operand_prime -> .)
    GREATER         reduce using rule 89 (operand_prime -> .)
    LESS            reduce using rule 89 (operand_prime -> .)
    EQUAL           reduce using rule 89 (operand_prime -> .)
    NOTEQUAL        reduce using rule 89 (operand_prime -> .)
    GREATEREQUAL    reduce using rule 89 (operand_prime -> .)
    LESSEQUAL       reduce using rule 89 (operand_prime -> .)
    SEPARATOR       reduce using rule 89 (operand_prime -> .)
    RIGHTP          reduce using rule 89 (operand_prime -> .)
    AND             reduce using rule 89 (operand_prime -> .)
    OR              reduce using rule 89 (operand_prime -> .)
    EOS             reduce using rule 89 (operand_prime -> .)

    operand_prime                  shift and go to state 163

state 128

    (35) modules_second_prime -> type ID . add_parameter modules_third_prime
    (44) add_parameter -> .

    SEPARATOR       reduce using rule 44 (add_parameter -> .)
    RIGHTP          reduce using rule 44 (add_parameter -> .)

    add_parameter                  shift and go to state 166

state 129

    (98) assignment -> ID push_id assignment_prime EQUALS . push_operator expression eval_assignment
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 167

state 130

    (100) assignment_prime -> LEFTB exp . RIGHTB assignment_second_prime

    RIGHTB          shift and go to state 168


state 131

    (121) functioncall -> ID verify_function LEFTP fake_bottom . exp verify_parameter functioncall_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 169
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 132

    (130) print -> PRINT LEFTP expression print_quad . print_prime
    (131) print_prime -> . SEPARATOR expression print_quad print_prime
    (132) print_prime -> . RIGHTP

    SEPARATOR       shift and go to state 171
    RIGHTP          shift and go to state 172

    print_prime                    shift and go to state 170

state 133

    (58) expression -> exp eval_relational . expression_prime
    (59) expression_prime -> . GREATER push_operator expression
    (60) expression_prime -> . LESS push_operator expression
    (61) expression_prime -> . EQUAL push_operator expression
    (62) expression_prime -> . NOTEQUAL push_operator expression
    (63) expression_prime -> . GREATEREQUAL push_operator expression
    (64) expression_prime -> . LESSEQUAL push_operator expression
    (65) expression_prime -> .

    GREATER         shift and go to state 174
    LESS            shift and go to state 175
    EQUAL           shift and go to state 176
    NOTEQUAL        shift and go to state 177
    GREATEREQUAL    shift and go to state 178
    LESSEQUAL       shift and go to state 179
    SEPARATOR       reduce using rule 65 (expression_prime -> .)
    RIGHTP          reduce using rule 65 (expression_prime -> .)
    AND             reduce using rule 65 (expression_prime -> .)
    OR              reduce using rule 65 (expression_prime -> .)
    EOS             reduce using rule 65 (expression_prime -> .)

    expression_prime               shift and go to state 173

state 134

    (104) condition -> WHILE save_jump LEFTP compoundexp . RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill

    RIGHTP          shift and go to state 180


state 135

    (105) condition -> DO save_jump LEFTBRACE body . RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad

    RIGHTBRACE      shift and go to state 181


state 136

    (107) condition_prime -> LEFTP compoundexp RIGHTP . gotof_quad condition_second_prime
    (116) gotof_quad -> .

    LEFTBRACE       reduce using rule 116 (gotof_quad -> .)
    ID              reduce using rule 116 (gotof_quad -> .)
    PRINT           reduce using rule 116 (gotof_quad -> .)
    WHILE           reduce using rule 116 (gotof_quad -> .)
    DO              reduce using rule 116 (gotof_quad -> .)
    IF              reduce using rule 116 (gotof_quad -> .)
    JEDO            reduce using rule 116 (gotof_quad -> .)
    READINPUT       reduce using rule 116 (gotof_quad -> .)

    gotof_quad                     shift and go to state 182

state 137

    (53) compoundexp -> expression eval_logic . compoundexp_prime
    (54) compoundexp_prime -> . AND push_operator compoundexp
    (55) compoundexp_prime -> . OR push_operator compoundexp
    (56) compoundexp_prime -> .

    AND             shift and go to state 184
    OR              shift and go to state 185
    RIGHTP          reduce using rule 56 (compoundexp_prime -> .)

    compoundexp_prime              shift and go to state 183

state 138

    (135) specialfunction_prime -> CIRCLE LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 186
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 139

    (136) specialfunction_prime -> SQUARE LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 187
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 140

    (137) specialfunction_prime -> RECTANGLE LEFTP . exp SEPARATOR exp RIGHTP two_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 188
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 141

    (138) specialfunction_prime -> TRIANGLE LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 189
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 142

    (139) specialfunction_prime -> FORWARD LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 190
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 143

    (140) specialfunction_prime -> BACK LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 191
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 144

    (141) specialfunction_prime -> TURNRIGHT LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 192
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 145

    (142) specialfunction_prime -> TURNLEFT LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 193
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 146

    (143) specialfunction_prime -> COLOR LEFTP . exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 194
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 147

    (144) specialfunction_prime -> THICKNESS LEFTP . exp RIGHTP one_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 195
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 148

    (145) specialfunction_prime -> STARTPEN LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 196


state 149

    (146) specialfunction_prime -> STOPPEN LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 197


state 150

    (147) specialfunction_prime -> STARTFILL LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 198


state 151

    (148) specialfunction_prime -> FILLSHAPE LEFTP . exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 199
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 152

    (149) specialfunction_prime -> STOPFILL LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 200


state 153

    (150) specialfunction_prime -> RESTART LEFTP . RIGHTP no_argument_quad

    RIGHTP          shift and go to state 201


state 154

    (156) input -> READINPUT LEFTP ID input_quad . RIGHTP

    RIGHTP          shift and go to state 202


state 155

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension . vars_third_prime
    (16) vars_third_prime -> . LEFTB exp RIGHTB second_dimension dimensional_address_allocation
    (17) vars_third_prime -> . dimensional_address_allocation
    (19) dimensional_address_allocation -> .

    LEFTB           shift and go to state 203
    SEPARATOR       reduce using rule 19 (dimensional_address_allocation -> .)
    EOS             reduce using rule 19 (dimensional_address_allocation -> .)

    vars_third_prime               shift and go to state 204
    dimensional_address_allocation shift and go to state 205

state 156

    (67) exp -> term eval_term exp_prime .

    RIGHTB          reduce using rule 67 (exp -> term eval_term exp_prime .)
    GREATER         reduce using rule 67 (exp -> term eval_term exp_prime .)
    LESS            reduce using rule 67 (exp -> term eval_term exp_prime .)
    EQUAL           reduce using rule 67 (exp -> term eval_term exp_prime .)
    NOTEQUAL        reduce using rule 67 (exp -> term eval_term exp_prime .)
    GREATEREQUAL    reduce using rule 67 (exp -> term eval_term exp_prime .)
    LESSEQUAL       reduce using rule 67 (exp -> term eval_term exp_prime .)
    SEPARATOR       reduce using rule 67 (exp -> term eval_term exp_prime .)
    RIGHTP          reduce using rule 67 (exp -> term eval_term exp_prime .)
    AND             reduce using rule 67 (exp -> term eval_term exp_prime .)
    OR              reduce using rule 67 (exp -> term eval_term exp_prime .)
    EOS             reduce using rule 67 (exp -> term eval_term exp_prime .)


state 157

    (68) exp_prime -> PLUS . push_operator exp
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 206

state 158

    (69) exp_prime -> MINUS . push_operator exp
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 207

state 159

    (72) term -> factor eval_factor term_prime .

    PLUS            reduce using rule 72 (term -> factor eval_factor term_prime .)
    MINUS           reduce using rule 72 (term -> factor eval_factor term_prime .)
    RIGHTB          reduce using rule 72 (term -> factor eval_factor term_prime .)
    GREATER         reduce using rule 72 (term -> factor eval_factor term_prime .)
    LESS            reduce using rule 72 (term -> factor eval_factor term_prime .)
    EQUAL           reduce using rule 72 (term -> factor eval_factor term_prime .)
    NOTEQUAL        reduce using rule 72 (term -> factor eval_factor term_prime .)
    GREATEREQUAL    reduce using rule 72 (term -> factor eval_factor term_prime .)
    LESSEQUAL       reduce using rule 72 (term -> factor eval_factor term_prime .)
    SEPARATOR       reduce using rule 72 (term -> factor eval_factor term_prime .)
    RIGHTP          reduce using rule 72 (term -> factor eval_factor term_prime .)
    AND             reduce using rule 72 (term -> factor eval_factor term_prime .)
    OR              reduce using rule 72 (term -> factor eval_factor term_prime .)
    EOS             reduce using rule 72 (term -> factor eval_factor term_prime .)


state 160

    (73) term_prime -> MULTIPLY . push_operator term
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 208

state 161

    (74) term_prime -> DIVIDE . push_operator term
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 209

state 162

    (77) factor -> LEFTP fake_bottom expression . RIGHTP pop_fake_bottom

    RIGHTP          shift and go to state 210


state 163

    (86) operand -> ID push_id operand_prime .

    MULTIPLY        reduce using rule 86 (operand -> ID push_id operand_prime .)
    DIVIDE          reduce using rule 86 (operand -> ID push_id operand_prime .)
    PLUS            reduce using rule 86 (operand -> ID push_id operand_prime .)
    MINUS           reduce using rule 86 (operand -> ID push_id operand_prime .)
    RIGHTB          reduce using rule 86 (operand -> ID push_id operand_prime .)
    GREATER         reduce using rule 86 (operand -> ID push_id operand_prime .)
    LESS            reduce using rule 86 (operand -> ID push_id operand_prime .)
    EQUAL           reduce using rule 86 (operand -> ID push_id operand_prime .)
    NOTEQUAL        reduce using rule 86 (operand -> ID push_id operand_prime .)
    GREATEREQUAL    reduce using rule 86 (operand -> ID push_id operand_prime .)
    LESSEQUAL       reduce using rule 86 (operand -> ID push_id operand_prime .)
    SEPARATOR       reduce using rule 86 (operand -> ID push_id operand_prime .)
    RIGHTP          reduce using rule 86 (operand -> ID push_id operand_prime .)
    AND             reduce using rule 86 (operand -> ID push_id operand_prime .)
    OR              reduce using rule 86 (operand -> ID push_id operand_prime .)
    EOS             reduce using rule 86 (operand -> ID push_id operand_prime .)


state 164

    (87) operand_prime -> LEFTB . exp RIGHTB operand_second_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 211
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 165

    (88) operand_prime -> LEFTP . exp operand_third_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 212
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 166

    (35) modules_second_prime -> type ID add_parameter . modules_third_prime
    (36) modules_third_prime -> . SEPARATOR modules_second_prime
    (37) modules_third_prime -> . RIGHTP LEFTBRACE modules_fourth_prime

    SEPARATOR       shift and go to state 214
    RIGHTP          shift and go to state 215

    modules_third_prime            shift and go to state 213

state 167

    (98) assignment -> ID push_id assignment_prime EQUALS push_operator . expression eval_assignment
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 216
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 168

    (100) assignment_prime -> LEFTB exp RIGHTB . assignment_second_prime
    (101) assignment_second_prime -> .
    (102) assignment_second_prime -> . LEFTB exp RIGHTB

    EQUALS          reduce using rule 101 (assignment_second_prime -> .)
    LEFTB           shift and go to state 217

    assignment_second_prime        shift and go to state 218

state 169

    (121) functioncall -> ID verify_function LEFTP fake_bottom exp . verify_parameter functioncall_prime
    (125) verify_parameter -> .

    SEPARATOR       reduce using rule 125 (verify_parameter -> .)
    RIGHTP          reduce using rule 125 (verify_parameter -> .)

    verify_parameter               shift and go to state 219

state 170

    (130) print -> PRINT LEFTP expression print_quad print_prime .

    EOS             reduce using rule 130 (print -> PRINT LEFTP expression print_quad print_prime .)


state 171

    (131) print_prime -> SEPARATOR . expression print_quad print_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 220
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 172

    (132) print_prime -> RIGHTP .

    EOS             reduce using rule 132 (print_prime -> RIGHTP .)


state 173

    (58) expression -> exp eval_relational expression_prime .

    SEPARATOR       reduce using rule 58 (expression -> exp eval_relational expression_prime .)
    RIGHTP          reduce using rule 58 (expression -> exp eval_relational expression_prime .)
    AND             reduce using rule 58 (expression -> exp eval_relational expression_prime .)
    OR              reduce using rule 58 (expression -> exp eval_relational expression_prime .)
    EOS             reduce using rule 58 (expression -> exp eval_relational expression_prime .)


state 174

    (59) expression_prime -> GREATER . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 221

state 175

    (60) expression_prime -> LESS . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 222

state 176

    (61) expression_prime -> EQUAL . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 223

state 177

    (62) expression_prime -> NOTEQUAL . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 224

state 178

    (63) expression_prime -> GREATEREQUAL . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 225

state 179

    (64) expression_prime -> LESSEQUAL . push_operator expression
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 226

state 180

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP . gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (116) gotof_quad -> .

    LEFTBRACE       reduce using rule 116 (gotof_quad -> .)

    gotof_quad                     shift and go to state 227

state 181

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE . WHILE LEFTP compoundexp RIGHTP gotov_quad

    WHILE           shift and go to state 228


state 182

    (107) condition_prime -> LEFTP compoundexp RIGHTP gotof_quad . condition_second_prime
    (108) condition_second_prime -> . statement condition_third_prime
    (109) condition_second_prime -> . LEFTBRACE body RIGHTBRACE condition_third_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    LEFTBRACE       shift and go to state 231
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    condition_second_prime         shift and go to state 229
    statement                      shift and go to state 230
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 183

    (53) compoundexp -> expression eval_logic compoundexp_prime .

    RIGHTP          reduce using rule 53 (compoundexp -> expression eval_logic compoundexp_prime .)


state 184

    (54) compoundexp_prime -> AND . push_operator compoundexp
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 232

state 185

    (55) compoundexp_prime -> OR . push_operator compoundexp
    (129) push_operator -> .

    LEFTP           reduce using rule 129 (push_operator -> .)
    PLUS            reduce using rule 129 (push_operator -> .)
    MINUS           reduce using rule 129 (push_operator -> .)
    CSTI            reduce using rule 129 (push_operator -> .)
    CSTF            reduce using rule 129 (push_operator -> .)
    CSTC            reduce using rule 129 (push_operator -> .)
    ID              reduce using rule 129 (push_operator -> .)

    push_operator                  shift and go to state 233

state 186

    (135) specialfunction_prime -> CIRCLE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 234


state 187

    (136) specialfunction_prime -> SQUARE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 235


state 188

    (137) specialfunction_prime -> RECTANGLE LEFTP exp . SEPARATOR exp RIGHTP two_argument_quad

    SEPARATOR       shift and go to state 236


state 189

    (138) specialfunction_prime -> TRIANGLE LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 237


state 190

    (139) specialfunction_prime -> FORWARD LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 238


state 191

    (140) specialfunction_prime -> BACK LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 239


state 192

    (141) specialfunction_prime -> TURNRIGHT LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 240


state 193

    (142) specialfunction_prime -> TURNLEFT LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 241


state 194

    (143) specialfunction_prime -> COLOR LEFTP exp . SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad

    SEPARATOR       shift and go to state 242


state 195

    (144) specialfunction_prime -> THICKNESS LEFTP exp . RIGHTP one_argument_quad

    RIGHTP          shift and go to state 243


state 196

    (145) specialfunction_prime -> STARTPEN LEFTP RIGHTP . no_argument_quad
    (152) no_argument_quad -> .

    EOS             reduce using rule 152 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 244

state 197

    (146) specialfunction_prime -> STOPPEN LEFTP RIGHTP . no_argument_quad
    (152) no_argument_quad -> .

    EOS             reduce using rule 152 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 245

state 198

    (147) specialfunction_prime -> STARTFILL LEFTP RIGHTP . no_argument_quad
    (152) no_argument_quad -> .

    EOS             reduce using rule 152 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 246

state 199

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp . SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad

    SEPARATOR       shift and go to state 247


state 200

    (149) specialfunction_prime -> STOPFILL LEFTP RIGHTP . no_argument_quad
    (152) no_argument_quad -> .

    EOS             reduce using rule 152 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 248

state 201

    (150) specialfunction_prime -> RESTART LEFTP RIGHTP . no_argument_quad
    (152) no_argument_quad -> .

    EOS             reduce using rule 152 (no_argument_quad -> .)

    no_argument_quad               shift and go to state 249

state 202

    (156) input -> READINPUT LEFTP ID input_quad RIGHTP .

    EOS             reduce using rule 156 (input -> READINPUT LEFTP ID input_quad RIGHTP .)


state 203

    (16) vars_third_prime -> LEFTB . exp RIGHTB second_dimension dimensional_address_allocation
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 250
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 204

    (13) vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_third_prime .

    SEPARATOR       reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_third_prime .)
    EOS             reduce using rule 13 (vars_second_prime -> change_dimension LEFTB exp RIGHTB first_dimension vars_third_prime .)


state 205

    (17) vars_third_prime -> dimensional_address_allocation .

    SEPARATOR       reduce using rule 17 (vars_third_prime -> dimensional_address_allocation .)
    EOS             reduce using rule 17 (vars_third_prime -> dimensional_address_allocation .)


state 206

    (68) exp_prime -> PLUS push_operator . exp
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 251
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 207

    (69) exp_prime -> MINUS push_operator . exp
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 252
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 208

    (73) term_prime -> MULTIPLY push_operator . term
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    term                           shift and go to state 253
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 209

    (74) term_prime -> DIVIDE push_operator . term
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    term                           shift and go to state 254
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 210

    (77) factor -> LEFTP fake_bottom expression RIGHTP . pop_fake_bottom
    (82) pop_fake_bottom -> .

    MULTIPLY        reduce using rule 82 (pop_fake_bottom -> .)
    DIVIDE          reduce using rule 82 (pop_fake_bottom -> .)
    PLUS            reduce using rule 82 (pop_fake_bottom -> .)
    MINUS           reduce using rule 82 (pop_fake_bottom -> .)
    RIGHTB          reduce using rule 82 (pop_fake_bottom -> .)
    GREATER         reduce using rule 82 (pop_fake_bottom -> .)
    LESS            reduce using rule 82 (pop_fake_bottom -> .)
    EQUAL           reduce using rule 82 (pop_fake_bottom -> .)
    NOTEQUAL        reduce using rule 82 (pop_fake_bottom -> .)
    GREATEREQUAL    reduce using rule 82 (pop_fake_bottom -> .)
    LESSEQUAL       reduce using rule 82 (pop_fake_bottom -> .)
    SEPARATOR       reduce using rule 82 (pop_fake_bottom -> .)
    RIGHTP          reduce using rule 82 (pop_fake_bottom -> .)
    AND             reduce using rule 82 (pop_fake_bottom -> .)
    OR              reduce using rule 82 (pop_fake_bottom -> .)
    EOS             reduce using rule 82 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 255

state 211

    (87) operand_prime -> LEFTB exp . RIGHTB operand_second_prime

    RIGHTB          shift and go to state 256


state 212

    (88) operand_prime -> LEFTP exp . operand_third_prime
    (92) operand_third_prime -> . SEPARATOR exp operand_third_prime
    (93) operand_third_prime -> . RIGHTP

    SEPARATOR       shift and go to state 258
    RIGHTP          shift and go to state 259

    operand_third_prime            shift and go to state 257

state 213

    (35) modules_second_prime -> type ID add_parameter modules_third_prime .

    FUNCTION        reduce using rule 35 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    MAIN            reduce using rule 35 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPEINT         reduce using rule 35 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPEFLOAT       reduce using rule 35 (modules_second_prime -> type ID add_parameter modules_third_prime .)
    TYPECHAR        reduce using rule 35 (modules_second_prime -> type ID add_parameter modules_third_prime .)


state 214

    (36) modules_third_prime -> SEPARATOR . modules_second_prime
    (35) modules_second_prime -> . type ID add_parameter modules_third_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16

    modules_second_prime           shift and go to state 260
    type                           shift and go to state 89

state 215

    (37) modules_third_prime -> RIGHTP . LEFTBRACE modules_fourth_prime

    LEFTBRACE       shift and go to state 261


state 216

    (98) assignment -> ID push_id assignment_prime EQUALS push_operator expression . eval_assignment
    (103) eval_assignment -> .

    EOS             reduce using rule 103 (eval_assignment -> .)

    eval_assignment                shift and go to state 262

state 217

    (102) assignment_second_prime -> LEFTB . exp RIGHTB
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 263
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 218

    (100) assignment_prime -> LEFTB exp RIGHTB assignment_second_prime .

    EQUALS          reduce using rule 100 (assignment_prime -> LEFTB exp RIGHTB assignment_second_prime .)


state 219

    (121) functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter . functioncall_prime
    (122) functioncall_prime -> . SEPARATOR exp verify_parameter functioncall_prime
    (123) functioncall_prime -> . verify_param_count RIGHTP pop_fake_bottom store_memory_data go_sub_quad
    (126) verify_param_count -> .

    SEPARATOR       shift and go to state 265
    RIGHTP          reduce using rule 126 (verify_param_count -> .)

    functioncall_prime             shift and go to state 264
    verify_param_count             shift and go to state 266

state 220

    (131) print_prime -> SEPARATOR expression . print_quad print_prime
    (133) print_quad -> .

    SEPARATOR       reduce using rule 133 (print_quad -> .)
    RIGHTP          reduce using rule 133 (print_quad -> .)

    print_quad                     shift and go to state 267

state 221

    (59) expression_prime -> GREATER push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 268
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 222

    (60) expression_prime -> LESS push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 269
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 223

    (61) expression_prime -> EQUAL push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 270
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 224

    (62) expression_prime -> NOTEQUAL push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 271
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 225

    (63) expression_prime -> GREATEREQUAL push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 272
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 226

    (64) expression_prime -> LESSEQUAL push_operator . expression
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    expression                     shift and go to state 273
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 227

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad . LEFTBRACE body RIGHTBRACE goto_while_fill

    LEFTBRACE       shift and go to state 274


state 228

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE . LEFTP compoundexp RIGHTP gotov_quad

    LEFTP           shift and go to state 275


state 229

    (107) condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .

    ID              reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    PRINT           reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    WHILE           reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    DO              reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    IF              reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    JEDO            reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    READINPUT       reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    RIGHTBRACE      reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    RETURN          reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    ELSE            reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)
    ELSEIF          reduce using rule 107 (condition_prime -> LEFTP compoundexp RIGHTP gotof_quad condition_second_prime .)


state 230

    (108) condition_second_prime -> statement . condition_third_prime
    (110) condition_third_prime -> . goto_if_fill ELSEIF condition_prime
    (111) condition_third_prime -> . ELSE goto_else condition_fourth_prime
    (112) condition_third_prime -> . goto_if_fill
    (119) goto_if_fill -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 278
    ELSEIF          reduce using rule 119 (goto_if_fill -> .)
    ID              reduce using rule 119 (goto_if_fill -> .)
    PRINT           reduce using rule 119 (goto_if_fill -> .)
    WHILE           reduce using rule 119 (goto_if_fill -> .)
    DO              reduce using rule 119 (goto_if_fill -> .)
    IF              reduce using rule 119 (goto_if_fill -> .)
    JEDO            reduce using rule 119 (goto_if_fill -> .)
    READINPUT       reduce using rule 119 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 119 (goto_if_fill -> .)
    RETURN          reduce using rule 119 (goto_if_fill -> .)

  ! ELSE            [ reduce using rule 119 (goto_if_fill -> .) ]

    condition_third_prime          shift and go to state 276
    goto_if_fill                   shift and go to state 277

state 231

    (109) condition_second_prime -> LEFTBRACE . body RIGHTBRACE condition_third_prime
    (29) body -> . statement body_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 279
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 232

    (54) compoundexp_prime -> AND push_operator . compoundexp
    (53) compoundexp -> . expression eval_logic compoundexp_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    compoundexp                    shift and go to state 280
    expression                     shift and go to state 99
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 233

    (55) compoundexp_prime -> OR push_operator . compoundexp
    (53) compoundexp -> . expression eval_logic compoundexp_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    compoundexp                    shift and go to state 281
    expression                     shift and go to state 99
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 234

    (135) specialfunction_prime -> CIRCLE LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 282

state 235

    (136) specialfunction_prime -> SQUARE LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 283

state 236

    (137) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR . exp RIGHTP two_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 284
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 237

    (138) specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 285

state 238

    (139) specialfunction_prime -> FORWARD LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 286

state 239

    (140) specialfunction_prime -> BACK LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 287

state 240

    (141) specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 288

state 241

    (142) specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 289

state 242

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR . exp SEPARATOR exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 290
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 243

    (144) specialfunction_prime -> THICKNESS LEFTP exp RIGHTP . one_argument_quad
    (153) one_argument_quad -> .

    EOS             reduce using rule 153 (one_argument_quad -> .)

    one_argument_quad              shift and go to state 291

state 244

    (145) specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 145 (specialfunction_prime -> STARTPEN LEFTP RIGHTP no_argument_quad .)


state 245

    (146) specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 146 (specialfunction_prime -> STOPPEN LEFTP RIGHTP no_argument_quad .)


state 246

    (147) specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 147 (specialfunction_prime -> STARTFILL LEFTP RIGHTP no_argument_quad .)


state 247

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR . exp SEPARATOR exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 292
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 248

    (149) specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 149 (specialfunction_prime -> STOPFILL LEFTP RIGHTP no_argument_quad .)


state 249

    (150) specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad .

    EOS             reduce using rule 150 (specialfunction_prime -> RESTART LEFTP RIGHTP no_argument_quad .)


state 250

    (16) vars_third_prime -> LEFTB exp . RIGHTB second_dimension dimensional_address_allocation

    RIGHTB          shift and go to state 293


state 251

    (68) exp_prime -> PLUS push_operator exp .

    RIGHTB          reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    GREATER         reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    LESS            reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    EQUAL           reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    NOTEQUAL        reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    GREATEREQUAL    reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    LESSEQUAL       reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    SEPARATOR       reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    RIGHTP          reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    AND             reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    OR              reduce using rule 68 (exp_prime -> PLUS push_operator exp .)
    EOS             reduce using rule 68 (exp_prime -> PLUS push_operator exp .)


state 252

    (69) exp_prime -> MINUS push_operator exp .

    RIGHTB          reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    GREATER         reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    LESS            reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    EQUAL           reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    NOTEQUAL        reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    GREATEREQUAL    reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    LESSEQUAL       reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    SEPARATOR       reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    RIGHTP          reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    AND             reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    OR              reduce using rule 69 (exp_prime -> MINUS push_operator exp .)
    EOS             reduce using rule 69 (exp_prime -> MINUS push_operator exp .)


state 253

    (73) term_prime -> MULTIPLY push_operator term .

    PLUS            reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    MINUS           reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    RIGHTB          reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    GREATER         reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    LESS            reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    EQUAL           reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    NOTEQUAL        reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    GREATEREQUAL    reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    LESSEQUAL       reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    SEPARATOR       reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    RIGHTP          reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    AND             reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    OR              reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)
    EOS             reduce using rule 73 (term_prime -> MULTIPLY push_operator term .)


state 254

    (74) term_prime -> DIVIDE push_operator term .

    PLUS            reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    MINUS           reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    RIGHTB          reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    GREATER         reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    LESS            reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    EQUAL           reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    NOTEQUAL        reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    GREATEREQUAL    reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    LESSEQUAL       reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    SEPARATOR       reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    RIGHTP          reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    AND             reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    OR              reduce using rule 74 (term_prime -> DIVIDE push_operator term .)
    EOS             reduce using rule 74 (term_prime -> DIVIDE push_operator term .)


state 255

    (77) factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .

    MULTIPLY        reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    DIVIDE          reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    PLUS            reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    MINUS           reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTB          reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATER         reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESS            reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EQUAL           reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    NOTEQUAL        reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    GREATEREQUAL    reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    LESSEQUAL       reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    SEPARATOR       reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    RIGHTP          reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    AND             reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    OR              reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)
    EOS             reduce using rule 77 (factor -> LEFTP fake_bottom expression RIGHTP pop_fake_bottom .)


state 256

    (87) operand_prime -> LEFTB exp RIGHTB . operand_second_prime
    (90) operand_second_prime -> .
    (91) operand_second_prime -> . LEFTB exp RIGHTB

    MULTIPLY        reduce using rule 90 (operand_second_prime -> .)
    DIVIDE          reduce using rule 90 (operand_second_prime -> .)
    PLUS            reduce using rule 90 (operand_second_prime -> .)
    MINUS           reduce using rule 90 (operand_second_prime -> .)
    RIGHTB          reduce using rule 90 (operand_second_prime -> .)
    GREATER         reduce using rule 90 (operand_second_prime -> .)
    LESS            reduce using rule 90 (operand_second_prime -> .)
    EQUAL           reduce using rule 90 (operand_second_prime -> .)
    NOTEQUAL        reduce using rule 90 (operand_second_prime -> .)
    GREATEREQUAL    reduce using rule 90 (operand_second_prime -> .)
    LESSEQUAL       reduce using rule 90 (operand_second_prime -> .)
    SEPARATOR       reduce using rule 90 (operand_second_prime -> .)
    RIGHTP          reduce using rule 90 (operand_second_prime -> .)
    AND             reduce using rule 90 (operand_second_prime -> .)
    OR              reduce using rule 90 (operand_second_prime -> .)
    EOS             reduce using rule 90 (operand_second_prime -> .)
    LEFTB           shift and go to state 294

    operand_second_prime           shift and go to state 295

state 257

    (88) operand_prime -> LEFTP exp operand_third_prime .

    MULTIPLY        reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    DIVIDE          reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    PLUS            reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    MINUS           reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    RIGHTB          reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    GREATER         reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    LESS            reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    EQUAL           reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    NOTEQUAL        reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    GREATEREQUAL    reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    LESSEQUAL       reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    SEPARATOR       reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    RIGHTP          reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    AND             reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    OR              reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)
    EOS             reduce using rule 88 (operand_prime -> LEFTP exp operand_third_prime .)


state 258

    (92) operand_third_prime -> SEPARATOR . exp operand_third_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 296
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 259

    (93) operand_third_prime -> RIGHTP .

    MULTIPLY        reduce using rule 93 (operand_third_prime -> RIGHTP .)
    DIVIDE          reduce using rule 93 (operand_third_prime -> RIGHTP .)
    PLUS            reduce using rule 93 (operand_third_prime -> RIGHTP .)
    MINUS           reduce using rule 93 (operand_third_prime -> RIGHTP .)
    RIGHTB          reduce using rule 93 (operand_third_prime -> RIGHTP .)
    GREATER         reduce using rule 93 (operand_third_prime -> RIGHTP .)
    LESS            reduce using rule 93 (operand_third_prime -> RIGHTP .)
    EQUAL           reduce using rule 93 (operand_third_prime -> RIGHTP .)
    NOTEQUAL        reduce using rule 93 (operand_third_prime -> RIGHTP .)
    GREATEREQUAL    reduce using rule 93 (operand_third_prime -> RIGHTP .)
    LESSEQUAL       reduce using rule 93 (operand_third_prime -> RIGHTP .)
    SEPARATOR       reduce using rule 93 (operand_third_prime -> RIGHTP .)
    RIGHTP          reduce using rule 93 (operand_third_prime -> RIGHTP .)
    AND             reduce using rule 93 (operand_third_prime -> RIGHTP .)
    OR              reduce using rule 93 (operand_third_prime -> RIGHTP .)
    EOS             reduce using rule 93 (operand_third_prime -> RIGHTP .)


state 260

    (36) modules_third_prime -> SEPARATOR modules_second_prime .

    FUNCTION        reduce using rule 36 (modules_third_prime -> SEPARATOR modules_second_prime .)
    MAIN            reduce using rule 36 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPEINT         reduce using rule 36 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPEFLOAT       reduce using rule 36 (modules_third_prime -> SEPARATOR modules_second_prime .)
    TYPECHAR        reduce using rule 36 (modules_third_prime -> SEPARATOR modules_second_prime .)


state 261

    (37) modules_third_prime -> RIGHTP LEFTBRACE . modules_fourth_prime
    (38) modules_fourth_prime -> . vars modules_fourth_prime
    (39) modules_fourth_prime -> . body modules_fifth_prime
    (11) vars -> . type vars_prime vars_fourth_prime
    (29) body -> . statement body_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    modules_fourth_prime           shift and go to state 297
    vars                           shift and go to state 298
    body                           shift and go to state 299
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 262

    (98) assignment -> ID push_id assignment_prime EQUALS push_operator expression eval_assignment .

    EOS             reduce using rule 98 (assignment -> ID push_id assignment_prime EQUALS push_operator expression eval_assignment .)


state 263

    (102) assignment_second_prime -> LEFTB exp . RIGHTB

    RIGHTB          shift and go to state 300


state 264

    (121) functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .

    EOS             reduce using rule 121 (functioncall -> ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime .)


state 265

    (122) functioncall_prime -> SEPARATOR . exp verify_parameter functioncall_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 301
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 266

    (123) functioncall_prime -> verify_param_count . RIGHTP pop_fake_bottom store_memory_data go_sub_quad

    RIGHTP          shift and go to state 302


state 267

    (131) print_prime -> SEPARATOR expression print_quad . print_prime
    (131) print_prime -> . SEPARATOR expression print_quad print_prime
    (132) print_prime -> . RIGHTP

    SEPARATOR       shift and go to state 171
    RIGHTP          shift and go to state 172

    print_prime                    shift and go to state 303

state 268

    (59) expression_prime -> GREATER push_operator expression .

    SEPARATOR       reduce using rule 59 (expression_prime -> GREATER push_operator expression .)
    RIGHTP          reduce using rule 59 (expression_prime -> GREATER push_operator expression .)
    AND             reduce using rule 59 (expression_prime -> GREATER push_operator expression .)
    OR              reduce using rule 59 (expression_prime -> GREATER push_operator expression .)
    EOS             reduce using rule 59 (expression_prime -> GREATER push_operator expression .)


state 269

    (60) expression_prime -> LESS push_operator expression .

    SEPARATOR       reduce using rule 60 (expression_prime -> LESS push_operator expression .)
    RIGHTP          reduce using rule 60 (expression_prime -> LESS push_operator expression .)
    AND             reduce using rule 60 (expression_prime -> LESS push_operator expression .)
    OR              reduce using rule 60 (expression_prime -> LESS push_operator expression .)
    EOS             reduce using rule 60 (expression_prime -> LESS push_operator expression .)


state 270

    (61) expression_prime -> EQUAL push_operator expression .

    SEPARATOR       reduce using rule 61 (expression_prime -> EQUAL push_operator expression .)
    RIGHTP          reduce using rule 61 (expression_prime -> EQUAL push_operator expression .)
    AND             reduce using rule 61 (expression_prime -> EQUAL push_operator expression .)
    OR              reduce using rule 61 (expression_prime -> EQUAL push_operator expression .)
    EOS             reduce using rule 61 (expression_prime -> EQUAL push_operator expression .)


state 271

    (62) expression_prime -> NOTEQUAL push_operator expression .

    SEPARATOR       reduce using rule 62 (expression_prime -> NOTEQUAL push_operator expression .)
    RIGHTP          reduce using rule 62 (expression_prime -> NOTEQUAL push_operator expression .)
    AND             reduce using rule 62 (expression_prime -> NOTEQUAL push_operator expression .)
    OR              reduce using rule 62 (expression_prime -> NOTEQUAL push_operator expression .)
    EOS             reduce using rule 62 (expression_prime -> NOTEQUAL push_operator expression .)


state 272

    (63) expression_prime -> GREATEREQUAL push_operator expression .

    SEPARATOR       reduce using rule 63 (expression_prime -> GREATEREQUAL push_operator expression .)
    RIGHTP          reduce using rule 63 (expression_prime -> GREATEREQUAL push_operator expression .)
    AND             reduce using rule 63 (expression_prime -> GREATEREQUAL push_operator expression .)
    OR              reduce using rule 63 (expression_prime -> GREATEREQUAL push_operator expression .)
    EOS             reduce using rule 63 (expression_prime -> GREATEREQUAL push_operator expression .)


state 273

    (64) expression_prime -> LESSEQUAL push_operator expression .

    SEPARATOR       reduce using rule 64 (expression_prime -> LESSEQUAL push_operator expression .)
    RIGHTP          reduce using rule 64 (expression_prime -> LESSEQUAL push_operator expression .)
    AND             reduce using rule 64 (expression_prime -> LESSEQUAL push_operator expression .)
    OR              reduce using rule 64 (expression_prime -> LESSEQUAL push_operator expression .)
    EOS             reduce using rule 64 (expression_prime -> LESSEQUAL push_operator expression .)


state 274

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE . body RIGHTBRACE goto_while_fill
    (29) body -> . statement body_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 304
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 275

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP . compoundexp RIGHTP gotov_quad
    (53) compoundexp -> . expression eval_logic compoundexp_prime
    (58) expression -> . exp eval_relational expression_prime
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    compoundexp                    shift and go to state 305
    expression                     shift and go to state 99
    exp                            shift and go to state 95
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 276

    (108) condition_second_prime -> statement condition_third_prime .

    ID              reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    PRINT           reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    WHILE           reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    DO              reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    IF              reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    JEDO            reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    READINPUT       reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    RIGHTBRACE      reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    RETURN          reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    ELSE            reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)
    ELSEIF          reduce using rule 108 (condition_second_prime -> statement condition_third_prime .)


state 277

    (110) condition_third_prime -> goto_if_fill . ELSEIF condition_prime
    (112) condition_third_prime -> goto_if_fill .

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSEIF          shift and go to state 306
    ID              reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    PRINT           reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    WHILE           reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    DO              reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    IF              reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    JEDO            reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    READINPUT       reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    RIGHTBRACE      reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    RETURN          reduce using rule 112 (condition_third_prime -> goto_if_fill .)
    ELSE            reduce using rule 112 (condition_third_prime -> goto_if_fill .)

  ! ELSEIF          [ reduce using rule 112 (condition_third_prime -> goto_if_fill .) ]


state 278

    (111) condition_third_prime -> ELSE . goto_else condition_fourth_prime
    (117) goto_else -> .

    LEFTBRACE       reduce using rule 117 (goto_else -> .)
    ID              reduce using rule 117 (goto_else -> .)
    PRINT           reduce using rule 117 (goto_else -> .)
    WHILE           reduce using rule 117 (goto_else -> .)
    DO              reduce using rule 117 (goto_else -> .)
    IF              reduce using rule 117 (goto_else -> .)
    JEDO            reduce using rule 117 (goto_else -> .)
    READINPUT       reduce using rule 117 (goto_else -> .)

    goto_else                      shift and go to state 307

state 279

    (109) condition_second_prime -> LEFTBRACE body . RIGHTBRACE condition_third_prime

    RIGHTBRACE      shift and go to state 308


state 280

    (54) compoundexp_prime -> AND push_operator compoundexp .

    RIGHTP          reduce using rule 54 (compoundexp_prime -> AND push_operator compoundexp .)


state 281

    (55) compoundexp_prime -> OR push_operator compoundexp .

    RIGHTP          reduce using rule 55 (compoundexp_prime -> OR push_operator compoundexp .)


state 282

    (135) specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 135 (specialfunction_prime -> CIRCLE LEFTP exp RIGHTP one_argument_quad .)


state 283

    (136) specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 136 (specialfunction_prime -> SQUARE LEFTP exp RIGHTP one_argument_quad .)


state 284

    (137) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp . RIGHTP two_argument_quad

    RIGHTP          shift and go to state 309


state 285

    (138) specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 138 (specialfunction_prime -> TRIANGLE LEFTP exp RIGHTP one_argument_quad .)


state 286

    (139) specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 139 (specialfunction_prime -> FORWARD LEFTP exp RIGHTP one_argument_quad .)


state 287

    (140) specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 140 (specialfunction_prime -> BACK LEFTP exp RIGHTP one_argument_quad .)


state 288

    (141) specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 141 (specialfunction_prime -> TURNRIGHT LEFTP exp RIGHTP one_argument_quad .)


state 289

    (142) specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 142 (specialfunction_prime -> TURNLEFT LEFTP exp RIGHTP one_argument_quad .)


state 290

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp . SEPARATOR exp RIGHTP three_argument_quad

    SEPARATOR       shift and go to state 310


state 291

    (144) specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad .

    EOS             reduce using rule 144 (specialfunction_prime -> THICKNESS LEFTP exp RIGHTP one_argument_quad .)


state 292

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp . SEPARATOR exp RIGHTP three_argument_quad

    SEPARATOR       shift and go to state 311


state 293

    (16) vars_third_prime -> LEFTB exp RIGHTB . second_dimension dimensional_address_allocation
    (18) second_dimension -> .

    SEPARATOR       reduce using rule 18 (second_dimension -> .)
    EOS             reduce using rule 18 (second_dimension -> .)

    second_dimension               shift and go to state 312

state 294

    (91) operand_second_prime -> LEFTB . exp RIGHTB
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 313
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 295

    (87) operand_prime -> LEFTB exp RIGHTB operand_second_prime .

    MULTIPLY        reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    DIVIDE          reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    PLUS            reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    MINUS           reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    RIGHTB          reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    GREATER         reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    LESS            reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    EQUAL           reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    NOTEQUAL        reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    GREATEREQUAL    reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    LESSEQUAL       reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    SEPARATOR       reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    RIGHTP          reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    AND             reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    OR              reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)
    EOS             reduce using rule 87 (operand_prime -> LEFTB exp RIGHTB operand_second_prime .)


state 296

    (92) operand_third_prime -> SEPARATOR exp . operand_third_prime
    (92) operand_third_prime -> . SEPARATOR exp operand_third_prime
    (93) operand_third_prime -> . RIGHTP

    SEPARATOR       shift and go to state 258
    RIGHTP          shift and go to state 259

    operand_third_prime            shift and go to state 314

state 297

    (37) modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .

    FUNCTION        reduce using rule 37 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    MAIN            reduce using rule 37 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPEINT         reduce using rule 37 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPEFLOAT       reduce using rule 37 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)
    TYPECHAR        reduce using rule 37 (modules_third_prime -> RIGHTP LEFTBRACE modules_fourth_prime .)


state 298

    (38) modules_fourth_prime -> vars . modules_fourth_prime
    (38) modules_fourth_prime -> . vars modules_fourth_prime
    (39) modules_fourth_prime -> . body modules_fifth_prime
    (11) vars -> . type vars_prime vars_fourth_prime
    (29) body -> . statement body_prime
    (26) type -> . TYPEINT
    (27) type -> . TYPEFLOAT
    (28) type -> . TYPECHAR
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    TYPEINT         shift and go to state 14
    TYPEFLOAT       shift and go to state 15
    TYPECHAR        shift and go to state 16
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    vars                           shift and go to state 298
    modules_fourth_prime           shift and go to state 315
    body                           shift and go to state 299
    type                           shift and go to state 11
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 299

    (39) modules_fourth_prime -> body . modules_fifth_prime
    (40) modules_fifth_prime -> . RETURN exp return_quad EOS RIGHTBRACE endproc_quad
    (41) modules_fifth_prime -> . RIGHTBRACE endproc_quad

    RETURN          shift and go to state 317
    RIGHTBRACE      shift and go to state 318

    modules_fifth_prime            shift and go to state 316

state 300

    (102) assignment_second_prime -> LEFTB exp RIGHTB .

    EQUALS          reduce using rule 102 (assignment_second_prime -> LEFTB exp RIGHTB .)


state 301

    (122) functioncall_prime -> SEPARATOR exp . verify_parameter functioncall_prime
    (125) verify_parameter -> .

    SEPARATOR       reduce using rule 125 (verify_parameter -> .)
    RIGHTP          reduce using rule 125 (verify_parameter -> .)

    verify_parameter               shift and go to state 319

state 302

    (123) functioncall_prime -> verify_param_count RIGHTP . pop_fake_bottom store_memory_data go_sub_quad
    (82) pop_fake_bottom -> .

    EOS             reduce using rule 82 (pop_fake_bottom -> .)

    pop_fake_bottom                shift and go to state 320

state 303

    (131) print_prime -> SEPARATOR expression print_quad print_prime .

    EOS             reduce using rule 131 (print_prime -> SEPARATOR expression print_quad print_prime .)


state 304

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body . RIGHTBRACE goto_while_fill

    RIGHTBRACE      shift and go to state 321


state 305

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp . RIGHTP gotov_quad

    RIGHTP          shift and go to state 322


state 306

    (110) condition_third_prime -> goto_if_fill ELSEIF . condition_prime
    (107) condition_prime -> . LEFTP compoundexp RIGHTP gotof_quad condition_second_prime

    LEFTP           shift and go to state 73

    condition_prime                shift and go to state 323

state 307

    (111) condition_third_prime -> ELSE goto_else . condition_fourth_prime
    (113) condition_fourth_prime -> . statement goto_if_fill
    (114) condition_fourth_prime -> . LEFTBRACE body RIGHTBRACE goto_if_fill
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    LEFTBRACE       shift and go to state 326
    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    condition_fourth_prime         shift and go to state 324
    statement                      shift and go to state 325
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 308

    (109) condition_second_prime -> LEFTBRACE body RIGHTBRACE . condition_third_prime
    (110) condition_third_prime -> . goto_if_fill ELSEIF condition_prime
    (111) condition_third_prime -> . ELSE goto_else condition_fourth_prime
    (112) condition_third_prime -> . goto_if_fill
    (119) goto_if_fill -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 278
    ELSEIF          reduce using rule 119 (goto_if_fill -> .)
    ID              reduce using rule 119 (goto_if_fill -> .)
    PRINT           reduce using rule 119 (goto_if_fill -> .)
    WHILE           reduce using rule 119 (goto_if_fill -> .)
    DO              reduce using rule 119 (goto_if_fill -> .)
    IF              reduce using rule 119 (goto_if_fill -> .)
    JEDO            reduce using rule 119 (goto_if_fill -> .)
    READINPUT       reduce using rule 119 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 119 (goto_if_fill -> .)
    RETURN          reduce using rule 119 (goto_if_fill -> .)

  ! ELSE            [ reduce using rule 119 (goto_if_fill -> .) ]

    condition_third_prime          shift and go to state 327
    goto_if_fill                   shift and go to state 277

state 309

    (137) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP . two_argument_quad
    (154) two_argument_quad -> .

    EOS             reduce using rule 154 (two_argument_quad -> .)

    two_argument_quad              shift and go to state 328

state 310

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR . exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 329
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 311

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR . exp RIGHTP three_argument_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 330
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 312

    (16) vars_third_prime -> LEFTB exp RIGHTB second_dimension . dimensional_address_allocation
    (19) dimensional_address_allocation -> .

    SEPARATOR       reduce using rule 19 (dimensional_address_allocation -> .)
    EOS             reduce using rule 19 (dimensional_address_allocation -> .)

    dimensional_address_allocation shift and go to state 331

state 313

    (91) operand_second_prime -> LEFTB exp . RIGHTB

    RIGHTB          shift and go to state 332


state 314

    (92) operand_third_prime -> SEPARATOR exp operand_third_prime .

    MULTIPLY        reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    DIVIDE          reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    PLUS            reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    MINUS           reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    RIGHTB          reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    GREATER         reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    LESS            reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    EQUAL           reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    NOTEQUAL        reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    GREATEREQUAL    reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    LESSEQUAL       reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    SEPARATOR       reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    RIGHTP          reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    AND             reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    OR              reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)
    EOS             reduce using rule 92 (operand_third_prime -> SEPARATOR exp operand_third_prime .)


state 315

    (38) modules_fourth_prime -> vars modules_fourth_prime .

    FUNCTION        reduce using rule 38 (modules_fourth_prime -> vars modules_fourth_prime .)
    MAIN            reduce using rule 38 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPEINT         reduce using rule 38 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPEFLOAT       reduce using rule 38 (modules_fourth_prime -> vars modules_fourth_prime .)
    TYPECHAR        reduce using rule 38 (modules_fourth_prime -> vars modules_fourth_prime .)


state 316

    (39) modules_fourth_prime -> body modules_fifth_prime .

    FUNCTION        reduce using rule 39 (modules_fourth_prime -> body modules_fifth_prime .)
    MAIN            reduce using rule 39 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPEINT         reduce using rule 39 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPEFLOAT       reduce using rule 39 (modules_fourth_prime -> body modules_fifth_prime .)
    TYPECHAR        reduce using rule 39 (modules_fourth_prime -> body modules_fifth_prime .)


state 317

    (40) modules_fifth_prime -> RETURN . exp return_quad EOS RIGHTBRACE endproc_quad
    (67) exp -> . term eval_term exp_prime
    (72) term -> . factor eval_factor term_prime
    (77) factor -> . LEFTP fake_bottom expression RIGHTP pop_fake_bottom
    (78) factor -> . operand
    (79) factor -> . PLUS operand
    (80) factor -> . MINUS operand
    (83) operand -> . CSTI evaluate_operation_int
    (84) operand -> . CSTF evaluate_operation_float
    (85) operand -> . CSTC evaluate_operation_char
    (86) operand -> . ID push_id operand_prime

    LEFTP           shift and go to state 80
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    CSTI            shift and go to state 84
    CSTF            shift and go to state 85
    CSTC            shift and go to state 86
    ID              shift and go to state 87

    exp                            shift and go to state 333
    term                           shift and go to state 78
    factor                         shift and go to state 79
    operand                        shift and go to state 81

state 318

    (41) modules_fifth_prime -> RIGHTBRACE . endproc_quad
    (46) endproc_quad -> .

    FUNCTION        reduce using rule 46 (endproc_quad -> .)
    MAIN            reduce using rule 46 (endproc_quad -> .)
    TYPEINT         reduce using rule 46 (endproc_quad -> .)
    TYPEFLOAT       reduce using rule 46 (endproc_quad -> .)
    TYPECHAR        reduce using rule 46 (endproc_quad -> .)

    endproc_quad                   shift and go to state 334

state 319

    (122) functioncall_prime -> SEPARATOR exp verify_parameter . functioncall_prime
    (122) functioncall_prime -> . SEPARATOR exp verify_parameter functioncall_prime
    (123) functioncall_prime -> . verify_param_count RIGHTP pop_fake_bottom store_memory_data go_sub_quad
    (126) verify_param_count -> .

    SEPARATOR       shift and go to state 265
    RIGHTP          reduce using rule 126 (verify_param_count -> .)

    functioncall_prime             shift and go to state 335
    verify_param_count             shift and go to state 266

state 320

    (123) functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom . store_memory_data go_sub_quad
    (127) store_memory_data -> .

    EOS             reduce using rule 127 (store_memory_data -> .)

    store_memory_data              shift and go to state 336

state 321

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE . goto_while_fill
    (120) goto_while_fill -> .

    ID              reduce using rule 120 (goto_while_fill -> .)
    PRINT           reduce using rule 120 (goto_while_fill -> .)
    WHILE           reduce using rule 120 (goto_while_fill -> .)
    DO              reduce using rule 120 (goto_while_fill -> .)
    IF              reduce using rule 120 (goto_while_fill -> .)
    JEDO            reduce using rule 120 (goto_while_fill -> .)
    READINPUT       reduce using rule 120 (goto_while_fill -> .)
    RIGHTBRACE      reduce using rule 120 (goto_while_fill -> .)
    RETURN          reduce using rule 120 (goto_while_fill -> .)
    ELSE            reduce using rule 120 (goto_while_fill -> .)
    ELSEIF          reduce using rule 120 (goto_while_fill -> .)

    goto_while_fill                shift and go to state 337

state 322

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP . gotov_quad
    (118) gotov_quad -> .

    ID              reduce using rule 118 (gotov_quad -> .)
    PRINT           reduce using rule 118 (gotov_quad -> .)
    WHILE           reduce using rule 118 (gotov_quad -> .)
    DO              reduce using rule 118 (gotov_quad -> .)
    IF              reduce using rule 118 (gotov_quad -> .)
    JEDO            reduce using rule 118 (gotov_quad -> .)
    READINPUT       reduce using rule 118 (gotov_quad -> .)
    RIGHTBRACE      reduce using rule 118 (gotov_quad -> .)
    RETURN          reduce using rule 118 (gotov_quad -> .)
    ELSE            reduce using rule 118 (gotov_quad -> .)
    ELSEIF          reduce using rule 118 (gotov_quad -> .)

    gotov_quad                     shift and go to state 338

state 323

    (110) condition_third_prime -> goto_if_fill ELSEIF condition_prime .

    ID              reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    PRINT           reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    WHILE           reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    DO              reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    IF              reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    JEDO            reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    READINPUT       reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    RIGHTBRACE      reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    RETURN          reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    ELSE            reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)
    ELSEIF          reduce using rule 110 (condition_third_prime -> goto_if_fill ELSEIF condition_prime .)


state 324

    (111) condition_third_prime -> ELSE goto_else condition_fourth_prime .

    ID              reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    PRINT           reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    WHILE           reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    DO              reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    IF              reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    JEDO            reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    READINPUT       reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    RIGHTBRACE      reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    RETURN          reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    ELSE            reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)
    ELSEIF          reduce using rule 111 (condition_third_prime -> ELSE goto_else condition_fourth_prime .)


state 325

    (113) condition_fourth_prime -> statement . goto_if_fill
    (119) goto_if_fill -> .

    ID              reduce using rule 119 (goto_if_fill -> .)
    PRINT           reduce using rule 119 (goto_if_fill -> .)
    WHILE           reduce using rule 119 (goto_if_fill -> .)
    DO              reduce using rule 119 (goto_if_fill -> .)
    IF              reduce using rule 119 (goto_if_fill -> .)
    JEDO            reduce using rule 119 (goto_if_fill -> .)
    READINPUT       reduce using rule 119 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 119 (goto_if_fill -> .)
    RETURN          reduce using rule 119 (goto_if_fill -> .)
    ELSE            reduce using rule 119 (goto_if_fill -> .)
    ELSEIF          reduce using rule 119 (goto_if_fill -> .)

    goto_if_fill                   shift and go to state 339

state 326

    (114) condition_fourth_prime -> LEFTBRACE . body RIGHTBRACE goto_if_fill
    (29) body -> . statement body_prime
    (47) statement -> . assignment EOS
    (48) statement -> . print EOS
    (49) statement -> . functioncall EOS
    (50) statement -> . condition
    (51) statement -> . specialfunction EOS
    (52) statement -> . input EOS
    (98) assignment -> . ID push_id assignment_prime EQUALS push_operator expression eval_assignment
    (130) print -> . PRINT LEFTP expression print_quad print_prime
    (121) functioncall -> . ID verify_function LEFTP fake_bottom exp verify_parameter functioncall_prime
    (104) condition -> . WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill
    (105) condition -> . DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad
    (106) condition -> . IF condition_prime
    (134) specialfunction -> . JEDO POINT specialfunction_prime
    (156) input -> . READINPUT LEFTP ID input_quad RIGHTP

    ID              shift and go to state 48
    PRINT           shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    IF              shift and go to state 52
    JEDO            shift and go to state 53
    READINPUT       shift and go to state 54

    body                           shift and go to state 340
    statement                      shift and go to state 41
    assignment                     shift and go to state 42
    print                          shift and go to state 43
    functioncall                   shift and go to state 44
    condition                      shift and go to state 45
    specialfunction                shift and go to state 46
    input                          shift and go to state 47

state 327

    (109) condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .

    ID              reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    PRINT           reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    WHILE           reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    DO              reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    IF              reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    JEDO            reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    READINPUT       reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    RIGHTBRACE      reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    RETURN          reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    ELSE            reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)
    ELSEIF          reduce using rule 109 (condition_second_prime -> LEFTBRACE body RIGHTBRACE condition_third_prime .)


state 328

    (137) specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad .

    EOS             reduce using rule 137 (specialfunction_prime -> RECTANGLE LEFTP exp SEPARATOR exp RIGHTP two_argument_quad .)


state 329

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp . RIGHTP three_argument_quad

    RIGHTP          shift and go to state 341


state 330

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp . RIGHTP three_argument_quad

    RIGHTP          shift and go to state 342


state 331

    (16) vars_third_prime -> LEFTB exp RIGHTB second_dimension dimensional_address_allocation .

    SEPARATOR       reduce using rule 16 (vars_third_prime -> LEFTB exp RIGHTB second_dimension dimensional_address_allocation .)
    EOS             reduce using rule 16 (vars_third_prime -> LEFTB exp RIGHTB second_dimension dimensional_address_allocation .)


state 332

    (91) operand_second_prime -> LEFTB exp RIGHTB .

    MULTIPLY        reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    DIVIDE          reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    PLUS            reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    MINUS           reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    RIGHTB          reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    GREATER         reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    LESS            reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    EQUAL           reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    NOTEQUAL        reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    GREATEREQUAL    reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    LESSEQUAL       reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    SEPARATOR       reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    RIGHTP          reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    AND             reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    OR              reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)
    EOS             reduce using rule 91 (operand_second_prime -> LEFTB exp RIGHTB .)


state 333

    (40) modules_fifth_prime -> RETURN exp . return_quad EOS RIGHTBRACE endproc_quad
    (45) return_quad -> .

    EOS             reduce using rule 45 (return_quad -> .)

    return_quad                    shift and go to state 343

state 334

    (41) modules_fifth_prime -> RIGHTBRACE endproc_quad .

    FUNCTION        reduce using rule 41 (modules_fifth_prime -> RIGHTBRACE endproc_quad .)
    MAIN            reduce using rule 41 (modules_fifth_prime -> RIGHTBRACE endproc_quad .)
    TYPEINT         reduce using rule 41 (modules_fifth_prime -> RIGHTBRACE endproc_quad .)
    TYPEFLOAT       reduce using rule 41 (modules_fifth_prime -> RIGHTBRACE endproc_quad .)
    TYPECHAR        reduce using rule 41 (modules_fifth_prime -> RIGHTBRACE endproc_quad .)


state 335

    (122) functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .

    EOS             reduce using rule 122 (functioncall_prime -> SEPARATOR exp verify_parameter functioncall_prime .)


state 336

    (123) functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom store_memory_data . go_sub_quad
    (128) go_sub_quad -> .

    EOS             reduce using rule 128 (go_sub_quad -> .)

    go_sub_quad                    shift and go to state 344

state 337

    (104) condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .

    ID              reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    PRINT           reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    WHILE           reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    DO              reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    IF              reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    JEDO            reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    READINPUT       reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    RIGHTBRACE      reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    RETURN          reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    ELSE            reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)
    ELSEIF          reduce using rule 104 (condition -> WHILE save_jump LEFTP compoundexp RIGHTP gotof_quad LEFTBRACE body RIGHTBRACE goto_while_fill .)


state 338

    (105) condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .

    ID              reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    PRINT           reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    WHILE           reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    DO              reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    IF              reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    JEDO            reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    READINPUT       reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    RIGHTBRACE      reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    RETURN          reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    ELSE            reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)
    ELSEIF          reduce using rule 105 (condition -> DO save_jump LEFTBRACE body RIGHTBRACE WHILE LEFTP compoundexp RIGHTP gotov_quad .)


state 339

    (113) condition_fourth_prime -> statement goto_if_fill .

    ID              reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    PRINT           reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    WHILE           reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    DO              reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    IF              reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    JEDO            reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    READINPUT       reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    RIGHTBRACE      reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    RETURN          reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    ELSE            reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)
    ELSEIF          reduce using rule 113 (condition_fourth_prime -> statement goto_if_fill .)


state 340

    (114) condition_fourth_prime -> LEFTBRACE body . RIGHTBRACE goto_if_fill

    RIGHTBRACE      shift and go to state 345


state 341

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP . three_argument_quad
    (155) three_argument_quad -> .

    EOS             reduce using rule 155 (three_argument_quad -> .)

    three_argument_quad            shift and go to state 346

state 342

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP . three_argument_quad
    (155) three_argument_quad -> .

    EOS             reduce using rule 155 (three_argument_quad -> .)

    three_argument_quad            shift and go to state 347

state 343

    (40) modules_fifth_prime -> RETURN exp return_quad . EOS RIGHTBRACE endproc_quad

    EOS             shift and go to state 348


state 344

    (123) functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom store_memory_data go_sub_quad .

    EOS             reduce using rule 123 (functioncall_prime -> verify_param_count RIGHTP pop_fake_bottom store_memory_data go_sub_quad .)


state 345

    (114) condition_fourth_prime -> LEFTBRACE body RIGHTBRACE . goto_if_fill
    (119) goto_if_fill -> .

    ID              reduce using rule 119 (goto_if_fill -> .)
    PRINT           reduce using rule 119 (goto_if_fill -> .)
    WHILE           reduce using rule 119 (goto_if_fill -> .)
    DO              reduce using rule 119 (goto_if_fill -> .)
    IF              reduce using rule 119 (goto_if_fill -> .)
    JEDO            reduce using rule 119 (goto_if_fill -> .)
    READINPUT       reduce using rule 119 (goto_if_fill -> .)
    RIGHTBRACE      reduce using rule 119 (goto_if_fill -> .)
    RETURN          reduce using rule 119 (goto_if_fill -> .)
    ELSE            reduce using rule 119 (goto_if_fill -> .)
    ELSEIF          reduce using rule 119 (goto_if_fill -> .)

    goto_if_fill                   shift and go to state 349

state 346

    (143) specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad .

    EOS             reduce using rule 143 (specialfunction_prime -> COLOR LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad .)


state 347

    (148) specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad .

    EOS             reduce using rule 148 (specialfunction_prime -> FILLSHAPE LEFTP exp SEPARATOR exp SEPARATOR exp RIGHTP three_argument_quad .)


state 348

    (40) modules_fifth_prime -> RETURN exp return_quad EOS . RIGHTBRACE endproc_quad

    RIGHTBRACE      shift and go to state 350


state 349

    (114) condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .

    ID              reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    PRINT           reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    WHILE           reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    DO              reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    IF              reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    JEDO            reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    READINPUT       reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    RIGHTBRACE      reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    RETURN          reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    ELSE            reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)
    ELSEIF          reduce using rule 114 (condition_fourth_prime -> LEFTBRACE body RIGHTBRACE goto_if_fill .)


state 350

    (40) modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE . endproc_quad
    (46) endproc_quad -> .

    FUNCTION        reduce using rule 46 (endproc_quad -> .)
    MAIN            reduce using rule 46 (endproc_quad -> .)
    TYPEINT         reduce using rule 46 (endproc_quad -> .)
    TYPEFLOAT       reduce using rule 46 (endproc_quad -> .)
    TYPECHAR        reduce using rule 46 (endproc_quad -> .)

    endproc_quad                   shift and go to state 351

state 351

    (40) modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .

    FUNCTION        reduce using rule 40 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .)
    MAIN            reduce using rule 40 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .)
    TYPEINT         reduce using rule 40 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .)
    TYPEFLOAT       reduce using rule 40 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .)
    TYPECHAR        reduce using rule 40 (modules_fifth_prime -> RETURN exp return_quad EOS RIGHTBRACE endproc_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 230 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 277 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 308 resolved as shift
